{"version":3,"sources":["/tools/fs/optimistic.js"],"names":["module","export","shouldWatch","dirtyNodeModulesDirectory","optimisticStatOrNull","optimisticLStat","optimisticLStatOrNull","optimisticReadFile","optimisticReaddir","optimisticHashOrNull","optimisticReadJsonOrNull","optimisticReadMeteorIgnore","assert","watch","require","default","v","wrap","Profile","sha1","pathSep","pathDirname","pathIsAbsolute","pathJoin","statOrNull","lstat","readFile","readdir","dependOnPath","ENABLED","process","env","METEOR_DISABLE_OPTIMISTIC_CACHING","makeOptimistic","name","fn","wrapper","args","maybeDependOnPath","apply","makeCacheKey","path","parts","i","length","arg","push","join","subscribe","ok","watcher","dirty","close","split","nmi","indexOf","nmi2","packageDirParts","slice","startsWith","packageDir","optimisticIsSymbolicLink","maybeDependOnNodeModules","index","lastIndexOf","dependOnNodeModules","strictEqual","pop","dependOnDirectorySalt","dependOnDirectory","dir","dependOnParentDirectory","parentDir","nodeModulesDir","endsWith","result","e","code","options","JSON","parse","SyntaxError","allowSyntaxError","meteorIgnorePath","meteorIgnoreStat","isFile","add","isSymbolicLink"],"mappings":"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","file":"tools/fs/optimistic.js.map","sourcesContent":["import assert from \"assert\";\nimport { wrap } from \"optimism\";\nimport { Profile } from \"../tool-env/profile.js\";\nimport { watch } from \"./safe-watcher.js\";\nimport { sha1 } from \"./watch.js\";\nimport {\n  pathSep,\n  pathDirname,\n  pathIsAbsolute,\n  pathJoin,\n  statOrNull,\n  lstat,\n  readFile,\n  readdir,\n  dependOnPath,\n} from \"./files.js\";\n\n// When in doubt, the optimistic caching system can be completely disabled\n// by setting this environment variable.\nconst ENABLED = ! process.env.METEOR_DISABLE_OPTIMISTIC_CACHING;\n\nfunction makeOptimistic(name, fn) {\n  const wrapper = wrap(ENABLED ? function (...args) {\n    maybeDependOnPath(args[0]);\n    return fn.apply(this, args);\n  } : fn, {\n    makeCacheKey(...args) {\n      if (! ENABLED) {\n        // Cache nothing when the optimistic caching system is disabled.\n        return;\n      }\n\n      const path = args[0];\n      if (! pathIsAbsolute(path)) {\n        return;\n      }\n\n      var parts = [];\n\n      for (var i = 0; i < args.length; ++i) {\n        var arg = args[i];\n\n        if (typeof arg !== \"string\") {\n          // If any of the arguments is not a string, then we won't cache the\n          // result of the corresponding file.* method invocation.\n          return;\n        }\n\n        parts.push(arg);\n      }\n\n      return parts.join(\"\\0\");\n    },\n\n    subscribe(...args) {\n      const path = args[0];\n\n      if (! shouldWatch(path)) {\n        return;\n      }\n\n      assert.ok(pathIsAbsolute(path));\n\n      let watcher = watch(path, () => {\n        wrapper.dirty(...args);\n      });\n\n      return () => {\n        if (watcher) {\n          watcher.close();\n          watcher = null;\n        }\n      };\n    }\n  });\n\n  return Profile(\"optimistic \" + name, wrapper);\n}\n\nexport const shouldWatch = wrap(path => {\n  const parts = path.split(pathSep);\n  const nmi = parts.indexOf(\"node_modules\");\n\n  if (nmi < 0) {\n    // Watch everything not in a node_modules directory.\n    return true;\n  }\n\n  if (nmi < parts.length - 1) {\n    const nmi2 = parts.indexOf(\"node_modules\", nmi + 1);\n    if (nmi2 > nmi) {\n      // If this path is nested inside more than one node_modules\n      // directory, then it isn't part of a linked npm package, so we\n      // should not watch it.\n      return false;\n    }\n\n    const packageDirParts = parts.slice(0, nmi + 2);\n\n    if (parts[nmi + 1].startsWith(\"@\")) {\n      // For linked @scoped npm packages, the symlink is nested inside the\n      // @scoped directory (which is a child of node_modules).\n      packageDirParts.push(parts[nmi + 2]);\n    }\n\n    const packageDir = packageDirParts.join(pathSep);\n    if (optimisticIsSymbolicLink(packageDir)) {\n      // If this path is in a linked npm package, then it might be under\n      // active development, so we should watch it.\n      return true;\n    }\n  }\n\n  // Starting a watcher for every single file contained within a\n  // node_modules directory would be prohibitively expensive, so\n  // instead we rely on dependOnNodeModules to tell us when files in\n  // node_modules directories might have changed.\n  return false;\n});\n\nfunction maybeDependOnPath(path) {\n  if (typeof path === \"string\") {\n    dependOnPath(path);\n    maybeDependOnNodeModules(path);\n  }\n}\n\nfunction maybeDependOnNodeModules(path) {\n  if (typeof path !== \"string\") {\n    return;\n  }\n\n  const parts = path.split(pathSep);\n\n  while (true) {\n    const index = parts.lastIndexOf(\"node_modules\");\n    if (index < 0) {\n      return;\n    }\n\n    parts.length = index + 1;\n    dependOnNodeModules(parts.join(pathSep));\n    assert.strictEqual(parts.pop(), \"node_modules\");\n  }\n}\n\nlet dependOnDirectorySalt = 0;\n\nconst dependOnDirectory = wrap(dir => {\n  // Always return something different to prevent optimism from\n  // second-guessing the dirtiness of this function.\n  return ++dependOnDirectorySalt;\n}, {\n  subscribe(dir) {\n    let watcher = watch(\n      dir,\n      () => dependOnDirectory.dirty(dir),\n    );\n\n    return function () {\n      if (watcher) {\n        watcher.close();\n        watcher = null;\n      }\n    };\n  }\n});\n\n// Called when an optimistic function detects the given file does not\n// exist, but needs to return null or false rather than throwing an\n// exception. When/if the file is eventually created, we might only get a\n// file change notification for the parent directory, so it's important to\n// depend on the parent directory using this function, so that we don't\n// cache the unsuccessful result forever.\nfunction dependOnParentDirectory(path) {\n  const parentDir = pathDirname(path);\n  if (parentDir !== path) {\n    dependOnDirectory(parentDir);\n  }\n}\n\n// Called by any optimistic function that receives a */node_modules/* path\n// as its first argument, so that we can later bulk-invalidate the results\n// of those calls if the contents of the node_modules directory change.\n// Note that this strategy will not detect changes within subdirectories\n// of this node_modules directory, but that's ok because the use case we\n// care about is adding or removing npm packages.\nconst dependOnNodeModules = wrap(nodeModulesDir => {\n  assert(pathIsAbsolute(nodeModulesDir));\n  assert(nodeModulesDir.endsWith(pathSep + \"node_modules\"));\n  return dependOnDirectory(nodeModulesDir);\n});\n\n// Invalidate all optimistic results derived from paths involving the\n// given node_modules directory.\nexport function dirtyNodeModulesDirectory(nodeModulesDir) {\n  dependOnNodeModules.dirty(nodeModulesDir);\n}\n\nexport const optimisticStatOrNull = makeOptimistic(\"statOrNull\", path => {\n  const result = statOrNull(path);\n  if (result === null) {\n    dependOnParentDirectory(path);\n  }\n  return result;\n});\n\nexport const optimisticLStat = makeOptimistic(\"lstat\", lstat);\nexport const optimisticLStatOrNull = makeOptimistic(\"lstatOrNull\", path => {\n  try {\n    return optimisticLStat(path);\n  } catch (e) {\n    if (e.code !== \"ENOENT\") throw e;\n    dependOnParentDirectory(path);\n    return null;\n  }\n});\nexport const optimisticReadFile = makeOptimistic(\"readFile\", readFile);\nexport const optimisticReaddir = makeOptimistic(\"readdir\", readdir);\nexport const optimisticHashOrNull = makeOptimistic(\"hashOrNull\", (...args) => {\n  try {\n    return sha1(optimisticReadFile(...args));\n\n  } catch (e) {\n    if (e.code !== \"EISDIR\" &&\n        e.code !== \"ENOENT\") {\n      throw e;\n    }\n  }\n\n  dependOnParentDirectory(args[0]);\n\n  return null;\n});\n\nexport const optimisticReadJsonOrNull =\nmakeOptimistic(\"readJsonOrNull\", (path, options) => {\n  try {\n    return JSON.parse(optimisticReadFile(path, options));\n\n  } catch (e) {\n    if (e.code === \"ENOENT\") {\n      dependOnParentDirectory(path);\n      return null;\n    }\n\n    if (e instanceof SyntaxError &&\n        options && options.allowSyntaxError) {\n      return null;\n    }\n\n    throw e;\n  }\n});\n\nexport const optimisticReadMeteorIgnore = wrap(dir => {\n  const meteorIgnorePath = pathJoin(dir, \".meteorignore\");\n  const meteorIgnoreStat = optimisticStatOrNull(meteorIgnorePath);\n\n  if (meteorIgnoreStat &&\n      meteorIgnoreStat.isFile()) {\n    return require(\"ignore\")().add(\n      optimisticReadFile(meteorIgnorePath, \"utf8\")\n    );\n  }\n\n  return null;\n});\n\nconst optimisticIsSymbolicLink = wrap(path => {\n  try {\n    return lstat(path).isSymbolicLink();\n  } catch (e) {\n    if (e.code !== \"ENOENT\") throw e;\n    dependOnParentDirectory(path);\n    return false;\n  }\n}, {\n  subscribe(path) {\n    let watcher = watch(path, () => {\n      optimisticIsSymbolicLink.dirty(path);\n    });\n\n    return function () {\n      if (watcher) {\n        watcher.close();\n        watcher = null;\n      }\n    };\n  }\n});\n"]}