{"version":3,"sources":["/tools/isobuild/isopack-cache.js"],"names":["module","export","IsopackCache","requestGarbageCollection","watch","require","v","_","buildmessage","compiler","files","isopackModule","colonConverter","Profile","archinfo","constructor","options","self","cacheDir","_pluginCacheDirRoot","pluginCacheDirRoot","_includeCordovaUnibuild","includeCordovaUnibuild","_packageMap","packageMap","_tropohouse","tropohouse","_previousIsopackCache","previousIsopackCache","Error","_isopacks","Object","create","_noLineNumbers","noLineNumbers","_lintLocalPackages","lintLocalPackages","_lintPackageWithSourceRoot","lintPackageWithSourceRoot","allLoadedLocalPackagesWatchSet","WatchSet","buildLocalPackages","rootPackageNames","assertInCapture","mkdir_p","onStack","each","name","_ensurePackageLoaded","eachPackage","packageInfo","wipeCachedPackages","packages","packageName","rm_recursive","_isopackDir","_pluginCacheDirForPackage","getIsopack","has","eachBuiltIsopack","iterator","isopack","getSourceRoot","arch","getInfo","kind","packageSource","sourceRoot","isopackPath","packagePath","version","pathJoin","uses","withoutSpecificOs","some","unibuilds","u","matches","use","implies","package","imp","ensureLoaded","depName","error","previousIsopack","previousInfo","packageNames","getPackagesToLoadFirst","enterJob","jobHasMessages","time","_loadLocalPackage","packagesToLoad","getStrongOrderedUsedAndImpliedPackages","pluginCacheDir","_pluginCacheDirForVersion","Isopack","initFromPath","packageToLoad","_checkUpToDatePreloaded","_pluginCacheDirForLocal","isopackBuildInfoJson","readJSONOrNull","_isopackBuildInfoPath","upToDate","_checkUpToDate","setPluginProviderPackageMap","makeSubsetMap","keys","pluginProviderPackageMap","_lintLocalPackage","compile","isopackCache","includePluginProviderPackageMap","saveToPath","includeIsopackBuildInfo","merge","getMergedWatchSet","assertInJob","_shouldLintPackage","warnings","linted","lint","lintingMessages","builtBy","BUILT_BY","isSupersetOfJSON","watchSet","fromJSON","pluginDependencies","unibuildDependencies","deps","isUpToDate","hasCordovaUnibuild","toJSON","convert","forgetPreviousIsopackCache","getLintingMessagesForLocalPackages","messages","_MessageSet","anyLinters","isopackMessages"],"mappings":"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","file":"tools/isobuild/isopack-cache.js.map","sourcesContent":["var _ = require('underscore');\n\nvar buildmessage = require('../utils/buildmessage.js');\nvar compiler = require('./compiler.js');\nvar files = require('../fs/files.js');\nvar isopackModule = require('./isopack.js');\nvar watch = require('../fs/watch.js');\nvar colonConverter = require('../utils/colon-converter.js');\nvar Profile = require('../tool-env/profile.js').Profile;\nvar archinfo = require('../utils/archinfo.js');\nimport { requestGarbageCollection } from \"../utils/gc.js\";\n\nexport class IsopackCache {\n  constructor(options) {\n    var self = this;\n    options = options || {};\n\n    // cacheDir may be null; in this case, we just don't ever save things to disk.\n    self.cacheDir = options.cacheDir;\n\n    // Root directory for caches used by build plugins.  Can be null, in which\n    // case we never give the build plugins a cache.  The directory structure is:\n    // <pluginCacheDirRoot>/<escapedPackageName>/<version>, where <version> is\n    // either the package's version if it's a versioned package, or \"local\" if\n    // it's a local package.  In the latter case, we make sure to empty it any\n    // time we rebuild the package.\n    self._pluginCacheDirRoot = options.pluginCacheDirRoot;\n\n    // This is a bit of a hack, but basically: we really don't want to spend time\n    // building web.cordova unibuilds in a project that doesn't have any Cordova\n    // platforms. (Note that we need to be careful with 'meteor publish' to still\n    // publish a web.cordova unibuild!)\n    self._includeCordovaUnibuild = !! options.includeCordovaUnibuild;\n\n    // Defines the versions of packages that we build. Must be set.\n    self._packageMap = options.packageMap;\n\n    // tropohouse may be null; in this case, we can't load versioned packages.\n    // eg, for building isopackets.\n    self._tropohouse = options.tropohouse;\n\n    // If provided, this is another IsopackCache for the same cache dir; when\n    // loading Isopacks, if they are definitely unchanged we can load the\n    // in-memory objects from this cache instead of recompiling.\n    self._previousIsopackCache = options.previousIsopackCache;\n    if (self._previousIsopackCache &&\n        self._previousIsopackCache.cacheDir !== self.cacheDir) {\n      throw Error(\"previousIsopackCache has different cacheDir!\");\n    }\n\n    // Map from package name to Isopack.\n    self._isopacks = Object.create(null);\n\n    self._noLineNumbers = !! options.noLineNumbers;\n\n    self._lintLocalPackages = !! options.lintLocalPackages;\n    self._lintPackageWithSourceRoot = options.lintPackageWithSourceRoot;\n\n    self.allLoadedLocalPackagesWatchSet = new watch.WatchSet;\n  }\n\n  buildLocalPackages(rootPackageNames) {\n    var self = this;\n    buildmessage.assertInCapture();\n\n    if (self.cacheDir) {\n      files.mkdir_p(self.cacheDir);\n    }\n\n    var onStack = {};\n    if (rootPackageNames) {\n      _.each(rootPackageNames, function (name) {\n        self._ensurePackageLoaded(name, onStack);\n      });\n    } else {\n      self._packageMap.eachPackage(function (name, packageInfo) {\n        self._ensurePackageLoaded(name, onStack);\n        requestGarbageCollection();\n      });\n    }\n  }\n\n  wipeCachedPackages(packages) {\n    var self = this;\n    if (packages) {\n      // Wipe specific packages.\n      _.each(packages, function (packageName) {\n        if (self.cacheDir) {\n          files.rm_recursive(self._isopackDir(packageName));\n        }\n        if (self._pluginCacheDirRoot) {\n          files.rm_recursive(self._pluginCacheDirForPackage(packageName));\n        }\n      });\n    } else {\n      // Wipe all packages.\n      if (self.cacheDir) {\n        files.rm_recursive(self.cacheDir);\n      }\n      if (self._pluginCacheDirRoot) {\n        files.rm_recursive(self._pluginCacheDirRoot);\n      }\n    }\n  }\n\n  // Returns the isopack (already loaded in memory) for a given name. It is an\n  // error to call this if it's not already loaded! So it should only be called\n  // after buildLocalPackages has returned, or in the process of building a\n  // package whose dependencies have all already been built.\n  getIsopack(name) {\n    var self = this;\n    if (! _.has(self._isopacks, name)) {\n      throw Error(\"isopack \" + name + \" not yet loaded?\");\n    }\n    return self._isopacks[name];\n  }\n\n  eachBuiltIsopack(iterator) {\n    var self = this;\n    _.each(self._isopacks, function (isopack, packageName) {\n      iterator(packageName, isopack);\n    });\n  }\n\n  getSourceRoot(name, arch) {\n    const packageInfo = this._packageMap.getInfo(name);\n\n    if (packageInfo) {\n      if (packageInfo.kind === \"local\") {\n        return packageInfo.packageSource.sourceRoot;\n      }\n\n      if (packageInfo.kind === \"versioned\") {\n        const isopackPath = this._tropohouse.packagePath(\n          name,\n          packageInfo.version\n        );\n\n        return files.pathJoin(isopackPath, arch);\n      }\n    }\n\n    return null;\n  }\n\n  uses(isopack, name, arch) {\n    if (! isopack) {\n      return false;\n    }\n\n    if (isopack.name === name) {\n      // Packages use themselves.\n      return true;\n    }\n\n    arch = arch && archinfo.withoutSpecificOs(arch);\n\n    return _.some(isopack.unibuilds, u => {\n      if (arch && ! archinfo.matches(u.arch, arch)) {\n        return false;\n      }\n\n      return _.some(u.uses, use => {\n        return this.implies(\n          this._isopacks[use.package],\n          name,\n          arch,\n        );\n      });\n    });\n  }\n\n  implies(isopack, name, arch) {\n    if (! isopack) {\n      return false;\n    }\n\n    if (isopack.name === name) {\n      // Packages imply themselves.\n      return true;\n    }\n\n    arch = arch && archinfo.withoutSpecificOs(arch);\n\n    return _.some(isopack.unibuilds, u => {\n      if (arch && ! archinfo.matches(u.arch, arch)) {\n        return false;\n      }\n\n      return _.some(u.implies, imp => {\n        return this.implies(\n          this._isopacks[imp.package],\n          name,\n          arch,\n        );\n      });\n    });\n  }\n\n  _ensurePackageLoaded(name, onStack) {\n    var self = this;\n    buildmessage.assertInCapture();\n    if (_.has(self._isopacks, name)) {\n      return;\n    }\n\n    var ensureLoaded = function (depName) {\n      if (_.has(onStack, depName)) {\n        buildmessage.error(\"circular dependency between packages \" +\n                           name + \" and \" + depName);\n        // recover by not enforcing one of the dependencies\n        return;\n      }\n      onStack[depName] = true;\n      self._ensurePackageLoaded(depName, onStack);\n      delete onStack[depName];\n    };\n\n    var packageInfo = self._packageMap.getInfo(name);\n    if (! packageInfo) {\n      throw Error(\"Depend on unknown package \" + name + \"?\");\n    }\n    var previousIsopack = null;\n    if (self._previousIsopackCache &&\n        _.has(self._previousIsopackCache._isopacks, name)) {\n      var previousInfo = self._previousIsopackCache._packageMap.getInfo(name);\n      if ((packageInfo.kind === 'versioned' &&\n           previousInfo.kind === 'versioned' &&\n           packageInfo.version === previousInfo.version) ||\n          (packageInfo.kind === 'local' &&\n           previousInfo.kind === 'local' &&\n           (packageInfo.packageSource.sourceRoot ===\n            previousInfo.packageSource.sourceRoot))) {\n        previousIsopack = self._previousIsopackCache._isopacks[name];\n      }\n    }\n\n    if (packageInfo.kind === 'local') {\n      var packageNames =\n            packageInfo.packageSource.getPackagesToLoadFirst(self._packageMap);\n      buildmessage.enterJob(\"preparing to build package \" + name, function () {\n        _.each(packageNames, function (depName) {\n          ensureLoaded(depName);\n        });\n        // If we failed to load something that this package depends on, don't\n        // load it.\n        if (buildmessage.jobHasMessages()) {\n          return;\n        }\n        Profile.time('IsopackCache Build local isopack', () => {\n          self._loadLocalPackage(name, packageInfo, previousIsopack);\n        });\n      });\n    } else if (packageInfo.kind === 'versioned') {\n      // We don't have to build this package, and we don't have to build its\n      // dependencies either! Just load it from disk.\n\n      if (!self._tropohouse) {\n        throw Error(\"Can't load versioned packages without a tropohouse!\");\n      }\n\n      var isopack = null, packagesToLoad = [];\n\n      Profile.time('IsopackCache Load local isopack', () => {\n        if (previousIsopack) {\n          // We can always reuse a previous Isopack for a versioned package, since\n          // we assume that it never changes.  (Admittedly, this means we won't\n          // notice if we download an additional build for the package.)\n          isopack = previousIsopack;\n          packagesToLoad = isopack.getStrongOrderedUsedAndImpliedPackages();\n        }\n        if (! isopack) {\n          // Load the isopack from disk.\n          buildmessage.enterJob(\n            \"loading package \" + name + \"@\" + packageInfo.version,\n            function () {\n              var pluginCacheDir;\n              if (self._pluginCacheDirRoot) {\n                pluginCacheDir = self._pluginCacheDirForVersion(\n                  name, packageInfo.version);\n                files.mkdir_p(pluginCacheDir);\n              }\n              var isopackPath = self._tropohouse.packagePath(\n                name, packageInfo.version);\n\n              var Isopack = isopackModule.Isopack;\n              isopack = new Isopack();\n              isopack.initFromPath(name, isopackPath, {\n                pluginCacheDir: pluginCacheDir\n              });\n              // If loading the isopack fails, then we don't need to look for more\n              // packages to load, but we should still recover by putting it in\n              // self._isopacks.\n              if (buildmessage.jobHasMessages()) {\n                return;\n              }\n              packagesToLoad = isopack.getStrongOrderedUsedAndImpliedPackages();\n            });\n        }\n      });\n\n      self._isopacks[name] = isopack;\n      // Also load its dependencies. This is so that if this package is being\n      // built as part of a plugin, all the transitive dependencies of the\n      // plugin are loaded.\n      _.each(packagesToLoad, function (packageToLoad) {\n        ensureLoaded(packageToLoad);\n      });\n    } else {\n      throw Error(\"unknown packageInfo kind?\");\n    }\n  }\n\n  _loadLocalPackage(name, packageInfo, previousIsopack) {\n    var self = this;\n    buildmessage.assertInCapture();\n    buildmessage.enterJob(\"building package \" + name, function () {\n      var isopack;\n      if (previousIsopack && self._checkUpToDatePreloaded(previousIsopack)) {\n        isopack = previousIsopack;\n        // We don't need to call self._lintLocalPackage here, because\n        // lintingMessages is saved on the isopack.\n      } else {\n        var pluginCacheDir;\n        if (self._pluginCacheDirRoot) {\n          pluginCacheDir = self._pluginCacheDirForLocal(name);\n        }\n\n        // Do we have an up-to-date package on disk?\n        var isopackBuildInfoJson = self.cacheDir && files.readJSONOrNull(\n          self._isopackBuildInfoPath(name));\n        var upToDate = self._checkUpToDate(isopackBuildInfoJson);\n\n        if (upToDate) {\n          // Reuse existing plugin cache dir\n          pluginCacheDir && files.mkdir_p(pluginCacheDir);\n\n          isopack = new isopackModule.Isopack();\n          isopack.initFromPath(name, self._isopackDir(name), {\n            isopackBuildInfoJson: isopackBuildInfoJson,\n            pluginCacheDir: pluginCacheDir\n          });\n          // _checkUpToDate already verified that\n          // isopackBuildInfoJson.pluginProviderPackageMap is a subset of\n          // self._packageMap, so this operation is correct. (It can't be done\n          // by isopack.initFromPath, because Isopack doesn't have access to\n          // the PackageMap, and specifically to the local catalog it knows\n          // about.)\n          isopack.setPluginProviderPackageMap(\n            self._packageMap.makeSubsetMap(\n              _.keys(isopackBuildInfoJson.pluginProviderPackageMap)));\n          // Because we don't save linter messages to disk, we have to relint\n          // this package.\n          // XXX save linter messages to disk?\n          self._lintLocalPackage(packageInfo.packageSource, isopack);\n        } else {\n          // Nope! Compile it again. Give it a fresh plugin cache.\n          if (pluginCacheDir) {\n            files.rm_recursive(pluginCacheDir);\n            files.mkdir_p(pluginCacheDir);\n          }\n          isopack = compiler.compile(packageInfo.packageSource, {\n            packageMap: self._packageMap,\n            isopackCache: self,\n            noLineNumbers: self._noLineNumbers,\n            includeCordovaUnibuild: self._includeCordovaUnibuild,\n            includePluginProviderPackageMap: true,\n            pluginCacheDir: pluginCacheDir\n          });\n          // Accept the compiler's result, even if there were errors (since it\n          // at least will have a useful WatchSet and will allow us to keep\n          // going and compile other packages that depend on this one). However,\n          // only lint it and save it to disk if there were no errors.\n          if (! buildmessage.jobHasMessages()) {\n            // Lint the package. We do this before saving so that the linter can\n            // augment the saved-to-disk WatchSet with linter-specific files.\n            self._lintLocalPackage(packageInfo.packageSource, isopack);\n            if (self.cacheDir) {\n              // Save to disk, for next time!\n              isopack.saveToPath(self._isopackDir(name), {\n                includeIsopackBuildInfo: true,\n                isopackCache: self,\n              });\n            }\n          }\n\n          requestGarbageCollection();\n        }\n      }\n\n      self.allLoadedLocalPackagesWatchSet.merge(isopack.getMergedWatchSet());\n      self._isopacks[name] = isopack;\n    });\n  }\n\n  // Runs appropriate linters on a package. It also augments their unibuilds'\n  // WatchSets with files used by the linter.\n  _lintLocalPackage(packageSource, isopack) {\n    buildmessage.assertInJob();\n    if (!this._shouldLintPackage(packageSource)) {\n      return;\n    }\n    const {warnings, linted} = compiler.lint(packageSource, {\n      isopackCache: this,\n      isopack: isopack,\n      includeCordovaUnibuild: this._includeCordovaUnibuild\n    });\n    // Empty lintingMessages means we ran linters and everything was OK.\n    // lintingMessages left null means there were no linters to run.\n    if (linted) {\n      isopack.lintingMessages = warnings;\n    }\n  }\n\n  _checkUpToDate(isopackBuildInfoJson) {\n    var self = this;\n    // If there isn't an isopack-buildinfo.json file, then we definitely aren't\n    // up to date!\n    if (! isopackBuildInfoJson) {\n      return false;\n    }\n\n    // If we include Cordova but this Isopack doesn't, or via versa, then we're\n    // not up to date.\n    if (self._includeCordovaUnibuild !==\n        isopackBuildInfoJson.includeCordovaUnibuild) {\n      return false;\n    }\n\n    // Was the package built by a different compiler version?\n    if (isopackBuildInfoJson.builtBy !== compiler.BUILT_BY) {\n      return false;\n    }\n\n    // If any of the direct dependencies changed their version or location, we\n    // aren't up to date.\n    if (!self._packageMap.isSupersetOfJSON(\n      isopackBuildInfoJson.pluginProviderPackageMap)) {\n      return false;\n    }\n    // Merge in the watchsets for all unibuilds and plugins in the package, then\n    // check it once.\n    var watchSet = watch.WatchSet.fromJSON(\n      isopackBuildInfoJson.pluginDependencies);\n\n    _.each(isopackBuildInfoJson.unibuildDependencies, function (deps) {\n      watchSet.merge(watch.WatchSet.fromJSON(deps));\n    });\n    return watch.isUpToDate(watchSet);\n  }\n\n  _checkUpToDatePreloaded(previousIsopack) {\n    var self = this;\n\n    // If we include Cordova but this Isopack doesn't, or via versa, then we're\n    // not up to date.\n    if (self._includeCordovaUnibuild !== previousIsopack.hasCordovaUnibuild()) {\n      return false;\n    }\n\n    // We don't have to check builtBy because we don't change BUILT_BY without\n    // restarting the process.\n\n    // If any of the direct dependencies changed their version or location, we\n    // aren't up to date.\n    if (!self._packageMap.isSupersetOfJSON(\n      previousIsopack.pluginProviderPackageMap.toJSON())) {\n      return false;\n    }\n    // Merge in the watchsets for all unibuilds and plugins in the package, then\n    // check it once.\n    var watchSet = previousIsopack.getMergedWatchSet();\n    return watch.isUpToDate(watchSet);\n  }\n\n  _isopackDir(packageName) {\n    var self = this;\n    return files.pathJoin(self.cacheDir, colonConverter.convert(packageName));\n  }\n\n  _pluginCacheDirForPackage(packageName) {\n    var self = this;\n    return files.pathJoin(self._pluginCacheDirRoot,\n                          colonConverter.convert(packageName));\n  }\n\n  _pluginCacheDirForVersion(packageName, version) {\n    var self = this;\n    return files.pathJoin(\n      self._pluginCacheDirForPackage(packageName), version);\n  }\n\n  _pluginCacheDirForLocal(packageName) {\n    var self = this;\n    // assumes that `local` is not a valid package version.\n    return files.pathJoin(\n      self._pluginCacheDirForPackage(packageName), 'local');\n  }\n\n  _isopackBuildInfoPath(packageName) {\n    var self = this;\n    return files.pathJoin(\n      self._isopackDir(packageName), 'isopack-buildinfo.json');\n  }\n\n  forgetPreviousIsopackCache() {\n    var self = this;\n    self._previousIsopackCache = null;\n  }\n\n  _shouldLintPackage(packageSource) {\n    if (this._lintLocalPackages) {\n      return true;\n    }\n    if (! this._lintPackageWithSourceRoot) {\n      return false;\n    }\n    return this._lintPackageWithSourceRoot === packageSource.sourceRoot;\n  }\n\n  getLintingMessagesForLocalPackages() {\n    const messages = new buildmessage._MessageSet();\n    let anyLinters = false;\n\n    this._packageMap.eachPackage((name, packageInfo) => {\n      const isopack = this._isopacks[name];\n      if (packageInfo.kind === 'local') {\n        if (!this._shouldLintPackage(packageInfo.packageSource)) {\n          return;\n        }\n        const isopackMessages = isopack.lintingMessages;\n        if (isopackMessages) {\n          anyLinters = true;\n          messages.merge(isopackMessages);\n        }\n      }\n    });\n\n    // return null if no linters were ever run\n    if (! anyLinters) { return null; }\n\n    return messages;\n  }\n}\n"]}