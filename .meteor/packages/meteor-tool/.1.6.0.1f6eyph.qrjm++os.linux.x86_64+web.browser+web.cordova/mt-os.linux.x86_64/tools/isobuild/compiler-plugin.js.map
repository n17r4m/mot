{"version":3,"sources":["/tools/isobuild/compiler-plugin.js"],"names":["module1","module","export","CompilerPluginProcessor","PackageSourceBatch","sha1","readAndWatchFileWithHash","watch","require","v","LRU","default","sourceMapLength","Console","ImportScanner","cssToCommonJS","Resolver","optimisticStatOrNull","isTestFilePath","archinfo","buildmessage","buildPluginModule","colonConverter","files","compiler","linker","util","_","Profile","CACHE_SIZE","process","env","METEOR_LINKER_CACHE_SIZE","CACHE_DEBUG","METEOR_TEST_PRINT_LINKER_CACHE_DEBUG","LINKER_CACHE_SALT","LINKER_CACHE","max","length","reduce","soFar","current","data","sourceMap","serverLibPackages","fibers","populateServerLibPackages","devBundlePath","getDevBundle","nodeModulesPath","pathJoin","readdir","forEach","packageName","packagePath","packageStat","statOrNull","isDirectory","e","constructor","unibuilds","arch","sourceRoot","isopackCache","linkerCacheDir","self","mkdir_p","runCompilerPlugins","assertInJob","sourceProcessorsWithSlots","sourceBatches","map","unibuild","pkg","name","getSourceRoot","jobHasMessages","each","sourceBatch","resourceSlots","resourceSlot","sourceProcessor","has","id","push","jobTitle","isopack","join","time","enterJob","title","inputFiles","InputFile","markedMethod","markBoundary","userPlugin","processFilesForTarget","bind","exception","_resourceSlot","_statCache","Object","create","_controlFileCache","_resolveCache","getContentsAsBuffer","inputResource","getPackageName","packageSourceBatch","isPackageFile","isApplicationFile","tolerant","isString","Error","getPathInPackage","path","getFileOptions","fileOptions","osPath","convertToOSPath","relPath","pathRelative","startsWith","watchSet","readAndWatchFile","contents","_stat","absPath","findControlFile","basename","dir","pathDirname","stat","isFile","pathBasename","parentDir","_resolveCacheLookup","parentPath","byId","_resolveCacheStore","resolved","resolve","resId","parentStat","batch","resolver","getResolver","error","code","_require","getArch","processor","getSourceHash","hash","getExtension","extension","getDeclaredExports","declaredExports","getDisplayPath","_getServePath","addStylesheet","options","JSON","parse","addJavaScript","addAsset","addHtml","_reportError","message","info","lazy","addError","ResourceSlot","unibuildResourceInfo","outputResources","jsOutputResources","type","toString","bare","raw","stringify","resource","sourcePath","targetPath","_getOption","_isLazy","useMeteorInstall","splitPath","split","pathSep","isInImports","indexOf","global","testCommandMetadata","isTest","isAppTest","convertToStandardLineEndings","refreshable","servePath","Buffer","from","implicit","mainModule","matches","section","importExtensions","_resolver","sourceProcessorSet","_getSourceProcessorSet","resources","filename","getByFilename","displayName","getByExtension","addImportExtension","importedSymbolToPackageName","eachUsedUnibuild","dependencies","uses","skipUnordered","skipDebugOnly","skipProdOnly","skipTestOnly","depUnibuild","symbol","testOnly","toLowerCase","nmds","nodeModulesDirectories","nodeModulesPaths","nmd","local","replace","getOrCreate","caller","targetArch","extensions","activePluginPackages","getActivePluginPackages","SourceProcessorSet","hardcodeJs","otherPkg","ensurePluginsInitialized","merge","sourceProcessors","computeJsOutputFilesMap","Map","slot","set","find","file","get","some","meteorPackageInstalls","allMissingModules","allRelocatedModules","scannerMap","isApp","scanner","bundleArch","addInputFiles","scanImports","mergeMissing","handleMissing","missingModules","missingMap","importInfoList","parts","found","slice","entry","nextMissingModules","missing","newlyAdded","newlyMissing","scanMissingModules","isEmpty","keys","_warnAboutMissingModules","outputFiles","getOutputFiles","appFilesWithoutNodeModules","installPath","nodeModulesIndex","topLevelMissingIDs","warnings","maybeWarn","possiblySpurious","endsWith","charAt","packageDir","rawWarn","text","warn","topLevelKeys","getResources","jsResources","flatten","arrays","Array","prototype","concat","apply","pluck","_linkJS","meteorInstallOptions","isWeb","linkerOptions","useGlobalNamespace","combinedServePath","convert","kind","imports","importStubServePath","includeSourceMapInstructions","noLineNumbers","fileHashes","cacheKeyPrefix","inputFile","imported","cacheKeySuffix","cacheKey","console","log","cacheFilename","wildcardCacheFilename","bufferifyJSONReturnValue","r","diskCached","readJSONOrNull","SyntaxError","canCache","linkedFiles","fullLink","ret","sm","source","retAsJSON","Promise","then","rm_recursive","writeFileAtomically","method","proto"],"mappings":"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","file":"tools/isobuild/compiler-plugin.js.map","sourcesContent":["var archinfo = require('../utils/archinfo.js');\nvar buildmessage = require('../utils/buildmessage.js');\nvar buildPluginModule = require('./build-plugin.js');\nvar colonConverter = require('../utils/colon-converter.js');\nvar files = require('../fs/files.js');\nvar compiler = require('./compiler.js');\nvar linker = require('./linker.js');\nvar util = require('util');\nvar _ = require('underscore');\nvar Profile = require('../tool-env/profile.js').Profile;\nimport {sha1, readAndWatchFileWithHash} from  '../fs/watch.js';\nimport LRU from 'lru-cache';\nimport {sourceMapLength} from '../utils/utils.js';\nimport {Console} from '../console/console.js';\nimport ImportScanner from './import-scanner.js';\nimport {cssToCommonJS} from \"./css-modules.js\";\nimport Resolver from \"./resolver.js\";\nimport {\n  optimisticStatOrNull,\n} from \"../fs/optimistic.js\";\n\nimport { isTestFilePath } from './test-files.js';\n\n// This file implements the new compiler plugins added in Meteor 1.2, which are\n// registered with the Plugin.registerCompiler API.\n//\n// Unlike legacy source handlers (Plugin.registerSourceHandler), compilers run\n// in the context of an entire app. That is to say, they don't run when you run\n// `meteor publish`; whenever they run, they have access to all the files of\n// their type across all packages as well as the app. This allows them to\n// implement cross-file and cross-package inclusion, or config files in the app\n// that affect how packages are processed, among other possibilities.\n//\n// Compilers can specify which extensions or filenames they process. They only\n// process files in packages (or the app) that directly use the plugin's package\n// (or that use it indirectly via the \"imply\" directive); just because compiler\n// plugins act on multiple packages at a time doesn't mean they automatically\n// act on all packages in your app.\n//\n// The CompilerPluginProcessor is the main entry point to this file; it is used\n// by the bundler to run all plugins on a target. It doesn't have much\n// interesting state and perhaps could have just been a function.\n//\n// It receives an ordered list of unibuilds (essentially, packages) from the\n// bundler. It turns them into an ordered list of PackageSourceBatch objects,\n// each of which represents the source files in a single package. Each\n// PackageSourceBatch consists of an ordered list of ResourceSlots representing\n// the resources in that package. The idea here is that, because Meteor executes\n// all JS files in the order produced by the bundler, we need to make sure to\n// maintain the order of packages from the bundler and the order of source files\n// within a package. Each ResourceSlot represents a resource (either a 'source'\n// resource which will be processed by a compiler plugin, or something else like\n// a static asset or some JavaScript produced by a legacy source handler), and\n// when the compiler plugin calls something like `inputFile.addJavaScript` on a\n// file, we replace that source file with the resource produced by the plugin.\n//\n// InputFile is a wrapper around ResourceSlot that is the object presented to\n// the compiler in the plugin. It is part of the documented registerCompiler\n// API.\n\n// Cache the (slightly post-processed) results of linker.fullLink.\nconst CACHE_SIZE = process.env.METEOR_LINKER_CACHE_SIZE || 1024*1024*100;\nconst CACHE_DEBUG = !! process.env.METEOR_TEST_PRINT_LINKER_CACHE_DEBUG;\nconst LINKER_CACHE_SALT = 18; // Increment this number to force relinking.\nconst LINKER_CACHE = new LRU({\n  max: CACHE_SIZE,\n  // Cache is measured in bytes. We don't care about servePath.\n  // Key is JSONification of all options plus all hashes.\n  length: function (files) {\n    return files.reduce((soFar, current) => {\n      return soFar + current.data.length + sourceMapLength(current.sourceMap);\n    }, 0);\n  }\n});\n\nconst serverLibPackages = {\n  // Make sure fibers is defined, if nothing else.\n  fibers: true\n};\n\nfunction populateServerLibPackages() {\n  const devBundlePath = files.getDevBundle();\n  const nodeModulesPath = files.pathJoin(\n    devBundlePath, \"server-lib\", \"node_modules\"\n  );\n\n  files.readdir(nodeModulesPath).forEach(packageName => {\n    const packagePath = files.pathJoin(nodeModulesPath, packageName);\n    const packageStat = files.statOrNull(packagePath);\n    if (packageStat && packageStat.isDirectory()) {\n      serverLibPackages[packageName] = true;\n    }\n  });\n}\n\ntry {\n  populateServerLibPackages();\n} catch (e) {\n  // At least we tried!\n}\n\nexport class CompilerPluginProcessor {\n  constructor({\n    unibuilds,\n    arch,\n    sourceRoot,\n    isopackCache,\n    linkerCacheDir,\n  }) {\n    const self = this;\n\n    self.unibuilds = unibuilds;\n    self.arch = arch;\n    self.sourceRoot = sourceRoot;\n    self.isopackCache = isopackCache;\n\n    self.linkerCacheDir = linkerCacheDir;\n    if (self.linkerCacheDir) {\n      files.mkdir_p(self.linkerCacheDir);\n    }\n  }\n\n  runCompilerPlugins() {\n    const self = this;\n    buildmessage.assertInJob();\n\n    // plugin id -> {sourceProcessor, resourceSlots}\n    var sourceProcessorsWithSlots = {};\n\n    var sourceBatches = _.map(self.unibuilds, function (unibuild) {\n      const { pkg: { name }, arch } = unibuild;\n      const sourceRoot = name\n        && self.isopackCache.getSourceRoot(name, arch)\n        || self.sourceRoot;\n\n      return new PackageSourceBatch(unibuild, self, {\n        sourceRoot,\n        linkerCacheDir: self.linkerCacheDir\n      });\n    });\n\n    // If we failed to match sources with processors, we're done.\n    if (buildmessage.jobHasMessages()) {\n      return [];\n    }\n\n    // Find out which files go with which CompilerPlugins.\n    _.each(sourceBatches, function (sourceBatch) {\n      _.each(sourceBatch.resourceSlots, function (resourceSlot) {\n        var sourceProcessor = resourceSlot.sourceProcessor;\n        // Skip non-sources.\n        if (! sourceProcessor) {\n          return;\n        }\n\n        if (! _.has(sourceProcessorsWithSlots, sourceProcessor.id)) {\n          sourceProcessorsWithSlots[sourceProcessor.id] = {\n            sourceProcessor: sourceProcessor,\n            resourceSlots: []\n          };\n        }\n        sourceProcessorsWithSlots[sourceProcessor.id].resourceSlots.push(\n          resourceSlot);\n      });\n    });\n\n    // Now actually run the handlers.\n    _.each(sourceProcessorsWithSlots, function (data, id) {\n      var sourceProcessor = data.sourceProcessor;\n      var resourceSlots = data.resourceSlots;\n\n      var jobTitle = [\n        \"processing files with \",\n        sourceProcessor.isopack.name,\n        \" (for target \", self.arch, \")\"\n      ].join('');\n\n      Profile.time(\"plugin \"+sourceProcessor.isopack.name, () => {\n        buildmessage.enterJob({\n          title: jobTitle\n        }, function () {\n          var inputFiles = _.map(resourceSlots, function (resourceSlot) {\n            return new InputFile(resourceSlot);\n          });\n\n          var markedMethod = buildmessage.markBoundary(\n            sourceProcessor.userPlugin.processFilesForTarget.bind(\n              sourceProcessor.userPlugin));\n          try {\n            markedMethod(inputFiles);\n          } catch (e) {\n            buildmessage.exception(e);\n          }\n        });\n      });\n    });\n\n    return sourceBatches;\n  }\n}\n\nclass InputFile extends buildPluginModule.InputFile {\n  constructor(resourceSlot) {\n    super();\n    // We use underscored attributes here because this is user-visible\n    // code and we don't want users to be accessing anything that we don't\n    // document.\n    this._resourceSlot = resourceSlot;\n\n    // Map from absolute paths to stat objects (or null if the file does\n    // not exist).\n    this._statCache = Object.create(null);\n\n    // Map from control file names (e.g. package.json, .babelrc) to\n    // absolute paths, or null to indicate absence.\n    this._controlFileCache = Object.create(null);\n\n    // Map from imported module identifier strings (possibly relative) to\n    // fully require.resolve'd module identifiers.\n    this._resolveCache = Object.create(null);\n  }\n\n  getContentsAsBuffer() {\n    var self = this;\n    return self._resourceSlot.inputResource.data;\n  }\n\n  getPackageName() {\n    var self = this;\n    return self._resourceSlot.packageSourceBatch.unibuild.pkg.name;\n  }\n\n  isPackageFile() {\n    return !! this.getPackageName();\n  }\n\n  isApplicationFile() {\n    return ! this.getPackageName();\n  }\n\n  getSourceRoot(tolerant = false) {\n    const sourceRoot = this._resourceSlot.packageSourceBatch.sourceRoot;\n\n    if (_.isString(sourceRoot)) {\n      return sourceRoot;\n    }\n\n    if (! tolerant) {\n      const name = this.getPackageName();\n      throw new Error(\n        \"Unknown source root for \" + (\n          name ? \"package \" + name : \"app\"));\n    }\n\n    return null;\n  }\n\n  getPathInPackage() {\n    var self = this;\n    return self._resourceSlot.inputResource.path;\n  }\n\n  getFileOptions() {\n    var self = this;\n    // XXX fileOptions only exists on some resources (of type \"source\"). The JS\n    // resources might not have this property.\n    return self._resourceSlot.inputResource.fileOptions || {};\n  }\n\n  readAndWatchFileWithHash(path) {\n    const osPath = files.convertToOSPath(path);\n    const sourceRoot = this.getSourceRoot();\n    const relPath = files.pathRelative(sourceRoot, osPath);\n    if (relPath.startsWith(\"..\")) {\n      throw new Error(\n        `Attempting to read file outside ${\n          this.getPackageName() || \"the app\"}: ${osPath}`\n      );\n    }\n    const sourceBatch = this._resourceSlot.packageSourceBatch;\n    return readAndWatchFileWithHash(\n      sourceBatch.unibuild.watchSet,\n      osPath\n    );\n  }\n\n  readAndWatchFile(path) {\n    return this.readAndWatchFileWithHash(path).contents;\n  }\n\n  _stat(absPath) {\n    return _.has(this._statCache, absPath)\n      ? this._statCache[absPath]\n      : this._statCache[absPath] = optimisticStatOrNull(absPath);\n  }\n\n  // Search ancestor directories for control files (e.g. package.json,\n  // .babelrc), and return the absolute path of the first one found, or\n  // null if the search failed.\n  findControlFile(basename) {\n    let absPath = this._controlFileCache[basename];\n    if (typeof absPath === \"string\") {\n      return absPath;\n    }\n\n    const sourceRoot = this.getSourceRoot(true);\n    if (! _.isString(sourceRoot)) {\n      return this._controlFileCache[basename] = null;\n    }\n\n    let dir = files.pathDirname(\n      files.pathJoin(sourceRoot, this.getPathInPackage()));\n\n    while (true) {\n      absPath = files.pathJoin(dir, basename);\n\n      const stat = this._stat(absPath);\n      if (stat && stat.isFile()) {\n        return this._controlFileCache[basename] = absPath;\n      }\n\n      if (files.pathBasename(dir) === \"node_modules\") {\n        // The search for control files should not escape node_modules.\n        return this._controlFileCache[basename] = null;\n      }\n\n      if (dir === sourceRoot) break;\n      let parentDir = files.pathDirname(dir);\n      if (parentDir === dir) break;\n      dir = parentDir;\n    }\n\n    return this._controlFileCache[basename] = null;\n  }\n\n  _resolveCacheLookup(id, parentPath) {\n    const byId = this._resolveCache[id];\n    return byId && byId[parentPath];\n  }\n\n  _resolveCacheStore(id, parentPath, resolved) {\n    let byId = this._resolveCache[id];\n    if (! byId) {\n      byId = this._resolveCache[id] = Object.create(null);\n    }\n    return byId[parentPath] = resolved;\n  }\n\n  resolve(id, parentPath) {\n    parentPath = parentPath || files.pathJoin(\n      this.getSourceRoot(),\n      this.getPathInPackage()\n    );\n\n    const resId = this._resolveCacheLookup(id, parentPath);\n    if (resId) {\n      return resId;\n    }\n\n    const parentStat = optimisticStatOrNull(parentPath);\n    if (! parentStat ||\n        ! parentStat.isFile()) {\n      throw new Error(\"Not a file: \" + parentPath);\n    }\n\n    const batch = this._resourceSlot.packageSourceBatch;\n    const resolver = batch.getResolver();\n    const resolved = resolver.resolve(id, parentPath);\n\n    if (resolved === \"missing\") {\n      const error = new Error(\"Cannot find module '\" + id + \"'\");\n      error.code = \"MODULE_NOT_FOUND\";\n      throw error;\n    }\n\n    return this._resolveCacheStore(id, parentPath, resolved.id);\n  }\n\n  require(id, parentPath) {\n    return this._require(id, parentPath);\n  }\n\n  // This private helper method exists to prevent ambiguity between the\n  // module-global `require` function and the method name.\n  _require(id, parentPath) {\n    return require(this.resolve(id, parentPath));\n  }\n\n  getArch() {\n    return this._resourceSlot.packageSourceBatch.processor.arch;\n  }\n\n  getSourceHash() {\n    return this._resourceSlot.inputResource.hash;\n  }\n\n  /**\n   * @summary Returns the extension that matched the compiler plugin.\n   * The longest prefix is preferred.\n   * @returns {String}\n   */\n  getExtension() {\n    return this._resourceSlot.inputResource.extension;\n  }\n\n  /**\n   * @summary Returns a list of symbols declared as exports in this target. The\n   * result of `api.export('symbol')` calls in target's control file such as\n   * package.js.\n   * @memberof InputFile\n   * @returns {String[]}\n   */\n  getDeclaredExports() {\n    var self = this;\n    return self._resourceSlot.packageSourceBatch.unibuild.declaredExports;\n  }\n\n  /**\n   * @summary Returns a relative path that can be used to form error messages or\n   * other display properties. Can be used as an input to a source map.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getDisplayPath() {\n    var self = this;\n    return self._resourceSlot.packageSourceBatch.unibuild.pkg._getServePath(self.getPathInPackage());\n  }\n\n  /**\n   * @summary Web targets only. Add a stylesheet to the document. Not available\n   * for linter build plugins.\n   * @param {Object} options\n   * @param {String} options.path The requested path for the added CSS, may not\n   * be satisfied if there are path conflicts.\n   * @param {String} options.data The content of the stylesheet that should be\n   * added.\n   * @param {String|Object} options.sourceMap A stringified JSON\n   * sourcemap, in case the stylesheet was generated from a different\n   * file.\n   * @memberOf InputFile\n   * @instance\n   */\n  addStylesheet(options) {\n    var self = this;\n    if (options.sourceMap && typeof options.sourceMap === 'string') {\n      // XXX remove an anti-XSSI header? \")]}'\\n\"\n      options.sourceMap = JSON.parse(options.sourceMap);\n    }\n    self._resourceSlot.addStylesheet(options);\n  }\n\n  /**\n   * @summary Add JavaScript code. The code added will only see the\n   * namespaces imported by this package as runtime dependencies using\n   * ['api.use'](#PackageAPI-use). If the file being compiled was added\n   * with the bare flag, the resulting JavaScript won't be wrapped in a\n   * closure.\n   * @param {Object} options\n   * @param {String} options.path The path at which the JavaScript file\n   * should be inserted, may not be honored in case of path conflicts.\n   * @param {String} options.data The code to be added.\n   * @param {String|Object} options.sourceMap A stringified JSON\n   * sourcemap, in case the JavaScript file was generated from a\n   * different file.\n   * @memberOf InputFile\n   * @instance\n   */\n  addJavaScript(options) {\n    var self = this;\n    if (options.sourceMap && typeof options.sourceMap === 'string') {\n      // XXX remove an anti-XSSI header? \")]}'\\n\"\n      options.sourceMap = JSON.parse(options.sourceMap);\n    }\n    self._resourceSlot.addJavaScript(options);\n  }\n\n  /**\n   * @summary Add a file to serve as-is to the browser or to include on\n   * the browser, depending on the target. On the web, it will be served\n   * at the exact path requested. For server targets, it can be retrieved\n   * using `Assets.getText` or `Assets.getBinary`.\n   * @param {Object} options\n   * @param {String} options.path The path at which to serve the asset.\n   * @param {Buffer|String} options.data The data that should be placed in the\n   * file.\n   * @param {String} [options.hash] Optionally, supply a hash for the output\n   * file.\n   * @memberOf InputFile\n   * @instance\n   */\n  addAsset(options) {\n    var self = this;\n    self._resourceSlot.addAsset(options);\n  }\n\n  /**\n   * @summary Works in web targets only. Add markup to the `head` or `body`\n   * section of the document.\n   * @param  {Object} options\n   * @param {String} options.section Which section of the document should\n   * be appended to. Can only be \"head\" or \"body\".\n   * @param {String} options.data The content to append.\n   * @memberOf InputFile\n   * @instance\n   */\n  addHtml(options) {\n    var self = this;\n    self._resourceSlot.addHtml(options);\n  }\n\n  _reportError(message, info) {\n    if (this.getFileOptions().lazy === true) {\n      // Files with fileOptions.lazy === true were not explicitly added to\n      // the source batch via api.addFiles or api.mainModule, so any\n      // compilation errors should not be fatal until the files are\n      // actually imported by the ImportScanner. Attempting compilation is\n      // still important for lazy files that might end up being imported\n      // later, which is why we defang the error here, instead of avoiding\n      // compilation preemptively. Note also that exceptions thrown by the\n      // compiler will still cause build errors.\n      this._resourceSlot.addError(message, info);\n    } else {\n      super._reportError(message, info);\n    }\n  }\n}\n\nclass ResourceSlot {\n  constructor(unibuildResourceInfo,\n              sourceProcessor,\n              packageSourceBatch) {\n    const self = this;\n    // XXX ideally this should be an classy object, but it's not.\n    self.inputResource = unibuildResourceInfo;\n    // Everything but JS.\n    self.outputResources = [];\n    // JS, which gets linked together at the end.\n    self.jsOutputResources = [];\n    self.sourceProcessor = sourceProcessor;\n    self.packageSourceBatch = packageSourceBatch;\n\n    if (self.inputResource.type === \"source\") {\n      if (sourceProcessor) {\n        // If we have a sourceProcessor, it will handle the adding of the\n        // final processed JavaScript.\n      } else if (self.inputResource.extension === \"js\") {\n        // If there is no sourceProcessor for a .js file, add the source\n        // directly to the output. #HardcodeJs\n        self.addJavaScript({\n          // XXX it's a shame to keep converting between Buffer and string, but\n          // files.convertToStandardLineEndings only works on strings for now\n          data: self.inputResource.data.toString('utf8'),\n          path: self.inputResource.path,\n          hash: self.inputResource.hash,\n          bare: self.inputResource.fileOptions &&\n            (self.inputResource.fileOptions.bare ||\n             // XXX eventually get rid of backward-compatibility \"raw\" name\n             // XXX COMPAT WITH 0.6.4\n             self.inputResource.fileOptions.raw)\n        });\n      }\n    } else {\n      if (sourceProcessor) {\n        throw Error(\"sourceProcessor for non-source? \" +\n                    JSON.stringify(unibuildResourceInfo));\n      }\n      // Any resource that isn't handled by compiler plugins just gets passed\n      // through.\n      if (self.inputResource.type === \"js\") {\n        let resource = self.inputResource;\n        if (! _.isString(resource.sourcePath)) {\n          resource.sourcePath = self.inputResource.path;\n        }\n        if (! _.isString(resource.targetPath)) {\n          resource.targetPath = resource.sourcePath;\n        }\n        self.jsOutputResources.push(resource);\n      } else {\n        self.outputResources.push(self.inputResource);\n      }\n    }\n  }\n\n  _getOption(name, options) {\n    if (options && _.has(options, name)) {\n      return options[name];\n    }\n    const fileOptions = this.inputResource.fileOptions;\n    return fileOptions && fileOptions[name];\n  }\n\n  _isLazy(options) {\n    let lazy = this._getOption(\"lazy\", options);\n\n    if (typeof lazy === \"boolean\") {\n      return lazy;\n    }\n\n    // If file.lazy was not previously defined, mark the file lazy if\n    // it is contained by an imports directory. Note that any files\n    // contained by a node_modules directory will already have been\n    // marked lazy in PackageSource#_inferFileOptions. Same for\n    // non-test files if running (non-full-app) tests (`meteor test`)\n    if (!this.packageSourceBatch.useMeteorInstall) {\n      return false;\n    }\n\n    const splitPath = this.inputResource.path.split(files.pathSep);\n    const isInImports = splitPath.indexOf(\"imports\") >= 0;\n\n    if (global.testCommandMetadata &&\n        (global.testCommandMetadata.isTest ||\n         global.testCommandMetadata.isAppTest)) {\n      // test files should always be included, if we're running app\n      // tests.\n      return isInImports && !isTestFilePath(this.inputResource.path);\n    } else {\n      return isInImports;\n    }\n  }\n\n  addStylesheet(options) {\n    const self = this;\n    if (! self.sourceProcessor) {\n      throw Error(\"addStylesheet on non-source ResourceSlot?\");\n    }\n\n    const data = files.convertToStandardLineEndings(options.data);\n    const useMeteorInstall = self.packageSourceBatch.useMeteorInstall;\n    const sourcePath = this.inputResource.path;\n    const targetPath = options.path || sourcePath;\n    const resource = {\n      refreshable: true,\n      sourcePath,\n      targetPath,\n      servePath: self.packageSourceBatch.unibuild.pkg._getServePath(targetPath),\n      hash: sha1(data),\n      lazy: this._isLazy(options),\n    };\n\n    if (useMeteorInstall && resource.lazy) {\n      // If the current packageSourceBatch supports modules, and this CSS\n      // file is lazy, add it as a lazy JS module instead of adding it\n      // unconditionally as a CSS resource, so that it can be imported\n      // when needed.\n      resource.type = \"js\";\n      resource.data =\n        Buffer.from(cssToCommonJS(data, resource.hash), \"utf8\");\n\n      self.jsOutputResources.push(resource);\n\n    } else {\n      // Eager CSS is added unconditionally to a combined <style> tag at\n      // the beginning of the <head>. If the corresponding module ever\n      // gets imported, its module.exports object should be an empty stub,\n      // rather than a <style> node added dynamically to the <head>.\n      self.jsOutputResources.push({\n        ...resource,\n        type: \"js\",\n        data: Buffer.from(\n          \"// These styles have already been applied to the document.\\n\",\n          \"utf8\"),\n        // If a compiler plugin calls addJavaScript with the same\n        // sourcePath, that code should take precedence over this empty\n        // stub, so this property marks the resource as disposable.\n        implicit: true,\n        lazy: true,\n      });\n\n      resource.type = \"css\";\n      resource.data = Buffer.from(data, 'utf8'),\n\n      // XXX do we need to call convertSourceMapPaths here like we did\n      //     in legacy handlers?\n      resource.sourceMap = options.sourceMap;\n\n      self.outputResources.push(resource);\n    }\n  }\n\n  addJavaScript(options) {\n    const self = this;\n    // #HardcodeJs this gets called by constructor in the \"js\" case\n    if (! self.sourceProcessor && self.inputResource.extension !== \"js\") {\n      throw Error(\"addJavaScript on non-source ResourceSlot?\");\n    }\n\n    let sourcePath = self.inputResource.path;\n    if (_.has(options, \"sourcePath\") &&\n        typeof options.sourcePath === \"string\") {\n      sourcePath = options.sourcePath;\n    }\n\n    const targetPath = options.path || sourcePath;\n\n    var data = Buffer.from(\n      files.convertToStandardLineEndings(options.data), 'utf8');\n\n    self.jsOutputResources.push({\n      type: \"js\",\n      data: data,\n      sourcePath,\n      targetPath,\n      servePath: self.packageSourceBatch.unibuild.pkg._getServePath(targetPath),\n      // XXX should we allow users to be trusted and specify a hash?\n      hash: sha1(data),\n      // XXX do we need to call convertSourceMapPaths here like we did\n      //     in legacy handlers?\n      sourceMap: options.sourceMap,\n      // intentionally preserve a possible `undefined` value for files\n      // in apps, rather than convert it into `false` via `!!`\n      lazy: self._isLazy(options),\n      bare: !! self._getOption(\"bare\", options),\n      mainModule: !! self._getOption(\"mainModule\", options),\n    });\n  }\n\n  addAsset(options) {\n    const self = this;\n    if (! self.sourceProcessor) {\n      throw Error(\"addAsset on non-source ResourceSlot?\");\n    }\n\n    if (! (options.data instanceof Buffer)) {\n      if (_.isString(options.data)) {\n        options.data = Buffer.from(options.data);\n      } else {\n        throw new Error(\"'data' option to addAsset must be a Buffer or \" +\n                        \"String: \" + self.inputResource.path);\n      }\n    }\n\n    self.outputResources.push({\n      type: 'asset',\n      data: options.data,\n      path: options.path,\n      servePath: self.packageSourceBatch.unibuild.pkg._getServePath(\n        options.path),\n      hash: sha1(options.data),\n      lazy: self._isLazy(options),\n    });\n  }\n\n  addHtml(options) {\n    const self = this;\n    const unibuild = self.packageSourceBatch.unibuild;\n\n    if (! archinfo.matches(unibuild.arch, \"web\")) {\n      throw new Error(\"Document sections can only be emitted to \" +\n                      \"web targets: \" + self.inputResource.path);\n    }\n    if (options.section !== \"head\" && options.section !== \"body\") {\n      throw new Error(\"'section' must be 'head' or 'body': \" +\n                      self.inputResource.path);\n    }\n    if (typeof options.data !== \"string\") {\n      throw new Error(\"'data' option to appendDocument must be a string: \" +\n                      self.inputResource.path);\n    }\n\n    self.outputResources.push({\n      type: options.section,\n      data: Buffer.from(files.convertToStandardLineEndings(options.data), 'utf8'),\n      lazy: self._isLazy(options),\n    });\n  }\n\n  addError(message, info) {\n    // If this file is ever actually imported, only then will we report\n    // the error. Use this.jsOutputResources because that's what the\n    // ImportScanner deals with.\n    this.jsOutputResources.push({\n      type: \"js\",\n      sourcePath: this.inputResource.path,\n      targetPath: this.inputResource.path,\n      servePath: this.inputResource.path,\n      data: Buffer.from(\n        \"throw new Error(\" + JSON.stringify(message) + \");\\n\",\n        \"utf8\"),\n      lazy: true,\n      error: { message, info },\n    });\n  }\n}\n\nexport class PackageSourceBatch {\n  constructor(unibuild, processor, {\n    sourceRoot,\n    linkerCacheDir,\n  }) {\n    const self = this;\n    buildmessage.assertInJob();\n\n    self.unibuild = unibuild;\n    self.processor = processor;\n    self.sourceRoot = sourceRoot;\n    self.linkerCacheDir = linkerCacheDir;\n    self.importExtensions = [\".js\", \".json\"];\n    self._resolver = null;\n\n    var sourceProcessorSet = self._getSourceProcessorSet();\n\n    self.resourceSlots = [];\n    unibuild.resources.forEach(function (resource) {\n      let sourceProcessor = null;\n      if (resource.type === \"source\") {\n        var extension = resource.extension;\n        if (extension === null) {\n          const filename = files.pathBasename(resource.path);\n          sourceProcessor = sourceProcessorSet.getByFilename(filename);\n          if (! sourceProcessor) {\n            buildmessage.error(\n              `no plugin found for ${ resource.path } in ` +\n                `${ unibuild.pkg.displayName() }; a plugin for ${ filename } ` +\n                `was active when it was published but none is now`);\n            return;\n            // recover by ignoring\n          }\n        } else {\n          sourceProcessor = sourceProcessorSet.getByExtension(extension);\n          // If resource.extension === 'js', it's ok for there to be no\n          // sourceProcessor, since we #HardcodeJs in ResourceSlot.\n          if (! sourceProcessor && extension !== 'js') {\n            buildmessage.error(\n              `no plugin found for ${ resource.path } in ` +\n                `${ unibuild.pkg.displayName() }; a plugin for *.${ extension } ` +\n                `was active when it was published but none is now`);\n            return;\n            // recover by ignoring\n          }\n\n          self.addImportExtension(extension);\n        }\n      }\n\n      self.resourceSlots.push(new ResourceSlot(resource, sourceProcessor, self));\n    });\n\n    // Compute imports by merging the exports of all of the packages we\n    // use. Note that in the case of conflicting symbols, later packages get\n    // precedence.\n    //\n    // We don't get imports from unordered dependencies (since they\n    // may not be defined yet) or from\n    // weak/debugOnly/prodOnly/testOnly dependencies (because the\n    // meaning of a name shouldn't be affected by the non-local\n    // decision of whether or not an unrelated package in the target\n    // depends on something).\n    self.importedSymbolToPackageName = {}; // map from symbol to supplying package name\n\n    compiler.eachUsedUnibuild({\n      dependencies: self.unibuild.uses,\n      arch: self.processor.arch,\n      isopackCache: self.processor.isopackCache,\n      skipUnordered: true,\n      // don't import symbols from debugOnly, prodOnly and testOnly packages, because\n      // if the package is not linked it will cause a runtime error.\n      // the code must access them with `Package[\"my-package\"].MySymbol`.\n      skipDebugOnly: true,\n      skipProdOnly: true,\n      skipTestOnly: true,\n    }, depUnibuild => {\n      _.each(depUnibuild.declaredExports, function (symbol) {\n        // Slightly hacky implementation of test-only exports.\n        if (! symbol.testOnly || self.unibuild.pkg.isTest) {\n          self.importedSymbolToPackageName[symbol.name] = depUnibuild.pkg.name;\n        }\n      });\n    });\n\n    self.useMeteorInstall =\n      _.isString(self.sourceRoot) &&\n      self.processor.isopackCache.uses(\n        self.unibuild.pkg,\n        \"modules\",\n        self.unibuild.arch\n      );\n  }\n\n  addImportExtension(extension) {\n    extension = extension.toLowerCase();\n\n    if (! extension.startsWith(\".\")) {\n      extension = \".\" + extension;\n    }\n\n    if (this.importExtensions.indexOf(extension) < 0) {\n      this.importExtensions.push(extension);\n    }\n  }\n\n  getResolver() {\n    if (this._resolver) {\n      return this._resolver;\n    }\n\n    const nmds = this.unibuild.nodeModulesDirectories;\n    const nodeModulesPaths = [];\n\n    _.each(nmds, (nmd, path) => {\n      if (! nmd.local) {\n        nodeModulesPaths.push(\n          files.convertToOSPath(path.replace(/\\/$/g, \"\")));\n      }\n    });\n\n    return this._resolver = Resolver.getOrCreate({\n      caller: \"PackageSourceBatch#getResolver\",\n      sourceRoot: this.sourceRoot,\n      targetArch: this.processor.arch,\n      extensions: this.importExtensions,\n      nodeModulesPaths,\n    });\n  }\n\n  _getSourceProcessorSet() {\n    const self = this;\n\n    buildmessage.assertInJob();\n\n    var isopack = self.unibuild.pkg;\n    const activePluginPackages = compiler.getActivePluginPackages(isopack, {\n      uses: self.unibuild.uses,\n      isopackCache: self.processor.isopackCache\n    });\n    const sourceProcessorSet = new buildPluginModule.SourceProcessorSet(\n      isopack.displayName(), { hardcodeJs: true });\n\n    _.each(activePluginPackages, function (otherPkg) {\n      otherPkg.ensurePluginsInitialized();\n\n      sourceProcessorSet.merge(\n        otherPkg.sourceProcessors.compiler, {arch: self.processor.arch});\n    });\n\n    return sourceProcessorSet;\n  }\n\n  // Returns a map from package names to arrays of JS output files.\n  static computeJsOutputFilesMap(sourceBatches) {\n    const map = new Map;\n\n    sourceBatches.forEach(batch => {\n      const name = batch.unibuild.pkg.name || null;\n      const inputFiles = [];\n\n      batch.resourceSlots.forEach(slot => {\n        inputFiles.push(...slot.jsOutputResources);\n      });\n\n      map.set(name, {\n        files: inputFiles,\n        mainModule: _.find(inputFiles, file => file.mainModule) || null,\n        importExtensions: batch.importExtensions,\n      });\n    });\n\n    if (! map.has(\"modules\")) {\n      // In the unlikely event that no package is using the modules\n      // package, then the map is already complete, and we don't need to\n      // do any import scanning.\n      return map;\n    }\n\n    // Append install(<name>) calls to the install-packages.js file in the\n    // modules package for every Meteor package name used.\n    map.get(\"modules\").files.some(file => {\n      if (file.sourcePath !== \"install-packages.js\") {\n        return false;\n      }\n\n      const meteorPackageInstalls = [];\n\n      map.forEach((info, name) => {\n        if (! name) return;\n\n        const mainModule = info.mainModule &&\n          `meteor/${name}/${info.mainModule.targetPath}`;\n\n        meteorPackageInstalls.push(\n          \"install(\" + JSON.stringify(name) +\n            (mainModule ? \", \" + JSON.stringify(mainModule) : '') +\n          \");\\n\"\n        );\n      });\n\n      if (meteorPackageInstalls.length === 0) {\n        return false;\n      }\n\n      file.data = Buffer.from(\n        file.data.toString(\"utf8\") + \"\\n\" +\n          meteorPackageInstalls.join(\"\"),\n        \"utf8\"\n      );\n\n      file.hash = sha1(file.data);\n\n      return true;\n    });\n\n    // Map from module identifiers that previously could not be imported\n    // to lists of info objects describing the failed imports.\n    const allMissingModules = Object.create(null);\n\n    // Records the subset of allMissingModules that were successfully\n    // relocated to a source batch that could handle them.\n    const allRelocatedModules = Object.create(null);\n    const scannerMap = new Map;\n\n    sourceBatches.forEach(batch => {\n      const name = batch.unibuild.pkg.name || null;\n      const isApp = ! name;\n\n      if (! batch.useMeteorInstall && ! isApp) {\n        // If this batch represents a package that does not use the module\n        // system, then we don't need to scan its dependencies.\n        return;\n      }\n\n      const nodeModulesPaths = [];\n      _.each(batch.unibuild.nodeModulesDirectories, (nmd, sourcePath) => {\n        if (! nmd.local) {\n          // Local node_modules directories will be found by the\n          // ImportScanner, but we need to tell it about any external\n          // node_modules directories (e.g. .npm/package/node_modules).\n          nodeModulesPaths.push(sourcePath);\n        }\n      });\n\n      const scanner = new ImportScanner({\n        name,\n        bundleArch: batch.processor.arch,\n        extensions: batch.importExtensions,\n        sourceRoot: batch.sourceRoot,\n        nodeModulesPaths,\n        watchSet: batch.unibuild.watchSet,\n      });\n\n      scanner.addInputFiles(map.get(name).files);\n\n      if (batch.useMeteorInstall) {\n        scanner.scanImports();\n        ImportScanner.mergeMissing(\n          allMissingModules,\n          scanner.allMissingModules\n        );\n      }\n\n      scannerMap.set(name, scanner);\n    });\n\n    function handleMissing(missingModules) {\n      const missingMap = new Map;\n\n      _.each(missingModules, (importInfoList, id) => {\n        const parts = id.split(\"/\");\n        let name = null;\n\n        if (parts[0] === \"meteor\") {\n          let found = false;\n          name = parts[1];\n\n          if (parts.length > 2) {\n            parts[1] = \".\";\n            id = parts.slice(1).join(\"/\");\n            found = true;\n\n          } else {\n            const entry = map.get(name);\n            const mainModule = entry && entry.mainModule;\n            if (mainModule) {\n              id = \"./\" + mainModule.sourcePath;\n              found = true;\n            }\n          }\n\n          if (! found) {\n            return;\n          }\n        }\n\n        if (! scannerMap.has(name)) {\n          return;\n        }\n\n        if (! missingMap.has(name)) {\n          missingMap.set(name, Object.create(null));\n        }\n\n        ImportScanner.mergeMissing(\n          missingMap.get(name),\n          { [id]: importInfoList }\n        );\n      });\n\n      const nextMissingModules = Object.create(null);\n\n      missingMap.forEach((missing, name) => {\n        const { newlyAdded, newlyMissing } =\n          scannerMap.get(name).scanMissingModules(missing);\n        ImportScanner.mergeMissing(allRelocatedModules, newlyAdded);\n        ImportScanner.mergeMissing(nextMissingModules, newlyMissing);\n      });\n\n      if (! _.isEmpty(nextMissingModules)) {\n        handleMissing(nextMissingModules);\n      }\n    }\n\n    handleMissing(allMissingModules);\n\n    Object.keys(allRelocatedModules).forEach(id => {\n      delete allMissingModules[id];\n    });\n\n    this._warnAboutMissingModules(allMissingModules);\n\n    scannerMap.forEach((scanner, name) => {\n      const isApp = ! name;\n      const outputFiles = scanner.getOutputFiles();\n\n      if (isApp) {\n        const appFilesWithoutNodeModules = [];\n\n        outputFiles.forEach(file => {\n          const parts = file.installPath.split(\"/\");\n          const nodeModulesIndex = parts.indexOf(\"node_modules\");\n\n          if (nodeModulesIndex === -1 || (nodeModulesIndex === 0 &&\n                                          parts[1] === \"meteor\")) {\n            appFilesWithoutNodeModules.push(file);\n          } else {\n            // This file is going to be installed in a node_modules\n            // directory, so we move it to the modules bundle so that it\n            // can be imported by any package that uses the modules\n            // package. Note that this includes all files within any\n            // node_modules directory in the app, even though packages in\n            // client/node_modules will not be importable by Meteor\n            // packages, because it's important for all npm packages in\n            // the app to share the same limited scope (i.e. the scope of\n            // the modules package).\n            map.get(\"modules\").files.push(file);\n          }\n        });\n\n        map.get(null).files = appFilesWithoutNodeModules;\n\n      } else {\n        map.get(name).files = outputFiles;\n      }\n    });\n\n    return map;\n  }\n\n  static _warnAboutMissingModules(missingModules) {\n    const topLevelMissingIDs = {};\n    const warnings = [];\n\n    Object.keys(missingModules).forEach(id => {\n      // Issue at most one warning per module identifier, even if there\n      // are multiple parent modules that failed to import it.\n      missingModules[id].some(info => maybeWarn(id, info));\n    });\n\n    function maybeWarn(id, info) {\n      if (info.packageName) {\n        // Silence warnings generated by Meteor packages, since package\n        // authors can be trusted to test their packages, and may have\n        // different/better approaches to ensuring their dependencies are\n        // available. This blanket check makes some of the checks below\n        // redundant, but I would rather create a bit of dead code than\n        // risk introducing bugs when/if this check is reverted.\n        return;\n      }\n\n      if (info.possiblySpurious) {\n        // Silence warnings for missing dependencies in Browserify/Webpack\n        // bundles, since we can reasonably conclude at this point that\n        // they are false positives.\n        return;\n      }\n\n      if (id in serverLibPackages &&\n          archinfo.matches(info.bundleArch, \"os\")) {\n        // Packages in dev_bundle/server-lib/node_modules can always be\n        // resolved at runtime on the server, so we don't need to warn\n        // about them here.\n        return;\n      }\n\n      if (id === \"meteor-node-stubs\" &&\n          info.packageName === \"modules\" &&\n          info.parentPath.endsWith(\"stubs.js\")) {\n        // Don't warn about the require(\"meteor-node-stubs\") call in\n        // packages/modules/stubs.js.\n        return;\n      }\n\n      const parts = id.split(\"/\");\n\n      if (\"./\".indexOf(id.charAt(0)) < 0) {\n        const packageDir = parts[0];\n        if (packageDir === \"meteor\") {\n          // Don't print warnings for uninstalled Meteor packages.\n          return;\n        }\n\n        if (! _.has(topLevelMissingIDs, packageDir)) {\n          // This information will be used to recommend installing npm\n          // packages below.\n          topLevelMissingIDs[packageDir] = id;\n        }\n\n        if (id.startsWith(\"meteor-node-stubs/deps/\")) {\n          // Instead of printing a warning that meteor-node-stubs/deps/fs\n          // is missing, warn about the \"fs\" module, but still recommend\n          // installing meteor-node-stubs via npm below.\n          id = parts.slice(2).join(\"/\");\n        }\n\n      } else if (info.packageName) {\n        // Disable warnings about relative module resolution failures in\n        // Meteor packages, since there's not much the application\n        // developer can do about those.\n        return;\n      }\n\n      warnings.push(`  ${JSON.stringify(id)} in ${\n        info.parentPath} (${info.bundleArch})`);\n\n      return true;\n    }\n\n    if (warnings.length > 0) {\n      Console.rawWarn(\"\\nUnable to resolve some modules:\\n\\n\");\n      warnings.forEach(text => Console.warn(text));\n      Console.warn();\n\n      const topLevelKeys = Object.keys(topLevelMissingIDs);\n      if (topLevelKeys.length > 0) {\n        Console.warn(\"If you notice problems related to these missing modules, consider running:\");\n        Console.warn();\n        Console.warn(\"  meteor npm install --save \" + topLevelKeys.join(\" \"));\n        Console.warn();\n      }\n    }\n  }\n\n  // Called by bundler's Target._emitResources.  It returns the actual resources\n  // that end up in the program for this package.  By this point, it knows what\n  // its dependencies are and what their exports are, so it can set up\n  // linker-style imports and exports.\n  getResources({\n    files: jsResources,\n    importExtensions = [\".js\", \".json\"],\n  }) {\n    buildmessage.assertInJob();\n\n    function flatten(arrays) {\n      return Array.prototype.concat.apply([], arrays);\n    }\n\n    const resources = flatten(_.pluck(this.resourceSlots, 'outputResources'));\n\n    resources.push(...this._linkJS(jsResources || flatten(\n      _.pluck(this.resourceSlots, 'jsOutputResources')\n    ), this.useMeteorInstall && {\n      extensions: importExtensions\n    }));\n\n    return resources;\n  }\n\n  _linkJS(jsResources, meteorInstallOptions) {\n    const self = this;\n    buildmessage.assertInJob();\n\n    var bundleArch = self.processor.arch;\n\n    // Run the linker.\n    const isApp = ! self.unibuild.pkg.name;\n    const isWeb = archinfo.matches(self.unibuild.arch, \"web\");\n    const linkerOptions = {\n      useGlobalNamespace: isApp,\n      meteorInstallOptions,\n      // I was confused about this, so I am leaving a comment -- the\n      // combinedServePath is either [pkgname].js or [pluginName]:plugin.js.\n      // XXX: If we change this, we can get rid of source arch names!\n      combinedServePath: isApp ? \"/app.js\" :\n        \"/packages/\" + colonConverter.convert(\n          self.unibuild.pkg.name +\n            (self.unibuild.kind === \"main\" ? \"\" : (\":\" + self.unibuild.kind)) +\n            \".js\"),\n      name: self.unibuild.pkg.name || null,\n      declaredExports: _.pluck(self.unibuild.declaredExports, 'name'),\n      imports: self.importedSymbolToPackageName,\n      // XXX report an error if there is a package called global-imports\n      importStubServePath: isApp && '/packages/global-imports.js',\n      includeSourceMapInstructions: isWeb,\n      noLineNumbers: !isWeb\n    };\n\n    const fileHashes = [];\n    const cacheKeyPrefix = sha1(JSON.stringify({\n      linkerOptions,\n      files: jsResources.map((inputFile) => {\n        fileHashes.push(inputFile.hash);\n        return {\n          installPath: inputFile.installPath,\n          sourceMap: !! inputFile.sourceMap,\n          mainModule: inputFile.mainModule,\n          imported: inputFile.imported,\n          lazy: inputFile.lazy,\n          bare: inputFile.bare,\n        };\n      })\n    }));\n    const cacheKeySuffix = sha1(JSON.stringify({\n      LINKER_CACHE_SALT,\n      fileHashes\n    }));\n    const cacheKey = `${cacheKeyPrefix}_${cacheKeySuffix}`;\n\n    if (LINKER_CACHE.has(cacheKey)) {\n      if (CACHE_DEBUG) {\n        console.log('LINKER IN-MEMORY CACHE HIT:',\n                    linkerOptions.name, bundleArch);\n      }\n      return LINKER_CACHE.get(cacheKey);\n    }\n\n    const cacheFilename = self.linkerCacheDir &&\n      files.pathJoin(self.linkerCacheDir, cacheKey + '.cache');\n\n    const wildcardCacheFilename = cacheFilename &&\n      files.pathJoin(self.linkerCacheDir, cacheKeyPrefix + \"_*.cache\");\n\n    // The return value from _linkJS includes Buffers, but we want everything to\n    // be JSON for writing to the disk cache. This function converts the string\n    // version to the Buffer version.\n    function bufferifyJSONReturnValue(resources) {\n      resources.forEach((r) => {\n        r.data = Buffer.from(r.data, 'utf8');\n      });\n    }\n\n    if (cacheFilename) {\n      let diskCached = null;\n      try {\n        diskCached = files.readJSONOrNull(cacheFilename);\n      } catch (e) {\n        // Ignore JSON parse errors; pretend there was no cache.\n        if (!(e instanceof SyntaxError)) {\n          throw e;\n        }\n      }\n      if (diskCached && diskCached instanceof Array) {\n        // Fix the non-JSON part of our return value.\n        bufferifyJSONReturnValue(diskCached);\n        if (CACHE_DEBUG) {\n          console.log('LINKER DISK CACHE HIT:', linkerOptions.name, bundleArch);\n        }\n        // Add the bufferized value of diskCached to the in-memory LRU cache\n        // so we don't have to go to disk next time.\n        LINKER_CACHE.set(cacheKey, diskCached);\n        return diskCached;\n      }\n    }\n\n    if (CACHE_DEBUG) {\n      console.log('LINKER CACHE MISS:', linkerOptions.name, bundleArch);\n    }\n\n    // nb: linkedFiles might be aliased to an entry in LINKER_CACHE, so don't\n    // mutate anything from it.\n    let canCache = true;\n    let linkedFiles = null;\n    buildmessage.enterJob('linking', () => {\n      linkedFiles = linker.fullLink(jsResources, linkerOptions);\n      if (buildmessage.jobHasMessages()) {\n        canCache = false;\n      }\n    });\n    // Add each output as a resource\n    const ret = linkedFiles.map((file) => {\n      const sm = (typeof file.sourceMap === 'string')\n        ? JSON.parse(file.sourceMap) : file.sourceMap;\n      return {\n        type: \"js\",\n        // This is a string... but we will convert it to a Buffer\n        // before returning from the method (but after writing\n        // to cache).\n        data: file.source,\n        servePath: file.servePath,\n        sourceMap: sm\n      };\n    });\n\n    let retAsJSON;\n    if (canCache && cacheFilename) {\n      retAsJSON = JSON.stringify(ret);\n    }\n\n    // Convert strings to buffers, now that we've serialized it.\n    bufferifyJSONReturnValue(ret);\n\n    if (canCache) {\n      LINKER_CACHE.set(cacheKey, ret);\n      if (cacheFilename) {\n        // Write asynchronously.\n        Promise.resolve().then(() => {\n          try {\n            files.rm_recursive(wildcardCacheFilename);\n          } finally {\n            files.writeFileAtomically(cacheFilename, retAsJSON);\n          }\n        });\n      }\n    }\n\n    return ret;\n  }\n}\n\n_.each([\n  \"getResources\",\n  \"_linkJS\",\n], method => {\n  const proto = PackageSourceBatch.prototype;\n  proto[method] = Profile(\n    \"PackageSourceBatch#\" + method,\n    proto[method]\n  );\n});\n\n// static methods to measure in profile\n_.each([\n  \"computeJsOutputFilesMap\"\n], method => {\n  PackageSourceBatch[method] = Profile(\n    \"PackageSourceBatch.\" + method,\n    PackageSourceBatch[method]);\n});\n"]}