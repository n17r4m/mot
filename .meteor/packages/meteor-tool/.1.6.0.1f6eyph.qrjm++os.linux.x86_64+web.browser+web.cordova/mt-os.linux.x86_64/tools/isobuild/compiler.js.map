{"version":3,"sources":["/tools/isobuild/compiler.js"],"names":["module1","module","export","getActivePluginPackages","isIsobuildFeaturePackage","KNOWN_ISOBUILD_FEATURE_PACKAGES","SourceProcessorSet","watch","require","v","optimisticReadFile","optimisticHashOrNull","_","archinfo","buildmessage","bundler","isopack","meteorNpm","Console","files","colonConverter","linterPluginModule","compileStepModule","Profile","compiler","exports","BUILT_BY","ALL_ARCHES","compile","packageSource","options","name","assertInCapture","packageMap","isopackCache","includeCordovaUnibuild","pluginWatchSet","clone","plugins","pluginProviderPackageNames","each","pluginInfo","info","enterJob","title","rootPath","sourceRoot","buildResult","buildJsImage","use","sources","serveRoot","npmDependencies","npmDir","pathResolve","pathJoin","convert","merge","watchSet","jobHasMessages","usedPackageNames","packageName","has","image","arch","nodeModulesPath","npmCacheDirectory","updateDependencies","isobuildFeatures","architectures","forEach","sourceArch","uses","weak","package","indexOf","push","uniq","isopk","Isopack","initFromOptions","metadata","version","isTest","cordovaDependencies","npmDiscards","includeTool","debugOnly","prodOnly","testOnly","pluginCacheDir","architecture","withCache","unibuildResult","compileUnibuild","noLineNumbers","extend","includePluginProviderPackageMap","setPluginProviderPackageMap","makeSubsetMap","keys","lint","assertInJob","warnings","_MessageSet","linted","unibuildWarnings","lintUnibuild","getMinifiers","minifiers","activePluginPackages","otherPkg","ensurePluginsInitialized","sourceProcessors","minifier","allSourceProcessors","sp","ext","filter","plugin","contains","extensions","length","packages","map","p","error","join","getLinterSourceProcessorSet","sourceProcessorSet","displayName","allowConflicts","linter","isEmpty","unibuild","find","unibuilds","matches","Error","getFiles","linterMessages","capture","runLinters","inputSourceArch","isApp","pkg","resources","pluginProviderWatchSet","linterSourceProcessorSet","hardcodeJs","sourceProcessorFiles","assets","nodeModulesDirectories","Object","create","addNodeModulesDirectory","nmd","NodeModulesDirectory","sourcePath","localNodeModulesDirs","dir","local","isObject","prototype","shrinkwrapPath","replace","readAndWatchFile","addAsset","contents","relPath","hash","type","data","path","servePath","values","asset","absPath","file","readAndWatchFileWithHash","source","fileOptions","filename","pathBasename","classification","classifyFilename","linterClassification","addFile","nudge","match","isNonLegacySource","extension","usesDefaultSourceProcessor","compileStep","makeCompileStep","handler","markBoundary","legacyHandler","time","e","message","exception","declaredExports","symbol","pick","isPortable","process","env","METEOR_FORCE_PORTABLE","rebuildIfNonPortable","METEOR_ALLOW_NON_PORTABLE","every","host","nodeModulesDirsOrUndefined","undefined","addUnibuild","kind","implies","whichArch","globalImports","eachUsedUnibuild","dependencies","skipUnordered","skipDebugOnly","skipProdOnly","skipTestOnly","sourceItemsForLinter","sourceItem","wrappedSource","sourceProcessor","hasOwnProperty","id","sourcesToLint","LintingFile","userPlugin","processFilesForPackage","archToString","markedLinter","bind","globals","callback","acceptableWeakPackages","processedUnibuildId","usesToProcess","unordered","shift","usedPackage","getIsopack","getUnibuildAtArch","implied","startsWith"],"mappings":"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","file":"tools/isobuild/compiler.js.map","sourcesContent":["var _ = require('underscore');\n\nvar archinfo = require('../utils/archinfo.js');\nvar buildmessage = require('../utils/buildmessage.js');\nvar bundler = require('./bundler.js');\nvar isopack = require('./isopack.js');\nvar meteorNpm = require('./meteor-npm.js');\nvar watch = require('../fs/watch.js');\nvar Console = require('../console/console.js').Console;\nvar files = require('../fs/files.js');\nvar colonConverter = require('../utils/colon-converter.js');\nvar linterPluginModule = require('./linter-plugin.js');\nvar compileStepModule = require('./compiler-deprecated-compile-step.js');\nvar Profile = require('../tool-env/profile.js').Profile;\nimport { SourceProcessorSet } from './build-plugin.js';\n\nimport {\n  optimisticReadFile,\n  optimisticHashOrNull,\n} from \"../fs/optimistic.js\";\n\nvar compiler = exports;\n\n// Whenever you change anything about the code that generates isopacks, bump\n// this version number. The idea is that the \"format\" field of the isopack\n// JSON file only changes when the actual specified structure of the\n// isopack/unibuild changes, but this version (which is build-tool-specific)\n// can change when the the contents (not structure) of the built output\n// changes. So eg, if we improve the linker's static analysis, this should be\n// bumped.\n//\n// You should also update this whenever you update any of the packages used\n// directly by the isopack creation process since they do not end up as watched\n// dependencies. (At least for now, packages only used in target creation (eg\n// minifiers) don't require you to update BUILT_BY, though you will need to quit\n// and rerun \"meteor run\".)\ncompiler.BUILT_BY = 'meteor/30';\n\n// This is a list of all possible architectures that a build can target. (Client\n// is expanded into 'web.browser' and 'web.cordova')\ncompiler.ALL_ARCHES = [ \"os\", \"web.browser\", \"web.cordova\" ];\n\ncompiler.compile = Profile(function (packageSource, options) {\n  return `compiler.compile(${ packageSource.name || 'the app' })`;\n}, function (packageSource, options) {\n  buildmessage.assertInCapture();\n\n  var packageMap = options.packageMap;\n  var isopackCache = options.isopackCache;\n  var includeCordovaUnibuild = options.includeCordovaUnibuild;\n\n  var pluginWatchSet = packageSource.pluginWatchSet.clone();\n  var plugins = {};\n\n  var pluginProviderPackageNames = {};\n\n  // Build plugins\n  _.each(packageSource.pluginInfo, function (info) {\n    buildmessage.enterJob({\n      title: \"building plugin `\" + info.name +\n        \"` in package `\" + packageSource.name + \"`\",\n      rootPath: packageSource.sourceRoot\n    }, function () {\n      // XXX we should probably also pass options.noLineNumbers into\n      //     buildJsImage so it can pass it back to its call to\n      //     compiler.compile\n      var buildResult = bundler.buildJsImage({\n        name: info.name,\n        packageMap: packageMap,\n        isopackCache: isopackCache,\n        use: info.use,\n        sourceRoot: packageSource.sourceRoot,\n        sources: info.sources,\n        // While we're not actually \"serving\" the file, the serveRoot is used to\n        // calculate file names in source maps.\n        serveRoot: 'packages/' + packageSource.name,\n        npmDependencies: info.npmDependencies,\n        // Plugins have their own npm dependencies separate from the\n        // rest of the package, so they need their own separate npm\n        // shrinkwrap and cache state.\n        npmDir: files.pathResolve(files.pathJoin(\n          packageSource.sourceRoot,\n          '.npm', 'plugin', colonConverter.convert(info.name)\n        ))\n      });\n      // Add this plugin's dependencies to our \"plugin dependency\"\n      // WatchSet. buildResult.watchSet will end up being the merged\n      // watchSets of all of the unibuilds of the plugin -- plugins have\n      // only one unibuild and this should end up essentially being just\n      // the source files of the plugin.\n      //\n      // Note that we do this even on error, so that you can fix the error\n      // and have the runner restart.\n      pluginWatchSet.merge(buildResult.watchSet);\n\n      if (buildmessage.jobHasMessages()) {\n        return;\n      }\n\n      _.each(buildResult.usedPackageNames, function (packageName) {\n        pluginProviderPackageNames[packageName] = true;\n      });\n\n      // Register the built plugin's code.\n      if (!_.has(plugins, info.name)) {\n        plugins[info.name] = {};\n      }\n      plugins[info.name][buildResult.image.arch] = buildResult.image;\n    });\n  });\n\n  // Grab any npm dependencies. Keep them in a cache in the package\n  // source directory so we don't have to do this from scratch on\n  // every build.\n  //\n  // Go through a specialized npm dependencies update process,\n  // ensuring we don't get new versions of any (sub)dependencies. This\n  // process also runs mostly safely multiple times in parallel (which\n  // could happen if you have two apps running locally using the same\n  // package).\n  //\n  // We run this even if we have no dependencies, because we might\n  // need to delete dependencies we used to have.\n  var nodeModulesPath = null;\n  if (packageSource.npmCacheDirectory) {\n    if (meteorNpm.updateDependencies(packageSource.name,\n                                     packageSource.npmCacheDirectory,\n                                     packageSource.npmDependencies)) {\n      nodeModulesPath = files.pathJoin(\n        packageSource.npmCacheDirectory,\n        'node_modules'\n      );\n    }\n  }\n\n  // Find all the isobuild:* pseudo-packages that this package depends on. Why\n  // do we need to do this? Well, we actually load the plugins in this package\n  // before we've fully compiled the package --- plugins are loaded before the\n  // compiler builds the unibuilds in this package (because plugins are allowed\n  // to act on the package itself). But when we load plugins, we need to know if\n  // the package depends on (eg) isobuild:compiler-plugin, to know if the plugin\n  // is allowed to call Plugin.registerCompiler. At this point, the Isopack\n  // object doesn't yet have any unibuilds... but isopack.js doesn't have access\n  // to the PackageSource either (because it needs to work with both\n  // compiled-from-source and loaded-from-disk packages). So we need to make\n  // sure here that the Isopack has *some* reference to the isobuild features\n  // which the unibuilds depend on, so we do it here (and also in\n  // Isopack#initFromPath).\n  var isobuildFeatures = [];\n  packageSource.architectures.forEach((sourceArch) => {\n    sourceArch.uses.forEach((use) => {\n      if (!use.weak && isIsobuildFeaturePackage(use.package) &&\n          isobuildFeatures.indexOf(use.package) === -1) {\n        isobuildFeatures.push(use.package);\n      }\n    });\n  });\n  isobuildFeatures = _.uniq(isobuildFeatures);\n\n  var isopk = new isopack.Isopack;\n  isopk.initFromOptions({\n    name: packageSource.name,\n    metadata: packageSource.metadata,\n    version: packageSource.version,\n    isTest: packageSource.isTest,\n    plugins: plugins,\n    pluginWatchSet: pluginWatchSet,\n    cordovaDependencies: packageSource.cordovaDependencies,\n    npmDiscards: packageSource.npmDiscards,\n    includeTool: packageSource.includeTool,\n    debugOnly: packageSource.debugOnly,\n    prodOnly: packageSource.prodOnly,\n    testOnly: packageSource.testOnly,\n    pluginCacheDir: options.pluginCacheDir,\n    isobuildFeatures\n  });\n\n  _.each(packageSource.architectures, function (architecture) {\n    if (architecture.arch === 'web.cordova' && ! includeCordovaUnibuild) {\n      return;\n    }\n\n    files.withCache(() => {\n      var unibuildResult = compileUnibuild({\n        isopack: isopk,\n        sourceArch: architecture,\n        isopackCache: isopackCache,\n        nodeModulesPath: nodeModulesPath,\n        noLineNumbers: options.noLineNumbers\n      });\n\n      _.extend(pluginProviderPackageNames,\n               unibuildResult.pluginProviderPackageNames);\n    });\n  });\n\n  if (options.includePluginProviderPackageMap) {\n    isopk.setPluginProviderPackageMap(\n      packageMap.makeSubsetMap(_.keys(pluginProviderPackageNames)));\n  }\n\n  return isopk;\n});\n\n// options:\n// - isopack\n// - isopackCache\n// - includeCordovaUnibuild\ncompiler.lint = Profile(function (packageSource, options) {\n  return `compiler.lint(${ packageSource.name || 'the app' })`;\n}, function (packageSource, options) {\n  // Note: the buildmessage context of compiler.lint and lintUnibuild is a\n  // normal error message context (eg, there might be errors from initializing\n  // plugins in getLinterSourceProcessorSet).  We return the linter warnings as\n  // our return value.\n  buildmessage.assertInJob();\n\n  const warnings = new buildmessage._MessageSet;\n  let linted = false;\n  _.each(packageSource.architectures, function (architecture) {\n    // skip Cordova if not required\n    if (! options.includeCordovaUnibuild\n        && architecture.arch === 'web.cordova') {\n      return;\n    }\n\n    const unibuildWarnings = lintUnibuild({\n      isopack: options.isopack,\n      isopackCache: options.isopackCache,\n      sourceArch: architecture\n    });\n    if (unibuildWarnings) {\n      linted = true;\n      warnings.merge(unibuildWarnings);\n    }\n  });\n  return {warnings, linted};\n});\n\ncompiler.getMinifiers = function (packageSource, options) {\n  buildmessage.assertInJob();\n\n  var minifiers = [];\n  _.each(packageSource.architectures, function (architecture) {\n    var activePluginPackages = getActivePluginPackages(options.isopack, {\n      isopackCache: options.isopackCache,\n      uses: architecture.uses\n    });\n\n    _.each(activePluginPackages, function (otherPkg) {\n      otherPkg.ensurePluginsInitialized();\n\n      _.each(otherPkg.sourceProcessors.minifier.allSourceProcessors, (sp) => {\n        minifiers.push(sp);\n      });\n    });\n  });\n\n  minifiers = _.uniq(minifiers);\n  // check for extension-wise uniqness\n  _.each(['js', 'css'], function (ext) {\n    var plugins = _.filter(minifiers, function (plugin) {\n      return _.contains(plugin.extensions, ext);\n    });\n\n    if (plugins.length > 1) {\n      var packages = _.map(plugins, function (p) { return p.isopack.name; });\n      buildmessage.error(packages.join(', ') + ': multiple packages registered minifiers for extension \"' + ext + '\".');\n    }\n  });\n\n  return minifiers;\n};\n\nfunction getLinterSourceProcessorSet({isopack, activePluginPackages}) {\n  buildmessage.assertInJob();\n\n  const sourceProcessorSet = new SourceProcessorSet(\n    isopack.displayName, { allowConflicts: true });\n\n  _.each(activePluginPackages, function (otherPkg) {\n    otherPkg.ensurePluginsInitialized();\n\n    sourceProcessorSet.merge(otherPkg.sourceProcessors.linter);\n  });\n\n  return sourceProcessorSet;\n}\n\nvar lintUnibuild = function ({isopack, isopackCache, sourceArch}) {\n  // Note: the buildmessage context of compiler.lint and lintUnibuild is a\n  // normal error message context (eg, there might be errors from initializing\n  // plugins in getLinterSourceProcessorSet).  We return the linter warnings as\n  // our return value.\n  buildmessage.assertInJob();\n\n  var activePluginPackages = getActivePluginPackages(\n    isopack, {\n      isopackCache,\n      uses: sourceArch.uses\n    });\n\n  const sourceProcessorSet =\n          getLinterSourceProcessorSet({isopack, activePluginPackages});\n  // bail out early if we had trouble loading plugins or if we're not\n  // going to lint anything\n  if (buildmessage.jobHasMessages() || sourceProcessorSet.isEmpty()) {\n    return null;\n  }\n\n  const unibuild = _.find(\n    isopack.unibuilds,\n    unibuild => archinfo.matches(unibuild.arch, sourceArch.arch)\n  );\n\n  if (! unibuild) {\n    throw Error(`No ${ sourceArch.arch } unibuild for ${ isopack.name }!`);\n  }\n\n  const {sources} = sourceArch.getFiles(sourceProcessorSet, unibuild.watchSet);\n\n  const linterMessages = buildmessage.capture(() => {\n    runLinters({\n      isopackCache,\n      sources,\n      sourceProcessorSet,\n      inputSourceArch: sourceArch,\n      watchSet: unibuild.watchSet\n    });\n  });\n  return linterMessages;\n};\n\n// options.sourceArch is a SourceArch to compile.  Process all source files\n// through the appropriate legacy handlers. Create a new Unibuild and add it to\n// options.isopack.\n//\n// Returns a list of source files that were used in the compilation.\nvar compileUnibuild = Profile(function (options) {\n  return `compileUnibuild (${options.isopack.name || 'the app'})`;\n}, function (options) {\n  buildmessage.assertInCapture();\n\n  const isopk = options.isopack;\n  const inputSourceArch = options.sourceArch;\n  const isopackCache = options.isopackCache;\n  const nodeModulesPath = options.nodeModulesPath;\n  const noLineNumbers = options.noLineNumbers;\n\n  const isApp = ! inputSourceArch.pkg.name;\n  const resources = [];\n  const pluginProviderPackageNames = {};\n  const watchSet = inputSourceArch.watchSet.clone();\n\n  // *** Determine and load active plugins\n  const activePluginPackages = getActivePluginPackages(isopk, {\n    uses: inputSourceArch.uses,\n    isopackCache: isopackCache,\n    // If other package is built from source, then we need to rebuild this\n    // package if any file in the other package that could define a plugin\n    // changes.  getActivePluginPackages will add entries to this WatchSet.\n    pluginProviderWatchSet: watchSet,\n    pluginProviderPackageNames\n  });\n\n  // *** Assemble the SourceProcessorSet from the plugins. This data\n  // structure lets us decide what to do with each file: which plugin\n  // should process it in what method.\n  //\n  // We also build a SourceProcessorSet for this package's linters even\n  // though we're not linting right now. This is so we can tell the\n  // difference between an file added to a package as a linter config\n  // file (not handled by any compiler), and a file that's truly not\n  // handled by anything (which is an error unless explicitly declared\n  // as a static asset).\n  let sourceProcessorSet, linterSourceProcessorSet;\n  buildmessage.enterJob(\"determining active plugins\", () => {\n    sourceProcessorSet = new SourceProcessorSet(\n      isopk.displayName(), { hardcodeJs: true});\n\n    activePluginPackages.forEach((otherPkg) => {\n      otherPkg.ensurePluginsInitialized();\n\n      // Note that this may log a buildmessage if there are conflicts.\n      sourceProcessorSet.merge(otherPkg.sourceProcessors.compiler);\n    });\n\n    // Used to excuse functions from the \"undeclared static asset\" check.\n    linterSourceProcessorSet = getLinterSourceProcessorSet({\n      activePluginPackages,\n      isopack: isopk\n    });\n    if (buildmessage.jobHasMessages()) {\n      // Recover by not calling getFiles and pretending there are no\n      // items.\n      sourceProcessorSet = null;\n    }\n  });\n\n  // *** Determine source files\n  // Note: the getFiles function isn't expected to add its\n  // source files to watchSet; rather, the watchSet is for other\n  // things that the getFiles consulted (such as directory\n  // listings or, in some hypothetical universe, control files) to\n  // determine its source files.\n  const sourceProcessorFiles = sourceProcessorSet\n    ? inputSourceArch.getFiles(sourceProcessorSet, watchSet) : {};\n  const sources = sourceProcessorFiles.sources || [];\n  const assets = sourceProcessorFiles.assets || [];\n\n  const nodeModulesDirectories = Object.create(null);\n\n  function addNodeModulesDirectory(options) {\n    const nmd = new bundler.NodeModulesDirectory(options);\n    nodeModulesDirectories[nmd.sourcePath] = nmd;\n  }\n\n  _.each(inputSourceArch.localNodeModulesDirs, (info, dir) => {\n    addNodeModulesDirectory({\n      packageName: inputSourceArch.pkg.name,\n      sourceRoot: inputSourceArch.sourceRoot,\n      sourcePath: files.pathJoin(inputSourceArch.sourceRoot, dir),\n      // Npm.strip applies to local node_modules directories of Meteor\n      // packages, as well as .npm/package/node_modules directories.\n      npmDiscards: isopk.npmDiscards,\n      local: true,\n      // The values of inputSourceArch.localNodeModulesDirs are usually\n      // just `true`, but if `info` is an object, then we let its\n      // properties override the properties defined above.\n      ...(_.isObject(info) ? info : Object.prototype),\n    });\n  });\n\n  if (nodeModulesPath) {\n    addNodeModulesDirectory({\n      packageName: inputSourceArch.pkg.name,\n      sourceRoot: inputSourceArch.sourceRoot,\n      sourcePath: nodeModulesPath,\n      npmDiscards: isopk.npmDiscards,\n      local: false,\n    });\n\n    // If this slice has node modules, we should consider the shrinkwrap file\n    // to be part of its inputs. (This is a little racy because there's no\n    // guarantee that what we read here is precisely the version that's used,\n    // but it's better than nothing at all.)\n    //\n    // Note that this also means that npm modules used by plugins will get\n    // this npm-shrinkwrap.json in their pluginDependencies (including for all\n    // packages that depend on us)!  This is good: this means that a tweak to\n    // an indirect dependency of the coffee-script npm module used by the\n    // coffeescript package will correctly cause packages with *.coffee files\n    // to be rebuilt.\n    const shrinkwrapPath = nodeModulesPath.replace(\n        /node_modules$/, 'npm-shrinkwrap.json');\n    watch.readAndWatchFile(watchSet, shrinkwrapPath);\n  }\n\n  // This function needs to be factored out to support legacy handlers later on\n  // in the compilation process\n  function addAsset(contents, relPath, hash) {\n    // XXX hack to strip out private and public directory names from app asset\n    // paths\n    if (! inputSourceArch.pkg.name) {\n      relPath = relPath.replace(/^(private|public)\\//, '');\n    }\n\n    resources.push({\n      type: \"asset\",\n      data: contents,\n      path: relPath,\n      servePath: colonConverter.convert(\n        files.pathJoin(inputSourceArch.pkg.serveRoot, relPath)),\n      hash: hash\n    });\n  }\n\n  // Add all assets\n  _.values(assets).forEach((asset) => {\n    const relPath = asset.relPath;\n    const absPath = files.pathResolve(inputSourceArch.sourceRoot, relPath);\n\n    // readAndWatchFileWithHash returns an object carrying a buffer with the\n    // file-contents. The buffer contains the original data of the file (no EOL\n    // transforms from the tools/files.js part).\n    const file = watch.readAndWatchFileWithHash(watchSet, absPath);\n    const hash = file.hash;\n    const contents = file.contents;\n\n    addAsset(contents, relPath, hash);\n  });\n\n  // Add and compile all source files\n  _.values(sources).forEach((source) => {\n    const relPath = source.relPath;\n    const fileOptions = _.clone(source.fileOptions) || {};\n    const absPath = files.pathResolve(inputSourceArch.sourceRoot, relPath);\n    const filename = files.pathBasename(relPath);\n\n    // Find the handler for source files with this extension\n    let classification = null;\n    classification = sourceProcessorSet.classifyFilename(\n      filename, inputSourceArch.arch);\n\n    if (classification.type === 'wrong-arch') {\n      // This file is for a compiler plugin but not for this arch. Skip it,\n      // and don't even watch it.  (eg, skip CSS preprocessor files on the\n      // server.)  This `return` skips this source file and goes on to the next\n      // one.\n      return;\n    }\n\n    if (classification.type === 'unmatched') {\n      // This is not matched by any compiler plugin or legacy source handler,\n      // but it was added as a source file.\n      //\n      // Prior to the batch-plugins project, these would be implicitly treated\n      // as static assets. Now we consider this to be an error; you need to\n      // explicitly tell that you want something to be a static asset by calling\n      // addAssets or putting it in the public/private directories in an app.\n      //\n      // This is a backwards-incompatible change, but it doesn't affect\n      // previously-published packages (because the check is occuring in the\n      // compiler), and it doesn't affect apps (where random files outside of\n      // private/public never end up in the source list anyway).\n      //\n      // As one special case, if a file is unmatched by the compiler\n      // SourceProcessorSet but is matched by the linter SourceProcessorSet (ie,\n      // a linter config file), we don't report an error; this is so that you\n      // can run `api.addFiles('.jshintrc')` and have it work.  (This is only\n      // relevant for packages.)  We don't put these files in the WatchSet,\n      // though; that happens via compiler.lint.\n\n      if (isApp) {\n        // This shouldn't happen, because initFromAppDir's getFiles\n        // should only return assets or sources which match\n        // sourceProcessorSet.\n        throw Error(\"app contains non-asset files without plugin? \" +\n                    relPath + \" - \" + filename);\n      }\n\n      const linterClassification = linterSourceProcessorSet.classifyFilename(\n        filename, inputSourceArch.arch);\n      if (linterClassification.type !== 'unmatched') {\n        // The linter knows about this, so we'll just ignore it instead of\n        // throwing an error.\n        return;\n      }\n\n      buildmessage.error(\n        `No plugin known to handle file '${ relPath }'. If you want this \\\nfile to be a static asset, use addAssets instead of addFiles; eg, \\\napi.addAssets('${relPath}', 'client').`);\n      // recover by ignoring\n      return;\n    }\n\n    const contents = optimisticReadFile(absPath);\n    const hash = optimisticHashOrNull(absPath);\n    const file = { contents, hash };\n    watchSet.addFile(absPath, hash);\n\n    Console.nudge(true);\n\n    if (classification.type === \"meteor-ignore\") {\n      // Return after watching .meteorignore files but before adding them\n      // as resources to be processed by compiler plugins. To see how\n      // these files are handled, see PackageSource#_findSources.\n      return;\n    }\n\n    if (contents === null) {\n      // It really sucks to put this check here, since this isn't publish\n      // code...\n      // XXX We think this code can probably be deleted at this point because\n      // people probably aren't trying to use files with colons in them any\n      // more.\n      if (source.relPath.match(/:/)) {\n        buildmessage.error(\n          \"Couldn't build this package on Windows due to the following file \" +\n          \"with a colon -- \" + source.relPath + \". Please rename and \" +\n          \"and re-publish the package.\");\n      } else {\n        buildmessage.error(\"File not found: \" + source.relPath);\n      }\n\n      // recover by ignoring (but still watching the file)\n      return;\n    }\n\n    if (classification.isNonLegacySource()) {\n      // This is source used by a new-style compiler plugin; it will be fully\n      // processed later in the bundler.\n      resources.push({\n        type: \"source\",\n        extension: classification.extension || null,\n        usesDefaultSourceProcessor:\n          !! classification.usesDefaultSourceProcessor,\n        data: contents,\n        path: relPath,\n        hash: hash,\n        fileOptions: fileOptions\n      });\n      return;\n    }\n\n    if (classification.type !== 'legacy-handler') {\n      throw Error(\"unhandled type: \" + classification.type);\n    }\n\n    // OK, time to handle legacy handlers.\n    var compileStep = compileStepModule.makeCompileStep(\n      source, file, inputSourceArch, {\n        resources: resources,\n        addAsset: addAsset\n      });\n\n    const handler = buildmessage.markBoundary(classification.legacyHandler);\n\n    try {\n      Profile.time(`legacy handler (.${classification.extension})`, () => {\n        handler(compileStep);\n      });\n    } catch (e) {\n      e.message = e.message + \" (compiling \" + relPath + \")\";\n      buildmessage.exception(e);\n\n      // Recover by ignoring this source file (as best we can -- the\n      // handler might already have emitted resources)\n    }\n  });\n\n  // *** Determine captured variables\n  var declaredExports = _.map(inputSourceArch.declaredExports, function (symbol) {\n    return _.pick(symbol, ['name', 'testOnly']);\n  });\n\n  // By default, consider this isopack \"portable\" unless\n  // process.env.METEOR_ALLOW_NON_PORTABLE is truthy or the name of the\n  // package is \"meteor-tool\", in which case we determine portability by\n  // scanning node_modules directories for binary .node files.\n  // Non-portable packages must publish platform-specific builds using\n  // publish-for-arch, whereas portable packages can avoid running\n  // publish-for-arch and rely instead on the package consumer to rebuild\n  // binary npm dependencies when necessary.\n  let isPortable = true;\n  if (! process.env.METEOR_FORCE_PORTABLE) {\n    // Make sure we've rebuilt these npm packages according to the current\n    // process.{platform,arch,versions}.\n    _.each(nodeModulesDirectories, nmd => {\n      if (nmd.local) {\n        // Meteor never attempts to modify the contents of local\n        // node_modules directories (such as the one in the root directory\n        // of an application), so we call nmd.rebuildIfNonPortable() only\n        // when nmd.local is false.\n      } else {\n        nmd.rebuildIfNonPortable();\n      }\n    });\n\n    if (process.env.METEOR_ALLOW_NON_PORTABLE ||\n        isopk.name === \"meteor-tool\") {\n      isPortable = _.every(nodeModulesDirectories, nmd => nmd.isPortable());\n    }\n  }\n\n  // *** Consider npm dependencies and portability\n  var arch = inputSourceArch.arch;\n  if (arch === \"os\" && ! isPortable) {\n    // Contains non-portable compiled npm modules, so set arch correctly\n    arch = archinfo.host();\n  }\n\n  let nodeModulesDirsOrUndefined = nodeModulesDirectories;\n  if (! archinfo.matches(arch, \"os\") && ! isPortable) {\n    // non-portable npm modules only work on server architectures\n    nodeModulesDirsOrUndefined = undefined;\n  }\n\n  // *** Output unibuild object\n  isopk.addUnibuild({\n    kind: inputSourceArch.kind,\n    arch: arch,\n    uses: inputSourceArch.uses,\n    implies: inputSourceArch.implies,\n    watchSet: watchSet,\n    nodeModulesDirectories: nodeModulesDirsOrUndefined,\n    declaredExports: declaredExports,\n    resources: resources\n  });\n\n  return {\n    pluginProviderPackageNames: pluginProviderPackageNames\n  };\n});\n\nfunction runLinters({inputSourceArch, isopackCache, sources,\n                     sourceProcessorSet, watchSet}) {\n  // The buildmessage context here is for linter warnings only! runLinters\n  // should not do anything that can have a real build failure.\n  buildmessage.assertInCapture();\n\n  if (sourceProcessorSet.isEmpty()) {\n    return;\n  }\n\n  // First we calculate the symbols imported into the current package by\n  // packages we depend on. This is because most JS linters are going to want to\n  // warn about the use of unknown global variables, and the linker import\n  // system works by doing something that looks a whole lot like using\n  // undeclared globals!  That said, we don't actually know the imports that\n  // will be active when an app is built if the versions of the imported\n  // packages differ from those available at package lint time. But it's a good\n  // heuristic, at least. (If we transition from linker to ES2015 modules, we\n  // won't have the issue any more.)\n\n  // We want to look at the arch of the used packages that matches the arch\n  // we're compiling.  Normally when we call compiler.eachUsedUnibuild, we're\n  // either specifically looking at archinfo.host() because we're doing\n  // something related to plugins (which always run in the host environment), or\n  // we're in the process of building a bundler Target (a program), which has a\n  // specific arch which is never 'os'.  In this odd case, though, we're trying\n  // to run eachUsedUnibuild at package-compile time (not bundle time), so the\n  // only 'arch' we've heard of might be 'os', if we're building a portable\n  // unibuild.  In that case, we should look for imports in the host arch if it\n  // exists instead of failing because a dependency does not have an 'os'\n  // unibuild.\n  const whichArch = inputSourceArch.arch === 'os'\n          ? archinfo.host() : inputSourceArch.arch;\n\n  // For linters, figure out what are the global imports from other packages\n  // that we use directly, or are implied.\n  const globalImports = ['Package'];\n\n  if (archinfo.matches(inputSourceArch.arch, \"os\")) {\n    globalImports.push('Npm', 'Assets');\n  }\n\n  compiler.eachUsedUnibuild({\n    dependencies: inputSourceArch.uses,\n    arch: whichArch,\n    isopackCache: isopackCache,\n    skipUnordered: true,\n    // don't import symbols from debugOnly, prodOnly and testOnly\n    // packages, because if the package is not linked it will cause a\n    // runtime error.  the code must access them with\n    // `Package[\"my-package\"].MySymbol`.\n    skipDebugOnly: true,\n    skipProdOnly: true,\n    skipTestOnly: true,\n  }, (unibuild) => {\n    if (unibuild.pkg.name === inputSourceArch.pkg.name) {\n      return;\n    }\n    _.each(unibuild.declaredExports, (symbol) => {\n      if (! symbol.testOnly || inputSourceArch.isTest) {\n        globalImports.push(symbol.name);\n      }\n    });\n  });\n\n  // sourceProcessor.id -> {sourceProcessor, sources: [WrappedSourceItem]}\n  const sourceItemsForLinter = {};\n  _.values(sources).forEach((sourceItem) => {\n    const { relPath, fileOptions } = sourceItem;\n    const classification = sourceProcessorSet.classifyFilename(\n      files.pathBasename(relPath), inputSourceArch.arch);\n\n    // If we don't have a linter for this file (or we do but it's only on\n    // another arch), skip without even reading the file into a WatchSet.\n    if (classification.type === 'wrong-arch' ||\n        classification.type === 'unmatched') {\n      return;\n    }\n\n    // We shouldn't ever add a legacy handler and we're not hardcoding JS\n    // for linters, so we should always have SourceProcessor if anything\n    // matches, unless this is a .meteorignore file.\n    if (classification.type !== \"meteor-ignore\" &&\n        ! classification.sourceProcessors) {\n      throw Error(\n        `Unexpected classification for ${ relPath }: ${ classification.type }`);\n    }\n\n    // Read the file and add it to the WatchSet.\n    const {hash, contents} = watch.readAndWatchFileWithHash(\n      watchSet,\n      files.pathResolve(inputSourceArch.sourceRoot, relPath));\n\n    if (classification.type === \"meteor-ignore\") {\n      // Return after watching .meteorignore files but before adding them\n      // as resources to be processed by compiler plugins. To see how\n      // these files are handled, see PackageSource#_findSources.\n      return;\n    }\n\n    const wrappedSource = {\n      relPath, contents, hash, fileOptions,\n      arch: inputSourceArch.arch,\n      'package': inputSourceArch.pkg.name\n    };\n\n    // There can be multiple linters on a file.\n    classification.sourceProcessors.forEach((sourceProcessor) => {\n      if (! sourceItemsForLinter.hasOwnProperty(sourceProcessor.id)) {\n        sourceItemsForLinter[sourceProcessor.id] = {\n          sourceProcessor,\n          sources: []\n        };\n      }\n      sourceItemsForLinter[sourceProcessor.id].sources.push(wrappedSource);\n    });\n  });\n\n  // Run linters on files. This skips linters that don't have any files.\n  _.each(sourceItemsForLinter, ({sourceProcessor, sources}) => {\n    const sourcesToLint = sources.map(\n      wrappedSource => new linterPluginModule.LintingFile(wrappedSource)\n    );\n\n    const linter = sourceProcessor.userPlugin.processFilesForPackage;\n\n    function archToString(arch) {\n      if (arch.match(/web\\.cordova/)) {\n        return \"Cordova\";\n      }\n      if (arch.match(/web\\..*/)) {\n        return \"Client\";\n      }\n      if (arch.match(/os.*/)) {\n        return \"Server\";\n      }\n      throw new Error(\"Don't know how to display the arch: \" + arch);\n    }\n\n    buildmessage.enterJob({\n      title: \"linting files with \" +\n        sourceProcessor.isopack.name +\n        \" for \" +\n        inputSourceArch.pkg.displayName() +\n        \" (\" + archToString(inputSourceArch.arch) + \")\"\n    }, () => {\n      try {\n        var markedLinter = buildmessage.markBoundary(linter.bind(\n          sourceProcessor.userPlugin));\n        markedLinter(sourcesToLint, { globals: globalImports });\n      } catch (e) {\n        buildmessage.exception(e);\n      }\n    });\n  });\n};\n\n// takes an isopack and returns a list of packages isopack depends on,\n// containing at least one plugin\nexport function getActivePluginPackages(isopk, {\n  uses,\n  isopackCache,\n  pluginProviderPackageNames,\n  pluginProviderWatchSet\n}) {\n  // XXX we used to include our own plugins only if we were the\n  // \"use\" role. now we include them everywhere because we don't have\n  // a special \"use\" role anymore. it's not totally clear to me what\n  // the correct behavior should be -- we need to resolve whether we\n  // think about plugins as being global to a package or particular\n  // to a unibuild.\n\n  // (there's also some weirdness here with handling implies, because\n  // the implies field is on the target unibuild, but we really only care\n  // about packages.)\n  var activePluginPackages = [isopk];\n  if (pluginProviderPackageNames) {\n    pluginProviderPackageNames[isopk.name] = true;\n  }\n\n  // We don't use plugins from weak dependencies, because the ability\n  // to compile a certain type of file shouldn't depend on whether or\n  // not some unrelated package in the target has a dependency. And we\n  // skip unordered dependencies, because it's not going to work to\n  // have circular build-time dependencies.\n  //\n  // eachUsedUnibuild takes care of pulling in implied dependencies for us (eg,\n  // templating from standard-app-packages).\n  //\n  // We pass archinfo.host here, not self.arch, because it may be more specific,\n  // and because plugins always have to run on the host architecture.\n  compiler.eachUsedUnibuild({\n    dependencies: uses,\n    arch: archinfo.host(),\n    isopackCache: isopackCache,\n    skipUnordered: true\n    // implicitly skip weak deps by not specifying acceptableWeakPackages option\n  }, function (unibuild) {\n    if (unibuild.pkg.name === isopk.name) {\n      return;\n    }\n    if (pluginProviderPackageNames) {\n      pluginProviderPackageNames[unibuild.pkg.name] = true;\n    }\n    if (pluginProviderWatchSet) {\n      pluginProviderWatchSet.merge(unibuild.pkg.pluginWatchSet);\n    }\n    if (_.isEmpty(unibuild.pkg.plugins)) {\n      return;\n    }\n    activePluginPackages.push(unibuild.pkg);\n  });\n\n  activePluginPackages = _.uniq(activePluginPackages);\n  return activePluginPackages;\n}\n\n// Iterates over each in options.dependencies as well as unibuilds implied by\n// them. The packages in question need to already be built and in\n// options.isopackCache.\n//\n// Skips isobuild:* pseudo-packages.\ncompiler.eachUsedUnibuild = function (\n  options, callback) {\n  buildmessage.assertInCapture();\n  var dependencies = options.dependencies;\n  var arch = options.arch;\n  var isopackCache = options.isopackCache;\n\n  var acceptableWeakPackages = options.acceptableWeakPackages || {};\n\n  var processedUnibuildId = {};\n  var usesToProcess = [];\n  _.each(dependencies, function (use) {\n    if (options.skipUnordered && use.unordered) {\n      return;\n    }\n    if (use.weak && !_.has(acceptableWeakPackages, use.package)) {\n      return;\n    }\n    usesToProcess.push(use);\n  });\n\n  while (! _.isEmpty(usesToProcess)) {\n    var use = usesToProcess.shift();\n\n    // We only care about real packages, not isobuild:* psuedo-packages.\n    if (isIsobuildFeaturePackage(use.package)) {\n      continue;\n    }\n\n    var usedPackage = isopackCache.getIsopack(use.package);\n\n    // Ignore this package if we were told to skip debug-only packages and it is\n    // debug-only.\n    if (usedPackage.debugOnly && options.skipDebugOnly) {\n      continue;\n    }\n    // Ditto prodOnly.\n    if (usedPackage.prodOnly && options.skipProdOnly) {\n      continue;\n    }\n    // Ditto testOnly.\n    if (usedPackage.testOnly && options.skipTestOnly) {\n      continue;\n    }\n\n    var unibuild = usedPackage.getUnibuildAtArch(arch);\n    if (!unibuild) {\n      // The package exists but there's no unibuild for us. A buildmessage has\n      // already been issued. Recover by skipping.\n      continue;\n    }\n\n    if (_.has(processedUnibuildId, unibuild.id)) {\n      continue;\n    }\n    processedUnibuildId[unibuild.id] = true;\n\n    callback(unibuild, {\n      unordered: !!use.unordered,\n      weak: !!use.weak\n    });\n\n    _.each(unibuild.implies, function (implied) {\n      usesToProcess.push(implied);\n    });\n  }\n};\n\n// Note: this code is duplicated in packages/constraint-solver/solver.js\nexport function isIsobuildFeaturePackage(packageName) {\n  return packageName.startsWith('isobuild:');\n}\n\n// If you update this data structure to add more feature packages, you should\n// update the wiki page here:\n// https://docs.meteor.com/api/packagejs.html#isobuild-features\nexport const KNOWN_ISOBUILD_FEATURE_PACKAGES = {\n  // This package directly calls Plugin.registerCompiler. Package authors\n  // must explicitly depend on this feature package to use the API.\n  'isobuild:compiler-plugin': ['1.0.0'],\n\n  // This package directly calls Plugin.registerMinifier. Package authors\n  // must explicitly depend on this feature package to use the API.\n  'isobuild:minifier-plugin': ['1.0.0'],\n\n  // This package directly calls Plugin.registerLinter. Package authors\n  // must explicitly depend on this feature package to use the API.\n  'isobuild:linter-plugin': ['1.0.0'],\n\n  // This package is only published in the isopack-2 format, not isopack-1 or\n  // older. ie, it contains \"source\" files for compiler plugins, not just\n  // JS/CSS/static assets/head/body.\n  // This is implicitly added at publish time to any such package; package\n  // authors don't have to add it explicitly. It isn't relevant for local\n  // packages, which can be rebuilt if possible by the older tool.\n  //\n  // Specifically, this is to avoid the case where a package is published with a\n  // dependency like `api.use('less@1.0.0 || 2.0.0')` and the publication\n  // selects the newer compiler plugin version to generate the isopack. The\n  // published package (if this feature package wasn't implicitly included)\n  // could still be selected by the Version Solver to be used with an old\n  // Isobuild... just because less@2.0.0 depends on isobuild:compiler-plugin\n  // doesn't mean it couldn't choose less@1.0.0, which is not actually\n  // compatible with this published package.  (Constraints of the form described\n  // above are not very helpful, but at least we can prevent old Isobuilds from\n  // choking on confusing packages.)\n  //\n  // (Why not isobuild:isopack@2.0.0? Well, that would imply that Version Solver\n  // would have to choose only one isobuild:isopack feature version, which\n  // doesn't make sense here.)\n  'isobuild:isopack-2': ['1.0.0'],\n\n  // This package uses the `prodOnly` metadata flag, which causes it to\n  // automatically depend on the `isobuild:prod-only` feature package.\n  'isobuild:prod-only': ['1.0.0'],\n\n  // This package depends on a specific version of Cordova. Package authors must\n  // explicitly depend on this feature package to indicate that they are not\n  // compatible with earlier Cordova versions, which is most likely a result of\n  // the Cordova plugins they depend on.\n  // One scenario is a package depending on a Cordova plugin or version\n  // that is only available on npm, which means downloading the plugin is not\n  // supported on versions of Cordova below 5.0.0.\n  'isobuild:cordova': ['5.4.0'],\n\n  // This package requires functionality introduced in meteor-tool@1.5.0\n  // to enable dynamic module fetching via import(...).\n  'isobuild:dynamic-import': ['1.5.0'],\n};\n"]}