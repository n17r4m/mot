{"version":3,"sources":["/tools/project-context.js"],"names":["loadIsopackage","module","watch","require","v","KNOWN_ISOBUILD_FEATURE_PACKAGES","assert","_","archinfo","buildmessage","catalog","catalogLocal","Console","files","isopackCacheModule","packageMapModule","release","tropohouse","utils","Profile","ProjectContext","options","self","ok","projectDir","Error","originalOptions","reset","exports","STAGE","INITIAL","READ_PROJECT_METADATA","INITIALIZE_CATALOG","RESOLVE_CONSTRAINTS","DOWNLOAD_MISSING_PACKAGES","BUILD_LOCAL_PACKAGES","SAVE_CHANGED_METADATA","extend","prototype","moreOptions","resetOptions","default","_includePackages","includePackages","_packageMapFilename","packageMapFilename","pathJoin","_serverArchitectures","serverArchitectures","push","host","uniq","_projectDirForLocalPackages","projectDirForLocalPackages","_explicitlyAddedLocalPackageDirs","explicitlyAddedLocalPackageDirs","projectLocalDir","process","env","METEOR_LOCAL_DIR","pathResolve","convertToStandardPath","_forceRebuildPackages","forceRebuildPackages","_ignorePackageDirsEnvVar","ignorePackageDirsEnvVar","_ignoreCheckoutPackages","ignoreCheckoutPackages","_officialCatalog","officialCatalog","official","alwaysWritePackageMap","neverWritePackageMap","_alwaysWritePackageMap","_neverWriteProjectConstraintsFile","neverWriteProjectConstraintsFile","_neverWritePackageMap","_upgradePackageNames","upgradePackageNames","_upgradeIndirectDepPatchVersions","upgradeIndirectDepPatchVersions","_forceIncludeCordovaUnibuild","forceIncludeCordovaUnibuild","has","_releaseForConstraints","releaseForConstraints","current","isCheckout","getCatalogReleaseData","preservePackageMap","packageMap","_cachedVersionsBeforeReset","toVersionMap","_oldPackageMapFileHash","packageMapFile","fileHash","_allowIncompatibleUpdate","allowIncompatibleUpdate","lintAppAndLocalPackages","_lintPackageWithSourceRoot","lintPackageWithSourceRoot","releaseFile","projectConstraintsFile","platformList","cordovaPluginsFile","appIdentifier","finishedUpgraders","projectCatalog","localCatalog","explicitlyAddedPackageNames","packageMapDelta","softRefreshIsopacks","isopackCache","forgetPreviousIsopackCache","_previousIsopackCache","_completedStage","_readResolverResultCache","readProjectMetadata","_completeStagesThrough","initializeCatalog","run","resolveConstraints","downloadMissingPackages","buildLocalPackages","saveChangedMetadata","prepareProjectForBuild","targetStage","assertInCapture","enterJob","completedStage","jobHasMessages","getProjectLocalDirectory","subdirectory","getMeteorShellDirectory","_readProjectMetadata","_ensureProjectDir","ReleaseFile","ProjectConstraintsFile","PackageMapFile","filename","CordovaPluginsFile","PlatformList","_ensureAppIdentifier","FinishedUpgraders","writeReleaseFileAndDevBundleLink","releaseName","strictEqual","inCheckout","write","mkdir_p","constraintFilePath","exists","writeFileAtomically","gitignorePath","getProjectWatchSet","watchSet","WatchSet","each","metadataFile","merge","packageLocationWatchSet","getProjectAndLocalPackagesWatchSet","allLoadedLocalPackagesWatchSet","getLintingMessagesForLocalPackages","identifierFile","lines","getLinesOrEmpty","appId","find","map","trimSpaceAndComments","identity","randomIdentifier","join","comment","_resolveConstraints","assertInJob","depsAndConstraints","_getRootDepsAndConstraints","cachedVersions","getCachedVersions","anticipatedPrereleases","_getAnticipatedPrereleases","constraints","length","clone","p","resolverRunCount","runAndRetryWithRefreshIfHelpful","canRetry","resolver","_buildResolver","resolveOptions","previousSolution","missingPreviousVersionIsError","supportedIsobuildFeaturePackages","upgrade","solution","time","resolve","deps","e","constraintSolverError","versionParserError","error","message","tags","refreshCouldHelp","PackageMap","answer","PackageMapDelta","usedRCs","neededToUseUnanticipatedPrereleases","_saveResolverResultCache","_resolverResultCache","JSON","parse","readFile","code","stringify","getOriginalAppDirForTestPackages","appDir","isString","_localPackageSearchDirs","searchDirs","PACKAGE_DIRS","warn","packageDirsFromEnvVar","envVar","delimiter","pathOsDelimiter","split","envPackageDirs","forEach","packagesDir","getCurrentToolsDir","_initializeCatalog","LocalCatalog","LayeredCatalog","initialize","localPackageSearchDirs","dir","localVersionRecord","getVersionBySourceRoot","packageName","_addAppConstraints","_addLocalPackageConstraints","_addReleaseConstraints","eachConstraint","constraint","package","getAllPackageNames","versionRecord","getLatestVersion","parsePackageConstraint","version","packages","rootConstraints","add","test","constraintObject","versionConstraint","alternatives","alt","versionString","ConstraintSolver","PackagesResolver","nudge","resultCache","_downloadMissingPackages","downloadPackagesMissingFromMap","_buildLocalPackages","IsopackCache","includeCordovaUnibuild","usesCordova","cacheDir","pluginCacheDirRoot","previousIsopackCache","lintLocalPackages","wipeCachedPackages","_saveChangedMetadata","writeIfModified","name","fullReleaseName","_modified","_constraintLines","_constraintMap","_readFile","contents","readAndWatchFile","extraConstraintMap","pkg","lineRecord","trim","skipOnWrite","splitBufferToLines","last","pop","line","leadingSpace","trailingSpaceAndComment","match","useBuildmessage","buildmessageFile","skipOnRead","file","keys","key","_write","lineParts","constraintString","messages","capture","title","hasMessages","formatMessages","iterator","getConstraint","addConstraints","constraintsToAdd","constraintToAdd","isEqual","addPackages","packagesToAdd","validatePackageName","updateReleaseConstraints","releaseRecord","compact","removePackages","packagesToRemove","filter","contains","removeAllPackages","_versions","fileInfo","readAndWatchFileWithHash","hash","trimSpace","packageVersion","parsePackageAndVersion","newVersions","packageNames","sort","fileContents","Buffer","from","sha1","addFile","_platforms","DEFAULT_PLATFORMS","platforms","difference","concat","getPlatforms","getCordovaPlatforms","isEmpty","getWebArchs","archs","_plugins","parts","getPluginVersions","plugins","pluginNames","pluginName","unnormalizedReleaseName","displayReleaseName","releaseTrack","releaseVersion","fileMissing","noReleaseSpecified","normalReleaseSpecified","catalogUtils","splitReleaseName","displayRelease","ensureDevBundleLink","getDevBundle","devBundle","devBundleParts","pathSep","meteorToolIndex","lastIndexOf","getReleaseVersion","meteorToolVersion","tool","realpath","makeLink","readLink","dotMeteorDir","pathDirname","localDir","devBundleLink","rm_recursive","newTarget","oldOSPath","oldTarget","readUpgraders","upgraders","appendUpgraders","appendText","upgrader","appendFile"],"mappings":"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","file":"tools/project-context.js.map","sourcesContent":["var assert = require(\"assert\");\nvar _ = require('underscore');\n\nvar archinfo = require('./utils/archinfo.js');\nvar buildmessage = require('./utils/buildmessage.js');\nvar catalog = require('./packaging/catalog/catalog.js');\nvar catalogLocal = require('./packaging/catalog/catalog-local.js');\nvar Console = require('./console/console.js').Console;\nvar files = require('./fs/files.js');\nvar isopackCacheModule = require('./isobuild/isopack-cache.js');\nimport { loadIsopackage } from './tool-env/isopackets.js';\nvar packageMapModule = require('./packaging/package-map.js');\nvar release = require('./packaging/release.js');\nvar tropohouse = require('./packaging/tropohouse.js');\nvar utils = require('./utils/utils.js');\nvar watch = require('./fs/watch.js');\nvar Profile = require('./tool-env/profile.js').Profile;\nimport { KNOWN_ISOBUILD_FEATURE_PACKAGES } from './isobuild/compiler.js';\n\n// The ProjectContext represents all the context associated with an app:\n// metadata files in the `.meteor` directory, the choice of package versions\n// used by it, etc.  Any time you want to work with an app, create a\n// ProjectContext and call prepareProjectForBuild on it (in a buildmessage\n// context).\n//\n// Note that this should only be used by parts of the code that truly require a\n// full project to exist; you won't find any reference to ProjectContext in\n// compiler.js or isopack.js, which work on individual files (though they will\n// get references to some of the objects which can be stored in a ProjectContext\n// such as PackageMap and IsopackCache).  Parts of the code that should deal\n// with ProjectContext include command implementations, the parts of bundler.js\n// that deal with creating a full project, PackageSource.initFromAppDir, stats\n// reporting, etc.\n//\n// Classes in this file follow the standard protocol where names beginning with\n// _ should not be externally accessed.\nfunction ProjectContext(options) {\n  var self = this;\n  assert.ok(self instanceof ProjectContext);\n\n  if (!options.projectDir)\n    throw Error(\"missing projectDir!\");\n\n  self.originalOptions = options;\n  self.reset();\n}\nexports.ProjectContext = ProjectContext;\n\n// The value is the name of the method to call to continue.\nvar STAGE = {\n  INITIAL: '_readProjectMetadata',\n  READ_PROJECT_METADATA: '_initializeCatalog',\n  INITIALIZE_CATALOG: '_resolveConstraints',\n  RESOLVE_CONSTRAINTS: '_downloadMissingPackages',\n  DOWNLOAD_MISSING_PACKAGES: '_buildLocalPackages',\n  BUILD_LOCAL_PACKAGES: '_saveChangedMetadata',\n  SAVE_CHANGED_METADATA: 'DONE'\n};\n\n_.extend(ProjectContext.prototype, {\n  reset: function (moreOptions, resetOptions) {\n    var self = this;\n    // Allow overriding some options until the next call to reset;\n    var options = _.extend({}, self.originalOptions, moreOptions);\n    // This is options that are actually directed at reset itself.\n    resetOptions = resetOptions || {};\n\n    self.projectDir = options.projectDir;\n    self.tropohouse = options.tropohouse || tropohouse.default;\n\n    self._includePackages = options.includePackages;\n\n    self._packageMapFilename = options.packageMapFilename ||\n      files.pathJoin(self.projectDir, '.meteor', 'versions');\n\n    self._serverArchitectures = options.serverArchitectures || [];\n    // We always need to download host versions of packages, at least for\n    // plugins.\n    self._serverArchitectures.push(archinfo.host());\n    self._serverArchitectures = _.uniq(self._serverArchitectures);\n\n    // test-packages overrides this to load local packages from your real app\n    // instead of from test-runner-app.\n    self._projectDirForLocalPackages = options.projectDirForLocalPackages ||\n      options.projectDir;\n    self._explicitlyAddedLocalPackageDirs =\n      options.explicitlyAddedLocalPackageDirs;\n\n    // Used to override the directory that Meteor's build process\n    // writes to; used by `meteor test` so that you can test your\n    // app in parallel to writing it, with an isolated database.\n    // You can override the default .meteor/local by specifying\n    // METEOR_LOCAL_DIR. You can use relative path if you want it\n    // relative to your project directory.\n    self.projectLocalDir = process.env.METEOR_LOCAL_DIR ?\n      files.pathResolve(options.projectDir,\n        files.convertToStandardPath(process.env.METEOR_LOCAL_DIR))\n      : (options.projectLocalDir ||\n        files.pathJoin(self.projectDir, '.meteor', 'local'));\n\n    // Used by 'meteor rebuild'; true to rebuild all packages, or a list of\n    // package names.  Deletes the isopacks and their plugin caches.\n    self._forceRebuildPackages = options.forceRebuildPackages;\n\n    // Set in a few cases where we really want to only get packages from\n    // checkout.\n    self._ignorePackageDirsEnvVar = options.ignorePackageDirsEnvVar;\n\n    // Set by some tests where we want to pretend that we don't have packages in\n    // the git checkout (because they're using a fake warehouse).\n    self._ignoreCheckoutPackages = options.ignoreCheckoutPackages;\n\n    // Set by some tests to override the official catalog.\n    self._officialCatalog = options.officialCatalog || catalog.official;\n\n    if (options.alwaysWritePackageMap && options.neverWritePackageMap)\n      throw Error(\"always or never?\");\n\n    // Set by 'meteor create' and 'meteor update' to ensure that\n    // .meteor/versions is always written even if release.current does not match\n    // the project's release.\n    self._alwaysWritePackageMap = options.alwaysWritePackageMap;\n\n    // Set by a few special-case commands that call\n    // projectConstraintsFile.addConstraints for internal reasons without\n    // intending to actually write .meteor/packages and .meteor/versions (eg,\n    // 'publish' wants to make sure making sure the test is built, and\n    // --get-ready wants to build every conceivable package).\n    self._neverWriteProjectConstraintsFile =\n      options.neverWriteProjectConstraintsFile;\n    self._neverWritePackageMap = options.neverWritePackageMap;\n\n    // Set by 'meteor update' to specify which packages may be updated. Array of\n    // package names.\n    self._upgradePackageNames = options.upgradePackageNames;\n    // Set by 'meteor update' to mean that we should upgrade the\n    // \"patch\" (and wrapNum, etc.) parts of indirect dependencies.\n    self._upgradeIndirectDepPatchVersions =\n      options.upgradeIndirectDepPatchVersions;\n\n    // Set by publishing commands to ensure that published packages always have\n    // a web.cordova slice (because we aren't yet smart enough to just default\n    // to using the web.browser slice instead or make a common 'web' slice).\n    self._forceIncludeCordovaUnibuild = options.forceIncludeCordovaUnibuild;\n\n    // If explicitly specified as null, use no release for constraints.\n    // If specified non-null, should be a release version catalog record.\n    // If not specified, defaults to release.current.\n    //\n    // Note that NONE of these cases are \"use the release from\n    // self.releaseFile\"; after all, if you are explicitly running `meteor\n    // --release foo` it will override what is found in .meteor/releases.\n    if (_.has(options, 'releaseForConstraints')) {\n      self._releaseForConstraints = options.releaseForConstraints || null;\n    } else if (release.current.isCheckout()) {\n      self._releaseForConstraints = null;\n    } else {\n      self._releaseForConstraints = release.current.getCatalogReleaseData();\n    }\n\n    if (resetOptions.preservePackageMap && self.packageMap) {\n      self._cachedVersionsBeforeReset = self.packageMap.toVersionMap();\n      // packageMapFile should always exist if packageMap does\n      self._oldPackageMapFileHash = self.packageMapFile.fileHash;\n    } else {\n      self._cachedVersionsBeforeReset = null;\n      self._oldPackageMapFileHash = null;\n    }\n\n    // The --allow-incompatible-update command-line switch, which allows\n    // the version solver to choose versions of root dependencies that are\n    // incompatible with the previously chosen versions (i.e. to downgrade\n    // them or change their major version).\n    self._allowIncompatibleUpdate = options.allowIncompatibleUpdate;\n\n    // If set, we run the linter on the app and local packages.  Set by 'meteor\n    // lint', and the runner commands (run/test-packages/debug) when --no-lint\n    // is not passed.\n    self.lintAppAndLocalPackages = options.lintAppAndLocalPackages;\n\n    // If set, we run the linter on just one local package, with this\n    // source root. Set by 'meteor lint' in a package, and 'meteor publish'.\n    self._lintPackageWithSourceRoot = options.lintPackageWithSourceRoot;\n\n    // Initialized by readProjectMetadata.\n    self.releaseFile = null;\n    self.projectConstraintsFile = null;\n    self.packageMapFile = null;\n    self.platformList = null;\n    self.cordovaPluginsFile = null;\n    self.appIdentifier = null;\n    self.finishedUpgraders = null;\n\n    // Initialized by initializeCatalog.\n    self.projectCatalog = null;\n    self.localCatalog = null;\n    // Once the catalog is read and the names of the \"explicitly\n    // added\" packages are determined, they will be listed here.\n    // (See explicitlyAddedLocalPackageDirs.)\n    // \"Explicitly added\" packages are typically present in non-app\n    // projects, like the one created by `meteor publish`.  This list\n    // is used to avoid pinning such packages to their previous\n    // versions when we run the version solver, which prevents an\n    // error telling you to pass `--allow-incompatible-update` when\n    // you publish your package after bumping the major version.\n    self.explicitlyAddedPackageNames = null;\n\n    // Initialized by _resolveConstraints.\n    self.packageMap = null;\n    self.packageMapDelta = null;\n\n    if (resetOptions.softRefreshIsopacks && self.isopackCache) {\n      // Make sure we only hold on to one old isopack cache, not a linked list\n      // of all of them.\n      self.isopackCache.forgetPreviousIsopackCache();\n      self._previousIsopackCache = self.isopackCache;\n    } else {\n      self._previousIsopackCache = null;\n    }\n    // Initialized by _buildLocalPackages.\n    self.isopackCache = null;\n\n    self._completedStage = STAGE.INITIAL;\n\n    // The resolverResultCache is used by the constraint solver; to\n    // us it's just an opaque object.  If we pass it into repeated\n    // calls to the constraint solver, the constraint solver can be\n    // more efficient by caching or memoizing its work.  We choose not\n    // to reset this when reset() is called more than once.\n    self._readResolverResultCache();\n  },\n\n  readProjectMetadata: function () {\n    // don't generate a profiling report for this stage (Profile.run),\n    // because all we do here is read a handful of files.\n    this._completeStagesThrough(STAGE.READ_PROJECT_METADATA);\n  },\n  initializeCatalog: function () {\n    Profile.run('ProjectContext initializeCatalog', () => {\n      this._completeStagesThrough(STAGE.INITIALIZE_CATALOG);\n    });\n  },\n  resolveConstraints: function () {\n    Profile.run('ProjectContext resolveConstraints', () => {\n      this._completeStagesThrough(STAGE.RESOLVE_CONSTRAINTS);\n    });\n  },\n  downloadMissingPackages: function () {\n    Profile.run('ProjectContext downloadMissingPackages', () => {\n      this._completeStagesThrough(STAGE.DOWNLOAD_MISSING_PACKAGES);\n    });\n  },\n  buildLocalPackages: function () {\n    Profile.run('ProjectContext buildLocalPackages', () => {\n      this._completeStagesThrough(STAGE.BUILD_LOCAL_PACKAGES);\n    });\n  },\n  saveChangedMetadata: function () {\n    Profile.run('ProjectContext saveChangedMetadata', () => {\n      this._completeStagesThrough(STAGE.SAVE_CHANGED_METADATA);\n    });\n  },\n  prepareProjectForBuild: function () {\n    // This is the same as saveChangedMetadata, but if we insert stages after\n    // that one it will continue to mean \"fully finished\".\n    Profile.run('ProjectContext prepareProjectForBuild', () => {\n      this._completeStagesThrough(STAGE.SAVE_CHANGED_METADATA);\n    });\n  },\n\n  _completeStagesThrough: function (targetStage) {\n    var self = this;\n    buildmessage.assertInCapture();\n\n    buildmessage.enterJob('preparing project', function () {\n      while (self._completedStage !== targetStage) {\n        // This error gets thrown if you request to go to a stage that's earlier\n        // than where you started. Note that the error will be mildly confusing\n        // because the key of STAGE does not match the value.\n        if (self.completedStage === STAGE.SAVE_CHANGED_METADATA)\n          throw Error(\"can't find requested stage \" + targetStage);\n\n        // The actual value of STAGE.FOO is the name of the method that takes\n        // you to the next step after FOO.\n        self[self._completedStage]();\n        if (buildmessage.jobHasMessages())\n          return;\n      }\n    });\n  },\n\n  getProjectLocalDirectory: function (subdirectory) {\n    var self = this;\n    return files.pathJoin(self.projectLocalDir, subdirectory);\n  },\n\n  getMeteorShellDirectory: function(projectDir) {\n    return this.getProjectLocalDirectory(\"shell\");\n  },\n\n  // You can call this manually (that is, the public version without\n  // an `_`) if you want to do some work before resolving constraints,\n  // or you can let prepareProjectForBuild do it for you.\n  //\n  // This should be pretty fast --- for example, we shouldn't worry about\n  // needing to wait for it to be done before we open the runner proxy.\n  _readProjectMetadata: Profile('_readProjectMetadata', function () {\n    var self = this;\n    buildmessage.assertInCapture();\n\n    buildmessage.enterJob('reading project metadata', function () {\n      // Ensure this is actually a project directory.\n      self._ensureProjectDir();\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Read .meteor/release.\n      self.releaseFile = new exports.ReleaseFile({\n        projectDir: self.projectDir,\n        catalog: self._officialCatalog,\n      });\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Read .meteor/packages.\n      self.projectConstraintsFile = new exports.ProjectConstraintsFile({\n        projectDir: self.projectDir,\n        includePackages: self._includePackages\n      });\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Read .meteor/versions.\n      self.packageMapFile = new exports.PackageMapFile({\n        filename: self._packageMapFilename\n      });\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Read .meteor/cordova-plugins.\n      self.cordovaPluginsFile = new exports.CordovaPluginsFile({\n        projectDir: self.projectDir\n      });\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Read .meteor/platforms, creating it if necessary.\n      self.platformList = new exports.PlatformList({\n        projectDir: self.projectDir\n      });\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Read .meteor/.id, creating it if necessary.\n      self._ensureAppIdentifier();\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Set up an object that knows how to read and write\n      // .meteor/.finished-upgraders.\n      self.finishedUpgraders = new exports.FinishedUpgraders({\n        projectDir: self.projectDir\n      });\n      if (buildmessage.jobHasMessages())\n        return;\n    });\n\n    self._completedStage = STAGE.READ_PROJECT_METADATA;\n  }),\n\n  // Write the new release to .meteor/release and create a\n  // .meteor/dev_bundle symlink to the corresponding dev_bundle.\n  writeReleaseFileAndDevBundleLink(releaseName) {\n    assert.strictEqual(files.inCheckout(), false);\n    this.releaseFile.write(releaseName);\n  },\n\n  _ensureProjectDir: function () {\n    var self = this;\n    files.mkdir_p(files.pathJoin(self.projectDir, '.meteor'));\n\n    // This file existing is what makes a project directory a project directory,\n    // so let's make sure it exists!\n    var constraintFilePath = files.pathJoin(self.projectDir, '.meteor', 'packages');\n    if (! files.exists(constraintFilePath)) {\n      files.writeFileAtomically(constraintFilePath, '');\n    }\n\n    // Let's also make sure we have a minimal gitignore.\n    var gitignorePath = files.pathJoin(self.projectDir, '.meteor', '.gitignore');\n    if (! files.exists(gitignorePath)) {\n      files.writeFileAtomically(gitignorePath, 'local\\n');\n    }\n  },\n\n  // This is a WatchSet that ends up being the WatchSet for the app's\n  // initFromAppDir PackageSource. Changes to this will cause the whole app to\n  // be rebuilt (client and server).\n  getProjectWatchSet: function () {\n    // We don't cache a projectWatchSet on this object, since some of the\n    // metadata files can be written by us (eg .meteor/versions\n    // post-constraint-solve).\n    var self = this;\n    var watchSet = new watch.WatchSet;\n    _.each(\n      [self.releaseFile, self.projectConstraintsFile, self.packageMapFile,\n       self.platformList, self.cordovaPluginsFile],\n      function (metadataFile) {\n        metadataFile && watchSet.merge(metadataFile.watchSet);\n      });\n\n    if (self.localCatalog) {\n      watchSet.merge(self.localCatalog.packageLocationWatchSet);\n    }\n\n    return watchSet;\n  },\n\n  // This WatchSet encompasses everything that users can change to restart an\n  // app. We only watch this for failed bundles; for successful bundles, we have\n  // more precise server-specific and client-specific WatchSets that add up to\n  // this one.\n  getProjectAndLocalPackagesWatchSet: function () {\n    var self = this;\n    var watchSet = self.getProjectWatchSet();\n\n    // Include the loaded local packages (ie, the non-metadata files) but only\n    // if we've actually gotten to the buildLocalPackages step.\n    if (self.isopackCache) {\n      watchSet.merge(self.isopackCache.allLoadedLocalPackagesWatchSet);\n    }\n    return watchSet;\n  },\n\n  getLintingMessagesForLocalPackages: function () {\n    var self = this;\n    return self.isopackCache.getLintingMessagesForLocalPackages();\n  },\n\n  _ensureAppIdentifier: function () {\n    var self = this;\n    var identifierFile = files.pathJoin(self.projectDir, '.meteor', '.id');\n\n    // Find the first non-empty line, ignoring comments. We intentionally don't\n    // put this in a WatchSet, since changing this doesn't affect the built app\n    // much (and there's no real reason to update it anyway).\n    var lines = files.getLinesOrEmpty(identifierFile);\n    var appId = _.find(_.map(lines, files.trimSpaceAndComments), _.identity);\n\n    // If the file doesn't exist or has no non-empty lines, regenerate the\n    // token.\n    if (!appId) {\n      appId = [\n        utils.randomIdentifier(),\n        utils.randomIdentifier()\n      ].join(\".\");\n\n      var comment = (\n\"# This file contains a token that is unique to your project.\\n\" +\n\"# Check it into your repository along with the rest of this directory.\\n\" +\n\"# It can be used for purposes such as:\\n\" +\n\"#   - ensuring you don't accidentally deploy one app on top of another\\n\" +\n\"#   - providing package authors with aggregated statistics\\n\" +\n\"\\n\");\n      files.writeFileAtomically(identifierFile, comment + appId + '\\n');\n    }\n\n    self.appIdentifier = appId;\n  },\n\n  _resolveConstraints: Profile('_resolveConstraints', function () {\n    var self = this;\n    buildmessage.assertInJob();\n\n    var depsAndConstraints = self._getRootDepsAndConstraints();\n    // If this is in the runner and we have reset this ProjectContext for a\n    // rebuild, use the versions we calculated last time in this process (which\n    // may not have been written to disk if our release doesn't match the\n    // project's release on disk)... unless the actual file on disk has changed\n    // out from under us. Otherwise use the versions from .meteor/versions.\n    var cachedVersions;\n    if (self._cachedVersionsBeforeReset &&\n        self._oldPackageMapFileHash === self.packageMapFile.fileHash) {\n      // The file on disk hasn't change; reuse last time's results.\n      cachedVersions = self._cachedVersionsBeforeReset;\n    } else {\n      // We don't have a last time, or the file has changed; use\n      // .meteor/versions.\n      cachedVersions = self.packageMapFile.getCachedVersions();\n    }\n\n    var anticipatedPrereleases = self._getAnticipatedPrereleases(\n      depsAndConstraints.constraints, cachedVersions);\n\n    if (self.explicitlyAddedPackageNames.length) {\n      cachedVersions = _.clone(cachedVersions);\n      _.each(self.explicitlyAddedPackageNames, function (p) {\n        delete cachedVersions[p];\n      });\n    }\n\n    var resolverRunCount = 0;\n\n    // Nothing before this point looked in the official or project catalog!\n    // However, the resolver does, so it gets run in the retry context.\n    catalog.runAndRetryWithRefreshIfHelpful(function (canRetry) {\n      buildmessage.enterJob(\"selecting package versions\", function () {\n        var resolver = self._buildResolver();\n\n        var resolveOptions = {\n          previousSolution: cachedVersions,\n          anticipatedPrereleases: anticipatedPrereleases,\n          allowIncompatibleUpdate: self._allowIncompatibleUpdate,\n          // Not finding an exact match for a previous version in the catalog\n          // is considered an error if we haven't refreshed yet, and will\n          // trigger a refresh and another attempt.  That way, if a previous\n          // version exists, you'll get it, even if we don't have a record\n          // of it yet.  It's not actually fatal, though, for previousSolution\n          // to refer to package versions that we don't have access to or don't\n          // exist.  They'll end up getting changed or removed if possible.\n          missingPreviousVersionIsError: canRetry,\n          supportedIsobuildFeaturePackages: KNOWN_ISOBUILD_FEATURE_PACKAGES,\n        };\n        if (self._upgradePackageNames) {\n          resolveOptions.upgrade = self._upgradePackageNames;\n        }\n        if (self._upgradeIndirectDepPatchVersions) {\n          resolveOptions.upgradeIndirectDepPatchVersions = true;\n        }\n\n        resolverRunCount++;\n\n        var solution;\n        try {\n          Profile.time(\n            \"Select Package Versions\" +\n              (resolverRunCount > 1 ? (\" (Try \" + resolverRunCount + \")\") : \"\"),\n            function () {\n              solution = resolver.resolve(\n                depsAndConstraints.deps, depsAndConstraints.constraints,\n                resolveOptions);\n            });\n        } catch (e) {\n          if (!e.constraintSolverError && !e.versionParserError)\n            throw e;\n          // If the contraint solver gave us an error, refreshing\n          // might help to get new packages (see the comment on\n          // missingPreviousVersionIsError above).  If it's a\n          // package-version-parser error, print a nice message,\n          // but don't bother refreshing.\n          buildmessage.error(\n            e.message,\n            { tags: { refreshCouldHelp: !!e.constraintSolverError }});\n        }\n\n        if (buildmessage.jobHasMessages())\n          return;\n\n        self.packageMap = new packageMapModule.PackageMap(solution.answer, {\n          localCatalog: self.localCatalog\n        });\n\n        self.packageMapDelta = new packageMapModule.PackageMapDelta({\n          cachedVersions: cachedVersions,\n          packageMap: self.packageMap,\n          usedRCs: solution.usedRCs,\n          neededToUseUnanticipatedPrereleases:\n          solution.neededToUseUnanticipatedPrereleases,\n          anticipatedPrereleases: anticipatedPrereleases\n        });\n\n        self._saveResolverResultCache();\n\n        self._completedStage = STAGE.RESOLVE_CONSTRAINTS;\n      });\n    });\n  }),\n\n  _readResolverResultCache() {\n    if (! this._resolverResultCache) {\n      try {\n        this._resolverResultCache =\n          JSON.parse(files.readFile(files.pathJoin(\n            this.projectLocalDir,\n            \"resolver-result-cache.json\"\n          )));\n      } catch (e) {\n        if (e.code !== \"ENOENT\") throw e;\n        this._resolverResultCache = {};\n      }\n    }\n\n    return this._resolverResultCache;\n  },\n\n  _saveResolverResultCache() {\n    files.writeFileAtomically(\n      files.pathJoin(\n        this.projectLocalDir,\n        \"resolver-result-cache.json\"\n      ),\n      JSON.stringify(this._resolverResultCache) + \"\\n\"\n    );\n  },\n\n  // When running test-packages for an app with local packages, this\n  // method will return the original app dir, as opposed to the temporary\n  // testRunnerAppDir created for the tests.\n  getOriginalAppDirForTestPackages() {\n    const appDir = this._projectDirForLocalPackages;\n    if (_.isString(appDir) && appDir !== this.projectDir) {\n      return appDir;\n    }\n  },\n\n  _localPackageSearchDirs: function () {\n    const self = this;\n    let searchDirs = [\n      files.pathJoin(self._projectDirForLocalPackages, 'packages'),\n    ];\n\n    // User can provide additional package directories to search in\n    // METEOR_PACKAGE_DIRS (semi-colon/colon-separated, depending on OS),\n\n    // PACKAGE_DIRS Deprecated in 2016-10\n    // Warn users to migrate from PACKAGE_DIRS to METEOR_PACKAGE_DIRS\n    if (process.env.PACKAGE_DIRS) {\n      Console.warn('For compatibility, the PACKAGE_DIRS environment variable',\n        'is deprecated and will be removed in a future Meteor release.');\n      Console.warn('Developers should now use METEOR_PACKAGE_DIRS and',\n        'Windows projects should now use a semi-colon (;) to separate paths.');\n    }\n\n    function packageDirsFromEnvVar(envVar, delimiter = files.pathOsDelimiter) {\n      return process.env[envVar] && process.env[envVar].split(delimiter) || [];\n    }\n\n    const envPackageDirs = [\n    // METEOR_PACKAGE_DIRS should use the arch-specific delimiter\n      ...(packageDirsFromEnvVar('METEOR_PACKAGE_DIRS')),\n      // PACKAGE_DIRS (deprecated) always used ':' separator (yes, even Windows)\n      ...(packageDirsFromEnvVar('PACKAGE_DIRS', ':')),\n    ];\n\n    if (! self._ignorePackageDirsEnvVar && envPackageDirs.length) {\n      // path.delimiter was added in v0.9.3\n      envPackageDirs.forEach( p => searchDirs.push(files.pathResolve(p)) );\n    }\n\n    if (! self._ignoreCheckoutPackages && files.inCheckout()) {\n      // Running from a checkout, so use the Meteor core packages from the\n      // checkout.\n      const packagesDir =\n        files.pathJoin(files.getCurrentToolsDir(), 'packages');\n\n      searchDirs.push(\n        // Include packages like packages/ecmascript.\n        packagesDir,\n        // Include packages like packages/non-core/coffeescript.\n        files.pathJoin(packagesDir, \"non-core\"),\n        // Include packages like packages/non-core/blaze/packages/blaze.\n        files.pathJoin(packagesDir, \"non-core\", \"*\", \"packages\"),\n      );\n    }\n    return searchDirs;\n  },\n\n  // Returns a layered catalog with information about the packages that can be\n  // used in this project. Processes the package.js file from all local packages\n  // but does not compile the packages.\n  //\n  // Must be run in a buildmessage context. On build error, returns null.\n  _initializeCatalog: Profile('_initializeCatalog', function () {\n    var self = this;\n    buildmessage.assertInJob();\n\n    catalog.runAndRetryWithRefreshIfHelpful(function () {\n      buildmessage.enterJob(\n        \"scanning local packages\",\n        function () {\n          self.localCatalog = new catalogLocal.LocalCatalog;\n          self.projectCatalog = new catalog.LayeredCatalog(\n            self.localCatalog, self._officialCatalog);\n\n          var searchDirs = self._localPackageSearchDirs();\n          self.localCatalog.initialize({\n            localPackageSearchDirs: searchDirs,\n            explicitlyAddedLocalPackageDirs: self._explicitlyAddedLocalPackageDirs\n          });\n\n          if (buildmessage.jobHasMessages()) {\n            // Even if this fails, we want to leave self.localCatalog assigned,\n            // so that it gets counted included in the projectWatchSet.\n            return;\n          }\n\n          self.explicitlyAddedPackageNames = [];\n          _.each(self._explicitlyAddedLocalPackageDirs, function (dir) {\n            var localVersionRecord =\n                  self.localCatalog.getVersionBySourceRoot(dir);\n            if (localVersionRecord) {\n              self.explicitlyAddedPackageNames.push(localVersionRecord.packageName);\n            }\n          });\n\n          self._completedStage = STAGE.INITIALIZE_CATALOG;\n        }\n      );\n    });\n  }),\n\n  _getRootDepsAndConstraints: function () {\n    var self = this;\n\n    var depsAndConstraints = {deps: [], constraints: []};\n\n    self._addAppConstraints(depsAndConstraints);\n    self._addLocalPackageConstraints(depsAndConstraints);\n    self._addReleaseConstraints(depsAndConstraints);\n    return depsAndConstraints;\n  },\n\n  _addAppConstraints: function (depsAndConstraints) {\n    var self = this;\n\n    self.projectConstraintsFile.eachConstraint(function (constraint) {\n      // Add a dependency (\"this package must be used\") and a constraint\n      // (\"... at this version (maybe 'any reasonable')\").\n      depsAndConstraints.deps.push(constraint.package);\n      depsAndConstraints.constraints.push(constraint);\n    });\n  },\n\n  _addLocalPackageConstraints: function (depsAndConstraints) {\n    var self = this;\n    _.each(self.localCatalog.getAllPackageNames(), function (packageName) {\n      var versionRecord = self.localCatalog.getLatestVersion(packageName);\n      var constraint = utils.parsePackageConstraint(\n        packageName + \"@=\" + versionRecord.version);\n      // Add a constraint (\"this is the only version available\") but no\n      // dependency (we don't automatically use all local packages!)\n      depsAndConstraints.constraints.push(constraint);\n    });\n  },\n\n  _addReleaseConstraints: function (depsAndConstraints) {\n    var self = this;\n    if (! self._releaseForConstraints)\n      return;\n    _.each(self._releaseForConstraints.packages, function (version, packageName) {\n      var constraint = utils.parsePackageConstraint(\n        // Note that this used to be an exact name@=version constraint,\n        // before #7084 eliminated these constraints completely. They\n        // were reinstated in Meteor 1.4.3 as name@version constraints,\n        // and further refined to name@~version constraints in 1.5.2.\n        packageName + \"@~\" + version);\n      // Add a constraint but no dependency (we don't automatically use\n      // all local packages!):\n      depsAndConstraints.constraints.push(constraint);\n    });\n  },\n\n  _getAnticipatedPrereleases: function (rootConstraints, cachedVersions) {\n    var self = this;\n\n    var anticipatedPrereleases = {};\n    var add = function (packageName, version) {\n      if (! /-/.test(version)) {\n        return;\n      }\n      if (! _.has(anticipatedPrereleases, packageName)) {\n        anticipatedPrereleases[packageName] = {};\n      }\n      anticipatedPrereleases[packageName][version] = true;\n    };\n\n    // Pre-release versions that are root constraints (in .meteor/packages, in\n    // the release, or the version of a local package) are anticipated.\n    _.each(rootConstraints, function (constraintObject) {\n      _.each(constraintObject.versionConstraint.alternatives, function (alt) {\n        var version = alt.versionString;\n        version && add(constraintObject.package, version);\n      });\n    });\n\n    // Pre-release versions we decided to use in the past are anticipated.\n    _.each(cachedVersions, function (version, packageName) {\n      add(packageName, version);\n    });\n\n    return anticipatedPrereleases;\n  },\n\n  _buildResolver: function () {\n    const { ConstraintSolver } = loadIsopackage('constraint-solver');\n\n    return new ConstraintSolver.PackagesResolver(this.projectCatalog, {\n      nudge() {\n        Console.nudge(true);\n      },\n      Profile: Profile,\n      resultCache: this._resolverResultCache\n    });\n  },\n\n  _downloadMissingPackages: Profile('_downloadMissingPackages', function () {\n    var self = this;\n    buildmessage.assertInJob();\n    if (!self.packageMap)\n      throw Error(\"which packages to download?\");\n\n    catalog.runAndRetryWithRefreshIfHelpful(function () {\n      buildmessage.enterJob(\"downloading missing packages\", function () {\n        self.tropohouse.downloadPackagesMissingFromMap(self.packageMap, {\n          serverArchitectures: self._serverArchitectures\n        });\n        if (buildmessage.jobHasMessages())\n          return;\n        self._completedStage = STAGE.DOWNLOAD_MISSING_PACKAGES;\n      });\n    });\n  }),\n\n  _buildLocalPackages: Profile('_buildLocalPackages', function () {\n    var self = this;\n    buildmessage.assertInCapture();\n\n    self.isopackCache = new isopackCacheModule.IsopackCache({\n      packageMap: self.packageMap,\n      includeCordovaUnibuild: (self._forceIncludeCordovaUnibuild\n                               || self.platformList.usesCordova()),\n      cacheDir: self.getProjectLocalDirectory('isopacks'),\n      pluginCacheDirRoot: self.getProjectLocalDirectory('plugin-cache'),\n      tropohouse: self.tropohouse,\n      previousIsopackCache: self._previousIsopackCache,\n      lintLocalPackages: self.lintAppAndLocalPackages,\n      lintPackageWithSourceRoot: self._lintPackageWithSourceRoot\n    });\n\n    if (self._forceRebuildPackages) {\n      self.isopackCache.wipeCachedPackages(\n        self._forceRebuildPackages === true\n          ? null : self._forceRebuildPackages);\n    }\n\n    buildmessage.enterJob('building local packages', function () {\n      self.isopackCache.buildLocalPackages();\n    });\n    self._completedStage = STAGE.BUILD_LOCAL_PACKAGES;\n  }),\n\n  _saveChangedMetadata: Profile('_saveChangedMetadata', function () {\n    var self = this;\n\n    // Save any changes to .meteor/packages.\n    if (! self._neverWriteProjectConstraintsFile)\n      self.projectConstraintsFile.writeIfModified();\n\n    // Write .meteor/versions if the command always wants to (create/update),\n    // or if the release of the app matches the release of the process.\n    if (! self._neverWritePackageMap &&\n        (self._alwaysWritePackageMap ||\n         (release.current.isCheckout() && self.releaseFile.isCheckout()) ||\n         (! release.current.isCheckout() &&\n          release.current.name === self.releaseFile.fullReleaseName))) {\n\n      self.packageMapFile.write(self.packageMap);\n    }\n\n    self._completedStage = STAGE.SAVE_CHANGED_METADATA;\n  })\n});\n\n\n// Represents .meteor/packages.\nexports.ProjectConstraintsFile = function (options) {\n  var self = this;\n  buildmessage.assertInCapture();\n\n  self.filename = files.pathJoin(options.projectDir, '.meteor', 'packages');\n  self.watchSet = null;\n\n  // List of packages that should be included if not provided in .meteor/packages\n  self._includePackages = options.includePackages || [];\n\n  // Have we modified the in-memory representation since reading from disk?\n  self._modified = null;\n  // List of each line in the file; object with keys:\n  // - leadingSpace (string of spaces before the constraint)\n  // - constraint (as returned by utils.parsePackageConstraint)\n  // - trailingSpaceAndComment (string of spaces/comments after the constraint)\n  // This allows us to rewrite the file preserving comments.\n  self._constraintLines = null;\n  // Maps from package name to entry in _constraintLines.\n  self._constraintMap = null;\n  self._readFile();\n};\n\n_.extend(exports.ProjectConstraintsFile.prototype, {\n  _readFile: function () {\n    var self = this;\n    buildmessage.assertInCapture();\n\n    self.watchSet = new watch.WatchSet;\n    self._modified = false;\n    self._constraintMap = {};\n    self._constraintLines = [];\n    var contents = watch.readAndWatchFile(self.watchSet, self.filename);\n\n    // No .meteor/packages? This isn't a very good project directory. In fact,\n    // that's the definition of a project directory! (And that should have been\n    // fixed by _ensureProjectDir!)\n    if (contents === null)\n      throw Error(\"packages file missing: \" + self.filename);\n\n    var extraConstraintMap = {};\n    _.each(self._includePackages, function (pkg) {\n      var lineRecord = {\n        constraint: utils.parsePackageConstraint(pkg.trim()),\n        skipOnWrite: true\n      };\n      extraConstraintMap[lineRecord.constraint.package] = lineRecord;\n    });\n\n    var lines = files.splitBufferToLines(contents);\n    // Don't keep a record for the space at the end of the file.\n    if (lines.length && _.last(lines) === '')\n      lines.pop();\n\n    _.each(lines, function (line) {\n      var lineRecord =\n            { leadingSpace: '', constraint: null, trailingSpaceAndComment: '' };\n      self._constraintLines.push(lineRecord);\n      // Strip comment.\n      var match = line.match(/^([^#]*)(#.*)$/);\n      if (match) {\n        line = match[1];\n        lineRecord.trailingSpaceAndComment = match[2];\n      }\n      // Strip trailing space.\n      match = line.match(/^((?:.*\\S)?)(\\s*)$/);\n      line = match[1];\n      lineRecord.trailingSpaceAndComment =\n        match[2] + lineRecord.trailingSpaceAndComment;\n      // Strip leading space.\n      match = line.match(/^(\\s*)((?:\\S.*)?)$/);\n      lineRecord.leadingSpace = match[1];\n      line = match[2];\n\n      // No constraint? Leave lineRecord.constraint null and continue.\n      if (line === '')\n        return;\n      lineRecord.constraint = utils.parsePackageConstraint(line, {\n        useBuildmessage: true,\n        buildmessageFile: self.filename\n      });\n      if (! lineRecord.constraint)\n        return;  // recover by ignoring\n\n      // Mark as not iterable if already included in self._includePackages\n      if (_.has(extraConstraintMap, lineRecord.constraint.package))\n        lineRecord.skipOnRead = true;\n\n      if (_.has(self._constraintMap, lineRecord.constraint.package)) {\n        buildmessage.error(\n          \"Package name appears twice: \" + lineRecord.constraint.package, {\n            // XXX should this be relative?\n            file: self.filename\n          });\n        return;  // recover by ignoring\n      }\n      self._constraintMap[lineRecord.constraint.package] = lineRecord;\n    });\n\n    _.each(_.keys(extraConstraintMap), function (key) {\n      var lineRecord = extraConstraintMap[key];\n      self._constraintLines.push(lineRecord);\n      self._constraintMap[lineRecord.constraint.package] = lineRecord;\n    });\n  },\n\n  writeIfModified: function () {\n    var self = this;\n    self._modified && self._write();\n  },\n\n  _write: function () {\n    var self = this;\n    var lines = _.map(self._constraintLines, function (lineRecord) {\n      // Don't write packages that were not loaded from .meteor/packages\n      if (lineRecord.skipOnWrite)\n        return;\n      var lineParts = [lineRecord.leadingSpace];\n      if (lineRecord.constraint) {\n        lineParts.push(lineRecord.constraint.package);\n        if (lineRecord.constraint.constraintString) {\n          lineParts.push('@', lineRecord.constraint.constraintString);\n        }\n      }\n      lineParts.push(lineRecord.trailingSpaceAndComment, '\\n');\n      return lineParts.join('');\n    });\n    files.writeFileAtomically(self.filename, lines.join(''));\n    var messages = buildmessage.capture(\n      { title: 're-reading .meteor/packages' },\n      function () {\n        self._readFile();\n      });\n    // We shouldn't choke on something we just wrote!\n    if (messages.hasMessages())\n      throw Error(\"wrote bad .meteor/packages: \" + messages.formatMessages());\n  },\n\n  // Iterates over all constraints, in the format returned by\n  // utils.parsePackageConstraint.\n  eachConstraint: function (iterator) {\n    var self = this;\n    _.each(self._constraintLines, function (lineRecord) {\n      if (! lineRecord.skipOnRead && lineRecord.constraint)\n        iterator(lineRecord.constraint);\n    });\n  },\n\n  // Returns the constraint in the format returned by\n  // utils.parsePackageConstraint, or null.\n  getConstraint: function (name) {\n    var self = this;\n    if (_.has(self._constraintMap, name))\n      return self._constraintMap[name].constraint;\n    return null;\n  },\n\n  // Adds constraints, an array of objects as returned from\n  // utils.parsePackageConstraint.\n  // Does not write to disk immediately; changes are written to disk by\n  // writeIfModified() which is called in the _saveChangedMetadata step\n  // of project preparation.\n  addConstraints: function (constraintsToAdd) {\n    var self = this;\n    _.each(constraintsToAdd, function (constraintToAdd) {\n      if (! constraintToAdd.package) {\n        throw new Error(\"Expected PackageConstraint: \" + constraintToAdd);\n      }\n\n      var lineRecord;\n      if (! _.has(self._constraintMap, constraintToAdd.package)) {\n        lineRecord = {\n          leadingSpace: '',\n          constraint: constraintToAdd,\n          trailingSpaceAndComment: ''\n        };\n        self._constraintLines.push(lineRecord);\n        self._constraintMap[constraintToAdd.package] = lineRecord;\n        self._modified = true;\n        return;\n      }\n      lineRecord = self._constraintMap[constraintToAdd.package];\n      if (_.isEqual(constraintToAdd, lineRecord.constraint))\n        return;  // nothing changed\n      lineRecord.constraint = constraintToAdd;\n      self._modified = true;\n    });\n  },\n\n  // Like addConstraints, but takes an array of package name strings\n  // to add with no version constraint\n  addPackages: function (packagesToAdd) {\n    this.addConstraints(_.map(packagesToAdd, function (packageName) {\n      // make sure packageName is valid (and doesn't, for example,\n      // contain an '@' sign)\n      utils.validatePackageName(packageName);\n      return utils.parsePackageConstraint(packageName);\n    }));\n  },\n\n  // For every package we already have, update the constraint to be semver>=\n  // the constraint from the release\n  updateReleaseConstraints: function (releaseRecord) {\n    this.addConstraints(\n      _.compact(_.map(releaseRecord.packages, (version, packageName) => {\n        if (this.getConstraint(packageName)) {\n          return utils.parsePackageConstraint(packageName + '@' + version);\n        }\n      }))\n    );\n  },\n\n  // The packages in packagesToRemove are expected to actually be in the file;\n  // if you want to provide different output for packages in the file vs not,\n  // you should have already done that.\n  // Does not write to disk immediately; changes are written to disk by\n  // writeIfModified() which is called in the _saveChangedMetadata step\n  // of project preparation.\n  removePackages: function (packagesToRemove) {\n    var self = this;\n    self._constraintLines = _.filter(\n      self._constraintLines, function (lineRecord) {\n        return ! (lineRecord.constraint &&\n                  _.contains(packagesToRemove, lineRecord.constraint.package));\n      });\n    _.each(packagesToRemove, function (p) {\n      delete self._constraintMap[p];\n    });\n    self._modified = true;\n  },\n\n  // Removes all constraints. Generally this should only be used in situations\n  // where the project is not a real user app: while you can use\n  // removeAllPackages followed by addConstraints to fully replace the\n  // constraints in a project, this will also lose all user comments and\n  // (cosmetic) ordering from the file.\n  removeAllPackages: function () {\n    var self = this;\n    self._constraintLines = [];\n    self._constraintMap = {};\n    self._modified = true;\n  }\n});\n\n\n\n// Represents .meteor/versions.\nexports.PackageMapFile = function (options) {\n  var self = this;\n  buildmessage.assertInCapture();\n\n  self.filename = options.filename;\n  self.watchSet = new watch.WatchSet;\n  self.fileHash = null;\n  self._versions = {};\n\n  self._readFile();\n};\n\n_.extend(exports.PackageMapFile.prototype, {\n  _readFile: function () {\n    var self = this;\n\n    var fileInfo = watch.readAndWatchFileWithHash(self.watchSet, self.filename);\n    var contents = fileInfo.contents;\n    self.fileHash = fileInfo.hash;\n    // No .meteor/versions? That's OK, you just get to start your calculation\n    // from scratch.\n    if (contents === null)\n      return;\n\n    buildmessage.assertInCapture();\n    var lines = files.splitBufferToLines(contents);\n    _.each(lines, function (line) {\n      // We don't allow comments here, since it's cruel to allow comments in a\n      // file when you're going to overwrite them anyway.\n      line = files.trimSpace(line);\n      if (line === '')\n        return;\n      var packageVersion = utils.parsePackageAndVersion(line, {\n        useBuildmessage: true,\n        buildmessageFile: self.filename\n      });\n      if (!packageVersion)\n        return;  // recover by ignoring\n\n      // If a package appears multiple times in .meteor/versions, we just ignore\n      // the second one. This file is more meteor-controlled than\n      // .meteor/packages and people shouldn't be surprised to see it\n      // automatically fixed.\n      if (_.has(self._versions, packageVersion.package))\n        return;\n\n      self._versions[packageVersion.package] = packageVersion.version;\n    });\n  },\n\n  // Note that this is really specific to wanting to know what versions are in\n  // the .meteor/versions file on disk, which is a slightly different question\n  // from \"so, what versions should I be building with?\"  Usually you want the\n  // PackageMap produced by resolving constraints instead! Returns a map from\n  // package name to version.\n  getCachedVersions: function () {\n    var self = this;\n    return _.clone(self._versions);\n  },\n\n  write: function (packageMap) {\n    var self = this;\n    var newVersions = packageMap.toVersionMap();\n\n    // Only write the file if some version changed. (We don't need to do no-op\n    // writes, even if they fix sorting in the file.)\n    if (_.isEqual(self._versions, newVersions))\n      return;\n\n    self._versions = newVersions;\n    var packageNames = _.keys(self._versions);\n    packageNames.sort();\n    var lines = [];\n    _.each(packageNames, function (packageName) {\n      lines.push(packageName + \"@\" + self._versions[packageName] + \"\\n\");\n    });\n    var fileContents = Buffer.from(lines.join(''));\n    files.writeFileAtomically(self.filename, fileContents);\n\n    // Replace our watchSet with one for the new contents of the file.\n    var hash = watch.sha1(fileContents);\n    self.watchSet = new watch.WatchSet;\n    self.watchSet.addFile(self.filename, hash);\n  }\n});\n\n\n\n// Represents .meteor/platforms. We take no effort to maintain comments or\n// spacing here.\nexports.PlatformList = function (options) {\n  var self = this;\n\n  self.filename = files.pathJoin(options.projectDir, '.meteor', 'platforms');\n  self.watchSet = null;\n  self._platforms = null;\n\n  self._readFile();\n};\n\n// These platforms are always present and can be neither added or removed\nexports.PlatformList.DEFAULT_PLATFORMS = ['browser', 'server'];\n\n_.extend(exports.PlatformList.prototype, {\n  _readFile: function () {\n    var self = this;\n\n    // Reset the WatchSet.\n    self.watchSet = new watch.WatchSet;\n    var contents = watch.readAndWatchFile(self.watchSet, self.filename);\n\n    var platforms = contents ? files.splitBufferToLines(contents) : [];\n    // We don't allow comments here, since it's cruel to allow comments in a\n    // file when you're going to overwrite them anyway.\n    platforms = _.uniq(_.compact(_.map(platforms, files.trimSpace)));\n    platforms.sort();\n\n    // Missing some of the default platforms (or the whole file)? Add them and\n    // try again.\n    if (_.difference(exports.PlatformList.DEFAULT_PLATFORMS,\n                     platforms).length) {\n      // Write the platforms to disk (automatically adding DEFAULT_PLATFORMS and\n      // sorting), which automatically calls this function recursively to\n      // re-reads them.\n      self.write(platforms);\n      return;\n    }\n\n    self._platforms = platforms;\n  },\n\n  // Replaces the current platform file with the given list and resets this\n  // object (and its WatchSet) to track the new value.\n  write: function (platforms) {\n    var self = this;\n    self._platforms = null;\n    platforms = _.uniq(\n      platforms.concat(exports.PlatformList.DEFAULT_PLATFORMS));\n    platforms.sort();\n    files.writeFileAtomically(self.filename, platforms.join('\\n') + '\\n');\n    self._readFile();\n  },\n\n  getPlatforms: function () {\n    var self = this;\n    return _.clone(self._platforms);\n  },\n\n  getCordovaPlatforms: function () {\n    var self = this;\n    return _.difference(self._platforms,\n                        exports.PlatformList.DEFAULT_PLATFORMS);\n  },\n\n  usesCordova: function () {\n    var self = this;\n    return ! _.isEmpty(self.getCordovaPlatforms());\n  },\n\n  getWebArchs: function () {\n    var self = this;\n    var archs = [ \"web.browser\" ];\n    if (self.usesCordova()) {\n      archs.push(\"web.cordova\");\n    }\n    return archs;\n  }\n});\n\n\n// Represents .meteor/cordova-plugins.\nexports.CordovaPluginsFile = function (options) {\n  var self = this;\n  buildmessage.assertInCapture();\n\n  self.filename = files.pathJoin(options.projectDir, '.meteor', 'cordova-plugins');\n  self.watchSet = null;\n  // Map from plugin name to version.\n  self._plugins = null;\n\n  self._readFile();\n};\n\n_.extend(exports.CordovaPluginsFile.prototype, {\n  _readFile: function () {\n    var self = this;\n    buildmessage.assertInCapture();\n\n    self.watchSet = new watch.WatchSet;\n    self._plugins = {};\n    var contents = watch.readAndWatchFile(self.watchSet, self.filename);\n    // No file?  No plugins.\n    if (contents === null)\n      return;\n\n    var lines = files.splitBufferToLines(contents);\n    _.each(lines, function (line) {\n      line = files.trimSpace(line);\n      if (line === '')\n        return;\n\n      // We just do a standard split here, not utils.parsePackageConstraint,\n      // since cordova plugins don't necessary obey the same naming conventions\n      // as Meteor packages.\n      var parts = line.split('@');\n      if (parts.length !== 2) {\n        buildmessage.error(\"Cordova plugin must specify version: \" + line, {\n          // XXX should this be relative?\n          file: self.filename\n        });\n        return;  // recover by ignoring\n      }\n      if (_.has(self._plugins, parts[0])) {\n        buildmessage.error(\"Plugin name appears twice: \" + parts[0], {\n          // XXX should this be relative?\n          file: self.filename\n        });\n        return;  // recover by ignoring\n      }\n      self._plugins[parts[0]] = parts[1];\n    });\n  },\n\n  getPluginVersions: function () {\n    var self = this;\n    return _.clone(self._plugins);\n  },\n\n  write: function (plugins) {\n    var self = this;\n    var pluginNames = _.keys(plugins);\n    pluginNames.sort();\n    var lines = _.map(pluginNames, function (pluginName) {\n      return pluginName + '@' + plugins[pluginName] + '\\n';\n    });\n    files.writeFileAtomically(self.filename, lines.join(''));\n    var messages = buildmessage.capture(\n      { title: 're-reading .meteor/cordova-plugins' },\n      function () {\n        self._readFile();\n      });\n    // We shouldn't choke on something we just wrote!\n    if (messages.hasMessages())\n      throw Error(\"wrote bad .meteor/packages: \" + messages.formatMessages());\n  }\n});\n\n\n\n// Represents .meteor/release.\nexports.ReleaseFile = function (options) {\n  var self = this;\n\n  self.filename = files.pathJoin(options.projectDir, '.meteor', 'release');\n  self.catalog = options.catalog || catalog.official;\n\n  self.watchSet = null;\n  // The release name actually written in the file.  Null if no fill.  Empty if\n  // the file is empty.\n  self.unnormalizedReleaseName = null;\n  // The full release name (with METEOR@ if it's missing in\n  // unnormalizedReleaseName).\n  self.fullReleaseName = null;\n  // FOO@bar unless FOO === \"METEOR\" in which case \"Meteor bar\".\n  self.displayReleaseName = null;\n  // Just the track.\n  self.releaseTrack = null;\n  self.releaseVersion = null;\n  self._readFile();\n};\n\n_.extend(exports.ReleaseFile.prototype, {\n  fileMissing: function () {\n    var self = this;\n    return self.unnormalizedReleaseName === null;\n  },\n  noReleaseSpecified: function () {\n    var self = this;\n    return self.unnormalizedReleaseName === '';\n  },\n  isCheckout: function () {\n    var self = this;\n    return self.unnormalizedReleaseName === 'none';\n  },\n  normalReleaseSpecified: function () {\n    var self = this;\n    return ! (self.fileMissing() || self.noReleaseSpecified()\n              || self.isCheckout());\n  },\n\n  _readFile: function () {\n    var self = this;\n\n    // Start a new watchSet, in case we just overwrote this.\n    self.watchSet = new watch.WatchSet;\n    var contents = watch.readAndWatchFile(self.watchSet, self.filename);\n    // If file doesn't exist, leave unnormalizedReleaseName empty; fileMissing\n    // will be true.\n    if (contents === null)\n      return;\n\n    var lines = _.compact(_.map(files.splitBufferToLines(contents),\n                                files.trimSpaceAndComments));\n    // noReleaseSpecified will be true.\n    if (!lines.length) {\n      self.unnormalizedReleaseName = '';\n      return;\n    }\n\n    self.unnormalizedReleaseName = lines[0];\n\n    const catalogUtils = require('./packaging/catalog/catalog-utils.js');\n    var parts = catalogUtils.splitReleaseName(self.unnormalizedReleaseName);\n    self.fullReleaseName = parts[0] + '@' + parts[1];\n    self.displayReleaseName = catalogUtils.displayRelease(parts[0], parts[1]);\n    self.releaseTrack = parts[0];\n    self.releaseVersion = parts[1];\n\n    self.ensureDevBundleLink();\n  },\n\n  // Returns an absolute path to the dev_bundle appropriate for the\n  // release specified in the .meteor/release file.\n  getDevBundle() {\n    let devBundle = files.getDevBundle();\n    const devBundleParts = devBundle.split(files.pathSep);\n    const meteorToolIndex = devBundleParts.lastIndexOf(\"meteor-tool\");\n\n    if (meteorToolIndex >= 0) {\n      const releaseVersion = this.catalog.getReleaseVersion(\n        this.releaseTrack,\n        this.releaseVersion\n      );\n\n      if (releaseVersion) {\n        const meteorToolVersion = releaseVersion.tool.split(\"@\").pop();\n        devBundleParts[meteorToolIndex + 1] = meteorToolVersion;\n        devBundle = devBundleParts.join(files.pathSep);\n      }\n    }\n\n    try {\n      return files.realpath(devBundle);\n    } catch (e) {\n      if (e.code !== \"ENOENT\") throw e;\n      return null;\n    }\n  },\n\n  // Make a symlink from .meteor/local/dev_bundle to the actual dev_bundle.\n  ensureDevBundleLink() {\n    import { makeLink, readLink } from \"./cli/dev-bundle-links.js\";\n\n    const dotMeteorDir = files.pathDirname(this.filename);\n    const localDir = files.pathJoin(dotMeteorDir, \"local\");\n    const devBundleLink = files.pathJoin(localDir, \"dev_bundle\");\n\n    if (this.isCheckout()) {\n      // Only create .meteor/local/dev_bundle if .meteor/release refers to\n      // an actual release, and remove it otherwise.\n      files.rm_recursive(devBundleLink);\n      return;\n    }\n\n    if (files.inCheckout()) {\n      // Never update .meteor/local/dev_bundle to point to a checkout.\n      return;\n    }\n\n    const newTarget = this.getDevBundle();\n    if (! newTarget) {\n      return;\n    }\n\n    try {\n      const oldOSPath = readLink(devBundleLink);\n      const oldTarget = files.convertToStandardPath(oldOSPath);\n      if (newTarget === oldTarget) {\n        // Don't touch .meteor/local/dev_bundle if it already points to\n        // the right target path.\n        return;\n      }\n\n      files.mkdir_p(localDir);\n      makeLink(newTarget, devBundleLink);\n\n    } catch (e) {\n      if (e.code !== \"ENOENT\") {\n        // It's ok if the above commands failed because the target path\n        // did not exist, but other errors should not be silenced.\n        throw e;\n      }\n    }\n  },\n\n  write: function (releaseName) {\n    var self = this;\n    files.writeFileAtomically(self.filename, releaseName + '\\n');\n    self._readFile();\n  }\n});\n\n\n// Represents .meteor/.finished-upgraders.\n// This is only used in a few places, so we don't cache its value in memory;\n// we just read it when we need it. There's also no need to add it to a\n// watchSet because we don't need to rebuild when it changes.\nexports.FinishedUpgraders = function (options) {\n  var self = this;\n\n  self.filename = files.pathJoin(\n    options.projectDir, '.meteor', '.finished-upgraders');\n};\n\n_.extend(exports.FinishedUpgraders.prototype, {\n  readUpgraders: function () {\n    var self = this;\n    var upgraders = [];\n    var lines = files.getLinesOrEmpty(self.filename);\n    _.each(lines, function (line) {\n      line = files.trimSpaceAndComments(line);\n      if (line === '')\n        return;\n      upgraders.push(line);\n    });\n    return upgraders;\n  },\n\n  appendUpgraders: function (upgraders) {\n    var self = this;\n\n    var current = null;\n    try {\n      current = files.readFile(self.filename, 'utf8');\n    } catch (e) {\n      if (e.code !== 'ENOENT')\n        throw e;\n    }\n\n    var appendText = '';\n    if (current === null) {\n      // We're creating this file for the first time. Include a helpful comment.\n      appendText =\n\"# This file contains information which helps Meteor properly upgrade your\\n\" +\n\"# app when you run 'meteor update'. You should check it into version control\\n\" +\n\"# with your project.\\n\" +\n\"\\n\";\n    } else if (current.length && current[current.length - 1] !== '\\n') {\n      // File has an unterminated last line. Let's terminate it.\n      appendText = '\\n';\n    }\n\n    _.each(upgraders, function (upgrader) {\n      appendText += upgrader + '\\n';\n    });\n\n    files.appendFile(self.filename, appendText);\n  }\n});\n"]}