{"version":3,"sources":["/tools/console/console.js"],"names":["module1","module","export","LEVEL_ERROR","LEVEL_WARN","LEVEL_INFO","LEVEL_DEBUG","_","require","readline","util","buildmessage","chalk","cleanup","utils","wordwrap","PROGRESS_DEBUG","process","env","METEOR_PROGRESS_DEBUG","FORCE_PRETTY","undefined","CARRIAGE_RETURN","platform","stdout","isTTY","argv","toLowerCase","includes","Array","join","METEOR_PRETTY_OUTPUT","METEOR_COLOR","enabled","STATUS_MAX_LENGTH","PROGRESS_MAX_WIDTH","PROGRESS_BAR_FORMAT","TEMP_STATUS_LENGTH","STATUS_INTERVAL_MS","FALLBACK_STATUS","SPACE_REPLACEMENT","replaceAll","str","search","replace","split","spacesArray","spacesString","length","substring","ARROW","toFixedLength","text","pad","ProgressDisplayNone","depaint","repaint","ProgressDisplayStatus","constructor","console","_console","_stream","_status","_wroteStatusMessage","spaces","write","updateStatus","status","_render","SpinnerRenderer","frames","start","Date","interval","asString","now","t","frame","Math","floor","ProgressBarRenderer","format","options","fmt","curr","total","maxWidth","chars","complete","incomplete","availableSpace","ratio","min","max","percent","completeLength","elapsed","eta","isNaN","toFixed","isFinite","width","round","ProgressDisplayFull","_progressBarRenderer","_headless","METEOR_HEADLESS","JSON","parse","_spinnerRenderer","_fraction","_printedLength","_lastWrittenLine","_lastWrittenTime","updateProgress","fraction","startTime","setHeadless","headless","progressGraphic","indentColumns","streamColumns","statusColumns","progressColumns","line","fixedLength","bold","StatusPoller","_watching","_pollPromise","_throttledStatusPoll","Throttled","_startPoller","_stop","Error","sleepMs","statusPoll","stop","isAllowed","_statusPoll","rootProgress","getRootProgress","dump","skipDone","reportState","state","progressDisplay","_progressDisplay","end","done","current","watching","getCurrentProgress","getState","title","_title","addWatcher","ConsoleOptions","o","LEVEL_CODE_ERROR","LEVEL_CODE_WARN","LEVEL_CODE_INFO","LEVEL_CODE_DEBUG","code","ConsoleBase","Object","assign","prototype","Console","_statusPoller","_throttledYield","ThrottledYield","verbose","stderr","_pretty","_progressDisplayEnabled","_logThreshold","logspec","METEOR_LOG","trim","onExit","sig","enableProgressDisplay","isInteractive","setPretty","pretty","_updateProgressDisplay","withProgressDisplayVisible","f","originalPretty","originalProgressDisplayEnabled","setVerbose","stream","columns","nudge","canYield","yield","_parseVariadicInput","args","msgArgs","last","initial","message","_format","isLevelEnabled","levelCode","isDebugEnabled","rawDebug","_print","debug","_prettifyMessage","isInfoEnabled","rawInfo","info","isWarnEnabled","rawWarn","warn","rawError","error","clear","msgArguments","parsedArgs","wrapOpts","indent","bulletPoint","wrappedMessage","_wrapText","level","dest","style","red","success","uglySuccessKeyword","checkmark","green","failInfo","_fail","failWarn","printFn","xmark","labelWarn","arrowError","_arrowPrint","arrowWarn","arrowInfo","printError","err","toString","stack","printMessages","messages","hasMessages","formatMessages","command","unwrapped","noWrap","url","unspaced","underline","path","noBlanks","printTwoColumns","rows","longest","each","row","col0","out","col1","substr","ignoreWidth","logArguments","apply","maxIndent","wrappedText","METEOR_NO_WORDWRAP","map","s","initIndent","newProgressDisplay","_setProgressDisplay","isHeadless","oldProgressDisplay","readLine","extend","echo","silentStream","on","removeListener","previousProgressDisplay","rl","createInterface","input","stdin","output","terminal","EMACS","prompt","setPrompt","Promise","resolve","close","await","exports"],"mappings":"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","file":"tools/console/console.js.map","sourcesContent":["///  This class provides a set of utility functions for printing to the terminal\n///  in the Meteor tool.\n///\n///  When you intend for your messages to be read by humans, you should use the\n///  following functions to print to the terminal. They will automatically line\n///  wrap output to either the width of the terminal, or 80 characters. They\n///  will also end in a new line.\n///\n////   - Console.info : Print to stdout.\n///    - Console.error: Print to stderr.\n///    - Console.warn: Prints to stderr, if warnings are enabled.\n///    - Console.debug: Prints to stdout, if debug is enabled.\n///\n/// Sometimes, there is a phrase that shouldn't be split up over multiple\n/// lines (for example, 'meteor update'). When applicable, please use the\n/// following functions (Some of them add aditional formatting, especially when\n/// pretty-print is turned on):\n///\n///    - Console.command: things to enter on the command-line, such as\n///      'meteor update' or 'cd foobar'.\n///    - Console.url: URLs, such as 'www.meteor.com'\n///    - Console.path: filepaths outside of Console.command.\n///    - Console.noWrap: anything else that you don't want line-wrapped.\n///\n/// Here is a contrived example:\n///   Console.info(\n///     \"For more information, please run\", Console.command(\"meteor show\"),\n///     \"or check out the new releases at\", Console.url(\"www.meteor.com\"),\n///     \"or look at\", Console.path(filepath), \". You are currently running\",\n///     \"Console.noWrap(\"Meteor version 1.5\") + \".\");\n///\n/// The Console.info/Console.error/Console.warn/Console.debug functions also\n/// take in Console.options, as a last (optional) argument. These allow you to\n/// set an indent or use a bulletpoint. You can check out their API below. If\n/// possible, you might also want to use one of the existing wrapper functions,\n/// such as Console.labelWarning or Console.arrowInfo.\n///\n/// Output intended for machines (or pre-formatted in specific ways) should NOT\n/// be line-wrapped. Do not wrap these things: JSON output, error stack traces,\n/// logs from other programs, etc. For those, you should use the 'raw'\n/// version of the API:\n///\n///    - Console.rawInfo: Like Console.info, but without formatting.\n///    - Console.rawError: Like Console.error, but without formatting.\n///    - Console.rawWarn: Like Console.warn, but without formatting.\n///    - Console.rawDebug: Like Console.debug, but without formatting.\n///\n/// DO NOT use Console.command/Console.url/Console.path with the raw functions!\n/// (They will change your output in ways that you probably do not want). These\n/// don't auto-linewrap, end in a newline, or take in Console.options.\n///\n/// Here is are some examples:\n///     Console.rawInfo(JSON.stringify(myData, null, 2));\n///     Console.rawError(err.stack + \"\\n\");\n///\n/// In addition to printing functions, the Console class provides progress bar\n/// support, that is mostly handled through buildmessage.js.\nvar _ = require('underscore');\nvar readline = require('readline');\nvar util = require('util');\nvar buildmessage = require('../utils/buildmessage.js');\n// XXX: Are we happy with chalk (and its sub-dependencies)?\nvar chalk = require('chalk');\nvar cleanup = require('../tool-env/cleanup.js');\nvar utils = require('../utils/utils.js');\nvar wordwrap = require('wordwrap');\n\nvar PROGRESS_DEBUG = !!process.env.METEOR_PROGRESS_DEBUG;\nvar FORCE_PRETTY=undefined;\n// Set the default CR to \\r unless we're running with cmd\nvar CARRIAGE_RETURN = process.platform === 'win32' &&\n      process.stdout.isTTY &&\n      process.argv[1].toLowerCase().includes('cmd') ? new Array(249).join('\\b') : '\\r';\n\nif (process.env.METEOR_PRETTY_OUTPUT) {\n  FORCE_PRETTY = process.env.METEOR_PRETTY_OUTPUT != '0';\n}\n\nif (! process.env.METEOR_COLOR) {\n  chalk.enabled = false;\n}\n\nconst STATUS_MAX_LENGTH = 40;\n\nconst PROGRESS_MAX_WIDTH = 40;\nconst PROGRESS_BAR_FORMAT = '[:bar] :percent :etas';\nconst TEMP_STATUS_LENGTH = STATUS_MAX_LENGTH + 12;\n\nconst STATUS_INTERVAL_MS = 50;\n\n// Message to show when we don't know what we're doing\n// XXX: ? FALLBACK_STATUS = 'Pondering';\nconst FALLBACK_STATUS = '';\n\n// If there is a part of the larger text, and we really want to make sure that\n// it doesn't get split up, we will replace the space with a utf character that\n// we are not likely to use anywhere else. This one looks like the a BLACK SUN\n// WITH RAYS. We intentionally want to NOT use a space-like character: it should\n// be obvious that something has gone wrong if this ever gets printed.\nconst SPACE_REPLACEMENT = '\\u2600';\n// In Javascript, replace only replaces the first occurance and this is the\n// proposed alternative.\nconst replaceAll = (str, search, replace) => str.split(search).join(replace);\n\nlet spacesArray = new Array(200).join(' ');\nconst spacesString = (length) => {\n  if (length > spacesArray.length) {\n    spacesArray = new Array(length * 2).join(' ');\n  }\n  return spacesArray.substring(0, length);\n};\nconst ARROW = \"=> \";\n\n\nconst toFixedLength = (text, length) => {\n  text = text || \"\";\n\n  // pad or truncate `text` to length\n  var pad = length - text.length;\n  if (pad < 0) {\n    // Truncate\n    text = text.substring(0, length - 3) + \"...\";\n  } else if (pad > 0) {\n    // Pad\n    text = text + spacesString(pad);\n  }\n  return text;\n};\n\n// No-op progress display, that means we don't have to handle the 'no progress\n// display' case\nclass ProgressDisplayNone {\n  depaint() {\n    // No-op\n  }\n\n  repaint() {\n    // No-op\n  }\n}\n\n// Status display only, primarily for use with emacs\n// No fancy terminal support available, but we have a TTY.\n// Print messages that will be overwritten because they\n// end in `\\r`.\n// Status message mode is where we see status messages but not the\n// fancy progress bar.  It's used when we detect a \"pseudo-TTY\"\n// of the type used by Emacs, and possibly SSH.\n//\n// XXX DELETE THIS MODE since the progress bar now uses \"\\r\".\n// But first we have to throttle progress bar updates so that\n// Emacs doesn't get overwhelemd (we should throttle them anyway).\n// There's also a bug when using the progress bar in Emacs where\n// the cursor doesn't seem to return to column 0.\nclass ProgressDisplayStatus {\n  constructor(console) {\n    this._console = console;\n    this._stream = console._stream;\n\n    this._status = null;\n    this._wroteStatusMessage = false;\n  }\n\n  depaint() {\n    // For the non-progress-bar status mode, we may need to\n    // clear some characters that we printed with a trailing `\\r`.\n    if (this._wroteStatusMessage) {\n      var spaces = spacesString(TEMP_STATUS_LENGTH + 1);\n      this._stream.write(spaces + CARRIAGE_RETURN);\n      this._wroteStatusMessage = false;\n    }\n  }\n\n  repaint() {\n    // We don't repaint after a log message (is that right?)\n  }\n\n  updateStatus(status) {\n    if (status == this._status) {\n      return;\n    }\n\n    this._status = status;\n    this._render();\n  }\n\n  _render() {\n    var text = this._status;\n    if (text) {\n      text = toFixedLength(text, STATUS_MAX_LENGTH);\n    }\n\n    if (text) {\n      // the number of characters besides `text` here must\n      // be accounted for in TEMP_STATUS_LENGTH.\n      this._stream.write('  (  ' + text + '  ... )' + CARRIAGE_RETURN);\n      this._wroteStatusMessage = true;\n    }\n  }\n}\n\nclass SpinnerRenderer {\n  constructor() {\n    this.frames = ['-', '\\\\', '|', '/'];\n    this.start = +(new Date);\n    this.interval = 250;\n    //// I looked at some Unicode indeterminate progress indicators, such as:\n    ////\n    //// spinner = \"▁▃▄▅▆▇▆▅▄▃\".split('');\n    //// spinner = \"▉▊▋▌▍▎▏▎▍▌▋▊▉\".split('');\n    //// spinner = \"▏▎▍▌▋▊▉▊▋▌▍▎▏▁▃▄▅▆▇▆▅▄▃\".split('');\n    //// spinner = \"▉▊▋▌▍▎▏▎▍▌▋▊▉▇▆▅▄▃▁▃▄▅▆▇\".split('');\n    //// spinner = \"⠉⠒⠤⣀⠤⠒\".split('');\n    ////\n    //// but none of them really seemed like an improvement. I think\n    //// the case for using unicode would be stronger in a determinate\n    //// progress indicator.\n    ////\n    //// There are also some four-frame options such as ◐◓◑◒ at\n    ////   http://stackoverflow.com/a/2685827/157965\n    //// but all of the ones I tried look terrible in the terminal.\n  }\n\n  asString() {\n    var now = +(new Date);\n\n    var t = now - this.start;\n    var frame = Math.floor(t / this.interval) % this.frames.length;\n    return this.frames[frame];\n  }\n}\n\n// Renders a progressbar.  Based on the npm 'progress' module, but tailored to our needs (i.e. renders to string)\nclass ProgressBarRenderer {\n  constructor(format, options) {\n    options = options || {};\n\n    this.fmt = format;\n    this.curr = 0;\n    this.total = 100;\n    this.maxWidth = options.maxWidth || this.total;\n    this.chars = {\n      complete   : '=',\n      incomplete : ' '\n    };\n  }\n\n  asString(availableSpace) {\n    var ratio = this.curr / this.total;\n    ratio = Math.min(Math.max(ratio, 0), 1);\n\n    var percent = ratio * 100;\n    var incomplete, complete, completeLength;\n    var elapsed = new Date - this.start;\n    var eta = (percent == 100) ? 0 : elapsed * (this.total / this.curr - 1);\n\n    /* populate the bar template with percentages and timestamps */\n    var str = this.fmt\n      .replace(':current', this.curr)\n      .replace(':total', this.total)\n      .replace(':elapsed', isNaN(elapsed) ? '0.0' : (elapsed / 1000).toFixed(1))\n      .replace(':eta', (isNaN(eta) || ! isFinite(eta)) ? '0.0' : (eta / 1000).toFixed(1))\n      .replace(':percent', percent.toFixed(0) + '%');\n\n    /* compute the available space (non-zero) for the bar */\n    var width = Math.min(this.maxWidth, availableSpace - str.replace(':bar', '').length);\n\n    /* NOTE: the following assumes the user has one ':bar' token */\n    completeLength = Math.round(width * ratio);\n    complete = Array(completeLength + 1).join(this.chars.complete);\n    incomplete = Array(width - completeLength + 1).join(this.chars.incomplete);\n\n    /* fill in the actual progress bar */\n    str = str.replace(':bar', complete + incomplete);\n\n    return str;\n  }\n}\n\n\nclass ProgressDisplayFull {\n  constructor(console) {\n    this._console = console;\n    this._stream = console._stream;\n\n    this._status = '';\n\n    var options = {\n      complete: '=',\n      incomplete: ' ',\n      maxWidth: PROGRESS_MAX_WIDTH,\n      total: 100\n    };\n    this._progressBarRenderer = new ProgressBarRenderer(PROGRESS_BAR_FORMAT, options);\n    this._progressBarRenderer.start = new Date();\n\n    this._headless = !! (\n      process.env.METEOR_HEADLESS &&\n      JSON.parse(process.env.METEOR_HEADLESS)\n    );\n\n    this._spinnerRenderer = new SpinnerRenderer();\n\n    this._fraction = undefined;\n\n    this._printedLength = 0;\n\n    this._lastWrittenLine = null;\n    this._lastWrittenTime = 0;\n  }\n\n  depaint() {\n    this._stream.write(spacesString(this._printedLength) + CARRIAGE_RETURN);\n  }\n\n  updateStatus(status) {\n    if (status == this._status) {\n      return;\n    }\n\n    this._status = status;\n    this._render();\n  }\n\n  updateProgress(fraction, startTime) {\n    this._fraction = fraction;\n    if (fraction !== undefined) {\n      this._progressBarRenderer.curr = Math.floor(fraction * this._progressBarRenderer.total);\n    }\n    if (startTime) {\n      this._progressBarRenderer.start = startTime;\n    }\n    this._render();\n  }\n\n  repaint() {\n    this._render();\n  }\n\n  setHeadless(headless) {\n    this._headless = !! headless;\n  }\n\n  _render() {\n    // XXX: Throttle these updates?\n    // XXX: Or maybe just jump to the correct position?\n    var progressGraphic = '';\n\n    // The cursor appears in position 0; we indent it a little to avoid this\n    // This also means it appears less important, which is good\n    var indentColumns = 3;\n\n    var streamColumns = this._console.width();\n    var statusColumns;\n    var progressColumns;\n    if (! streamColumns) {\n      statusColumns = STATUS_MAX_LENGTH;\n      progressColumns = 0;\n    } else {\n      statusColumns = Math.min(STATUS_MAX_LENGTH, streamColumns - indentColumns);\n      progressColumns = Math.min(PROGRESS_MAX_WIDTH, streamColumns - indentColumns - statusColumns);\n    }\n\n    if (this._fraction !== undefined && progressColumns > 16) {\n      // 16 is a heuristic number that allows enough space for a meaningful progress bar\n      progressGraphic = \"  \" + this._progressBarRenderer.asString(progressColumns - 2);\n\n    } else if (! this._headless && progressColumns > 3) {\n      // 3 = 2 spaces + 1 spinner character\n      progressGraphic = \"  \" + this._spinnerRenderer.asString();\n\n    } else if (new Date - this._lastWrittenTime > 5 * 60 * 1000) {\n      // Print something every five minutes, to avoid test timeouts.\n      progressGraphic = \"  [ProgressDisplayFull keepalive]\";\n      this._lastWrittenLine = null; // Force printing.\n    }\n\n    if (this._status || progressGraphic) {\n      // XXX: Just update the graphic, to avoid text flicker?\n\n      var line = spacesString(indentColumns);\n      var length = indentColumns;\n\n      if (this._status) {\n        var fixedLength = toFixedLength(this._status, statusColumns);\n        line += chalk.bold(fixedLength);\n        length += statusColumns;\n      } else {\n        line += spacesString(statusColumns);\n        length += statusColumns;\n      }\n\n      line += progressGraphic + CARRIAGE_RETURN;\n      length += progressGraphic.length;\n\n      if (this._headless &&\n          line === this._lastWrittenLine) {\n        // Don't write the exact same line twice in a row.\n        return;\n      }\n\n      this.depaint();\n\n      this._stream.write(line);\n      this._lastWrittenLine = line;\n      this._lastWrittenTime = +new Date;\n      this._printedLength = length;\n    }\n  }\n}\n\nclass StatusPoller {\n  constructor(console) {\n    // The current progress we are watching\n    this._watching = null;\n\n    this._console = console;\n\n    this._pollPromise = null;\n    this._throttledStatusPoll = new utils.Throttled({\n      interval: STATUS_INTERVAL_MS\n    });\n    this._startPoller();\n    this._stop = false;\n  }\n\n  _startPoller() {\n    if (this._pollPromise) {\n      throw new Error(\"Already started\");\n    }\n\n    this._pollPromise = (async() => {\n      utils.sleepMs(STATUS_INTERVAL_MS);\n      while (! this._stop) {\n        this.statusPoll();\n        utils.sleepMs(STATUS_INTERVAL_MS);\n      }\n    })();\n  }\n\n  stop() {\n    this._stop = true;\n  }\n\n  statusPoll() {\n    if (this._throttledStatusPoll.isAllowed()) {\n      this._statusPoll();\n    }\n  }\n\n  _statusPoll() {\n    // XXX: Early exit here if we're not showing status at all?\n\n    var rootProgress = buildmessage.getRootProgress();\n    if (PROGRESS_DEBUG) {\n      // It can be handy for dev purposes to see all the executing tasks\n      rootProgress.dump(process.stdout, {skipDone: true});\n    }\n\n    const reportState = (state, startTime) => {\n      var progressDisplay = this._console._progressDisplay;\n      // Do the % computation, if it is going to be used\n      if (progressDisplay.updateProgress) {\n        if (state.end === undefined || state.end == 0) {\n          progressDisplay.updateProgress(undefined, startTime);\n        } else {\n          var fraction = state.done ? 1.0 : (state.current / state.end);\n\n          if (! isNaN(fraction) && fraction >= 0) {\n            progressDisplay.updateProgress(fraction, startTime);\n          } else {\n            progressDisplay.updateProgress(0, startTime);\n          }\n        }\n      }\n    };\n\n    var watching = (rootProgress ? rootProgress.getCurrentProgress() : null);\n\n    if (this._watching === watching) {\n      // We need to do this to keep the spinner spinning\n      // XXX: Should we _only_ do this when we're showing the spinner?\n      reportState(watching.getState(), watching.startTime);\n      return;\n    }\n\n    this._watching = watching;\n\n    var title = (watching != null ? watching._title : null) || FALLBACK_STATUS;\n\n    var progressDisplay = this._console._progressDisplay;\n    progressDisplay.updateStatus && progressDisplay.updateStatus(title);\n\n    if (watching) {\n      watching.addWatcher((state) => {\n        if (watching != this._watching) {\n          // No longer active\n          // XXX: De-register with watching? (we don't bother right now because dead tasks tell no status)\n          return;\n        }\n\n        reportState(state, watching.startTime);\n      });\n    }\n  }\n}\n\n// We use a special class to represent the options that we send to the Console\n// because it allows us to call 'instance of' on the last argument of variadic\n// functions. This allows us to keep the signature of our custom output\n// functions (ex: info) roughly the same as the originals.\nclass ConsoleOptions {\n  constructor(o) {\n    this.options = o;\n  }\n}\n\nconst LEVEL_CODE_ERROR = 4;\nconst LEVEL_CODE_WARN = 3;\nconst LEVEL_CODE_INFO = 2;\nconst LEVEL_CODE_DEBUG = 1;\n\nexport const LEVEL_ERROR = { code: LEVEL_CODE_ERROR };\nexport const LEVEL_WARN = { code: LEVEL_CODE_WARN };\nexport const LEVEL_INFO = { code: LEVEL_CODE_INFO };\nexport const LEVEL_DEBUG = { code: LEVEL_CODE_DEBUG };\n\n// This base class is just here to preserve some of the \"static properties\"\n// which were being set on the `Console.prototype` prior to this being a\n// `class`.  In the future, if static properties eventually work their way\n// into the language, this can be moved into the `Console` class.\nclass ConsoleBase {}\nObject.assign(ConsoleBase.prototype, {\n  // Log levels\n  LEVEL_ERROR,\n  LEVEL_WARN,\n  LEVEL_INFO,\n  LEVEL_DEBUG,\n\n  // Other Console constants.\n  CARRIAGE_RETURN,\n});\n\nclass Console extends ConsoleBase {\n  constructor(options) {\n    super();\n\n    options = options || {};\n\n    this._headless = !! (\n      process.env.METEOR_HEADLESS &&\n      JSON.parse(process.env.METEOR_HEADLESS)\n    );\n\n    // The progress display we are showing on-screen\n    this._progressDisplay = new ProgressDisplayNone(this);\n\n    this._statusPoller = null;\n\n    this._throttledYield = new utils.ThrottledYield();\n\n    this.verbose = false;\n\n    // Legacy helpers\n    this.stdout = {};\n    this.stderr = {};\n\n    this._stream = process.stdout;\n\n    this._pretty = (FORCE_PRETTY !== undefined ? FORCE_PRETTY : false);\n    this._progressDisplayEnabled = false;\n\n    this._logThreshold = LEVEL_CODE_INFO;\n    var logspec = process.env.METEOR_LOG;\n    if (logspec) {\n      logspec = logspec.trim().toLowerCase();\n      if (logspec == 'debug') {\n        this._logThreshold = LEVEL_CODE_DEBUG;\n      }\n    }\n\n    cleanup.onExit((sig) => {\n      this.enableProgressDisplay(false);\n    });\n  }\n\n  isInteractive() {\n    return !this._headless;\n  }\n\n  setPretty(pretty) {\n    // If we're being forced, do nothing.\n    if (FORCE_PRETTY !== undefined) {\n      return;\n    }\n    // If no change, do nothing.\n    if (this._pretty === pretty) {\n      return;\n    }\n    this._pretty = pretty;\n    this._updateProgressDisplay();\n  }\n\n  // Runs f with the progress display visible (ie, with progress display enabled\n  // and pretty). Resets both flags to their original values after f runs.\n  withProgressDisplayVisible(f) {\n    var originalPretty = this._pretty;\n    var originalProgressDisplayEnabled = this._progressDisplayEnabled;\n\n    // Turn both flags on.\n    this._pretty = this._progressDisplayEnabled = true;\n\n    // Update the screen if anything changed.\n    if (! originalPretty || ! originalProgressDisplayEnabled) {\n      this._updateProgressDisplay();\n    }\n\n    try {\n      return f();\n    } finally {\n      // Reset the flags.\n      this._pretty = originalPretty;\n      this._progressDisplayEnabled = originalProgressDisplayEnabled;\n      // Update the screen if anything changed.\n      if (! originalPretty || ! originalProgressDisplayEnabled) {\n        this._updateProgressDisplay();\n      }\n    }\n  }\n\n  setVerbose(verbose) {\n    this.verbose = verbose;\n  }\n\n  // Get the current width of the Console.\n  width() {\n    var width = 80;\n    var stream = process.stdout;\n    if (stream && stream.isTTY && stream.columns) {\n      width = stream.columns;\n    }\n\n    // On Windows cmd.exe splits long lines into smaller chunks by inserting the\n    // '\\r\\n' symbols into the stream, this is what cmd.exe does instead of\n    // reflowing the text. We cannot control it. For some unknown reason, even\n    // when the output line is less than number of columns (usually 80), cmd.exe\n    // would still insert new-line chars. These chars break our repainting that\n    // relies on the previous chars to be erasable with '\\b' (end-line chars\n    // can't be erased this way). This is why we report a smaller number than it\n    // is in reality, for safety.\n    if (process.platform === 'win32') {\n      width -= 5;\n    }\n\n    return width;\n  }\n\n  // This can be called during long lived operations; it will keep the spinner spinning.\n  // (This code used to be in Patience.nudge)\n  //\n  // It's frustrating when you write code that takes a while, either because it\n  // uses a lot of CPU or because it uses a lot of network/IO.  In Node,\n  // consuming lots of CPU without yielding is especially bad.\n  // Other IO/network tasks will stall, and you can't even kill the process!\n  //\n  // Within any code that may burn CPU for too long, call `Console.nudge()`.\n  // If it's been a while since your last yield, your Fiber will sleep momentarily.\n  // It will also update the spinner if there is one and it's been a while.\n  // The caller should be OK with yielding --- it has to be in a Fiber and it can't be\n  // anything that depends for correctness on not yielding.  You can also call nudge(false)\n  // if you just want to update the spinner and not yield, but you should avoid this.\n  nudge(canYield) {\n    if (this._statusPoller) {\n      this._statusPoller.statusPoll();\n    }\n    if (canYield === undefined || canYield === true) {\n      this._throttledYield.yield();\n    }\n  }\n\n  // Initializes and returns a new ConsoleOptions object. Takes in the following\n  // Console options to pass to _wrapText eventually.\n  //\n  //   - bulletPoint: start the first line with a given string, then offset the\n  //     subsequent lines by the length of that string. For example, if the\n  //     bulletpoint is \" => \", we would get:\n  //     \" => some long message starts here\n  //          and then continues here.\"\n  //   - indent: offset the entire string by a specific number of\n  //     characters. For example:\n  //     \"  This entire message is indented\n  //        by two characters.\"\n  //\n  // Passing in both options will offset the bulletPoint by the indentation,\n  // like so:\n  //  \"  this message is indented by two.\"\n  //  \"  => this mesage indented by two and\n  //        and also starts with an arrow.\"\n  //\n  options(o) {\n    // (This design pattern allows us to call 'instance of' on the\n    // ConsoleOptions in parseVariadicInput, by ensuring that the object created\n    // with Console.options is, in fact, a new object.\n    return new ConsoleOptions(o);\n  }\n\n  // Deal with the arguments to a variadic print function that also takes an\n  // optional ConsoleOptions argument at the end.\n  //\n  // Returns an object with keys:\n  //  - options: The options that were passed in, or an empty object.\n  //  - message: Arguments to the original function, parsed as a string.\n  //\n  _parseVariadicInput(args) {\n    var msgArgs;\n    var options;\n    // If the last argument is an instance of ConsoleOptions, then we should\n    // separate it out, and only send the first N-1 arguments to be parsed as a\n    // message.\n    if (_.last(args) instanceof ConsoleOptions) {\n      msgArgs = _.initial(args);\n      options = _.last(args).options;\n    } else {\n      msgArgs = args;\n      options = {};\n    }\n    var message = this._format(msgArgs);\n    return { message: message, options: options };\n  }\n\n  isLevelEnabled(levelCode) {\n    return (this.verbose || this._logThreshold <= levelCode);\n  }\n\n  isDebugEnabled() {\n    return this.isLevelEnabled(LEVEL_CODE_DEBUG);\n  }\n\n\n  // Don't pretty-fy this output by trying to, for example, line-wrap it. Just\n  // print it to the screen as it is.\n  rawDebug(...args) {\n    if (! this.isDebugEnabled()) {\n      return;\n    }\n\n    var message = this._format(args);\n    this._print(LEVEL_DEBUG, message);\n  }\n\n  // By default, Console.debug automatically line wraps the output.\n  //\n  // Takes in an optional Console.options({}) argument at the end, with the\n  // following keys:\n  //   - bulletPoint: start the first line with a given string, then offset the\n  //     subsequent lines by the length of that string. See _wrap for more details.\n  //   - indent: offset the entire string by a specific number of\n  //     characters. See _wrap for more details.\n  //\n  debug(...args) {\n    if (! this.isDebugEnabled()) { return; }\n\n    var message = this._prettifyMessage(args);\n    this._print(LEVEL_DEBUG, message);\n  }\n\n  isInfoEnabled() {\n    return this.isLevelEnabled(LEVEL_CODE_INFO);\n  }\n\n  // Don't pretty-fy this output by trying to, for example, line-wrap it. Just\n  // print it to the screen as it is.\n  rawInfo(...args) {\n    if (! this.isInfoEnabled()) {\n      return;\n    }\n\n    var message = this._format(args);\n    this._print(LEVEL_INFO, message);\n  }\n\n  // Generally, we want to process the output for legibility, for example, by\n  // wrapping it. For raw output (ex: stack traces, user logs, etc), use the\n  // rawInfo function. For more information about options, see: debug.\n  info(...args) {\n    if (! this.isInfoEnabled()) { return; }\n\n    var message = this._prettifyMessage(args);\n    this._print(LEVEL_INFO, message);\n  }\n\n  isWarnEnabled() {\n    return this.isLevelEnabled(LEVEL_CODE_WARN);\n  }\n\n  rawWarn(...args) {\n    if (! this.isWarnEnabled()) {\n      return;\n    }\n\n    var message = this._format(args);\n    this._print(LEVEL_WARN, message);\n  }\n\n  // Generally, we want to process the output for legibility, for example, by\n  // wrapping it. For raw output (ex: stack traces, user logs, etc), use the\n  // rawWarn function. For more information about options, see: debug.\n  warn(...args) {\n    if (! this.isWarnEnabled()) { return; }\n\n    var message = this._prettifyMessage(args);\n    this._print(LEVEL_WARN, message);\n  }\n\n  rawError(...args) {\n    var message = this._format(args);\n    this._print(LEVEL_ERROR, message);\n  }\n\n  // Generally, we want to process the output for legibility, for example, by\n  // wrapping it. For raw output (ex: stack traces, user logs, etc), use the\n  // rawError function. For more information about options, see: debug.\n  error(...args) {\n    var message = this._prettifyMessage(args);\n    this._print(LEVEL_ERROR, message);\n  }\n\n  // Prints a special ANSI sequence that \"clears\" the screen (on most terminal\n  // emulators just scrolls the contents down and resets the position).\n  // References: http://en.wikipedia.org/wiki/ANSI_escape_code#CSI_codes\n  clear() {\n    this.rawInfo('\\u001b[2J\\u001b[0;0H');\n  }\n\n  _prettifyMessage(msgArguments) {\n    var parsedArgs = this._parseVariadicInput(msgArguments);\n    var wrapOpts = {\n      indent: parsedArgs.options.indent,\n      bulletPoint: parsedArgs.options.bulletPoint\n    };\n\n    var wrappedMessage = this._wrapText(parsedArgs.message, wrapOpts);\n    wrappedMessage += \"\\n\";\n    return wrappedMessage;\n  }\n\n  _print(level, message) {\n    // We need to hide the progress bar/spinner before printing the message\n    var progressDisplay = this._progressDisplay;\n    progressDisplay.depaint();\n\n    // stdout/stderr is determined by the log level\n    // XXX: We should probably just implement Loggers with observers\n    var dest = process.stdout;\n    if (level) {\n      switch (level.code) {\n        case LEVEL_CODE_ERROR:\n          dest = process.stderr;\n          break;\n        case LEVEL_CODE_WARN:\n          dest = process.stderr;\n          break;\n      }\n    }\n\n    // Pick the color/weight if in pretty mode\n    var style = null;\n    if (level && this._pretty) {\n      switch (level.code) {\n        case LEVEL_CODE_ERROR:\n          style = chalk.bold.red;\n          break;\n        case LEVEL_CODE_WARN:\n          style = chalk.red;\n          break;\n      }\n    }\n\n    if (style) {\n      dest.write(style(message));\n    } else {\n      dest.write(message);\n    }\n\n    // XXX: Pause before showing the progress display, to prevent\n    // flicker/spewing messages\n    // Repaint the progress display\n    progressDisplay.repaint();\n  }\n\n  // A wrapper around Console.info. Prints the message out in green (if pretty),\n  // with the CHECKMARK as the bullet point in front of it.\n  success(message, uglySuccessKeyword = \"success\") {\n    var checkmark;\n\n    if (! this._pretty) {\n      return this.info(`${message}: ${uglySuccessKeyword}`);\n    }\n\n    if (process.platform === \"win32\") {\n      checkmark = chalk.green('SUCCESS');\n    } else {\n      checkmark = chalk.green('\\u2713'); // CHECKMARK\n    }\n\n    return this.info(\n        chalk.green(message),\n        this.options({ bulletPoint: checkmark  + \" \"}));\n  }\n\n  // Wrapper around Console.info. Prints the message out in red (if pretty)\n  // with the BALLOT X as the bullet point in front of it.\n  failInfo(message) {\n    return this._fail(message, \"info\");\n  }\n\n  // Wrapper around Console.warn. Prints the message out in red (if pretty)\n  // with the ascii x as the bullet point in front of it.\n  failWarn(message) {\n    return this._fail(message, \"warn\");\n  }\n\n  // Print the message in red (if pretty) with an x bullet point in front of it.\n  _fail(message, printFn) {\n    if (! this._pretty) {\n      return this[printFn](message);\n    }\n\n    var xmark = chalk.red('\\u2717');\n    return this[printFn](\n        chalk.red(message),\n        this.options({ bulletPoint: xmark + \" \" }));\n  }\n\n  // Wrapper around Console.warn that prints a large \"WARNING\" label in front.\n  labelWarn(message) {\n    return this.warn(message, this.options({ bulletPoint: \"WARNING: \" }));\n  }\n\n  // Wrappers around Console functions to prints an \"=> \" in front. Optional\n  // indent to indent the arrow.\n  arrowError(message, indent) {\n    return this._arrowPrint(\"error\", message, indent);\n  }\n  arrowWarn(message, indent) {\n    return this._arrowPrint(\"warn\", message, indent);\n  }\n  arrowInfo(message, indent) {\n    return this._arrowPrint(\"info\", message, indent);\n  }\n  _arrowPrint(printFn, message, indent) {\n    indent = indent || 0;\n    return this[printFn](\n      message,\n      this.options({ bulletPoint: ARROW, indent: indent }));\n  }\n\n  // A wrapper around console.error. Given an error and some background\n  // information, print out the correct set of messages depending on verbose\n  // level, etc.\n  printError(err, info) {\n    var message = err.message;\n    if (! message) {\n      message = \"Unexpected error\";\n      if (this.verbose) {\n        message += \" (\" + err.toString() + \")\";\n      }\n    }\n\n    if (info) {\n      message = info + \": \" + message;\n    }\n\n    this.error(message);\n    if (this.verbose && err.stack) {\n      this.rawInfo(err.stack + \"\\n\");\n    }\n  }\n\n  // A wrapper to print out buildmessage errors.\n  printMessages(messages) {\n    if (messages.hasMessages()) {\n      this.error(\"\\n\" + messages.formatMessages());\n    }\n  }\n\n  // Wrap commands in this function -- it ensures that commands don't get line\n  // wrapped (ie: print 'meteor' at the end of the line, and 'create --example'\n  // at the beginning of the next one).\n  //\n  // To use, wrap commands that you send into print functions with this\n  // function, like so: Console.info(text + Console.command(\"meteor create\n  // --example leaderboard\") + moretext).\n  //\n  // If pretty print is on, this will also bold the commands.\n  command(message) {\n    var unwrapped = this.noWrap(message);\n    return this.bold(unwrapped);\n  }\n\n  // Underline the URLs (if pretty print is on).\n  url(message) {\n    // If we are going to print URLs with spaces, we should turn spaces into\n    // things browsers understand.\n    var unspaced =\n          replaceAll(message, ' ', '%20');\n    // There is no need to call noWrap here, since that only handles spaces (and\n    // we have done that). If it ever handles things other than spaces, we\n    // should make sure to call it here.\n    return this.underline(unspaced);\n  }\n\n  // Format a filepath to not wrap. This does NOT automatically escape spaces\n  // (ie: add a slash in front so the user could copy paste the file path into a\n  // terminal).\n  path(message) {\n    // Make sure that we don't wrap this.\n    var unwrapped = this.noWrap(message);\n    return this.bold(unwrapped);\n  }\n\n  // Do not wrap this substring when you send it into a non-raw print function.\n  // DO NOT print the result of this call with a raw function.\n  noWrap(message) {\n    var noBlanks = replaceAll(message, ' ', SPACE_REPLACEMENT);\n    return noBlanks;\n  }\n\n  // A wrapper around the underline functionality of chalk.\n  underline(message) {\n    if (! this._pretty) {\n      return message;\n    }\n    return chalk.underline(message);\n  }\n\n  // A wrapper around the bold functionality of chalk.\n  bold(message) {\n    if (! this._pretty) {\n      return message;\n    }\n    return chalk.bold(message);\n  }\n\n  // Prints a two column table in a nice format (The first column is printed\n  // entirely, the second only as space permits).\n  //  options:\n  //      - level: Allows to print to stderr, instead of stdout. Set the print\n  //        level with Console.LEVEL_INFO, Console.LEVEL_ERROR, etc.\n  //      - ignoreWidth: ignore the width of the terminal, and go over the\n  //        character limit instead of trailing off with '...'. Useful for\n  //        printing directories, for examle.\n  //      - indent: indent the entire table by a given number of spaces.\n  printTwoColumns(rows, options) {\n    options = options || {};\n\n    var longest = '';\n    _.each(rows, row => {\n      var col0 = row[0] || '';\n      if (col0.length > longest.length) {\n        longest = col0;\n      }\n    });\n\n    var pad = longest.replace(/./g, ' ');\n    var width = this.width();\n    var indent =\n      options.indent ? Array(options.indent + 1).join(' ') : \"\";\n\n    var out = '';\n    _.each(rows, row => {\n      var col0 = row[0] || '';\n      var col1 = row[1] || '';\n      var line = indent + this.bold(col0) + pad.substr(col0.length);\n      line += \"  \" + col1;\n      if (! options.ignoreWidth && line.length > width) {\n        line = line.substr(0, width - 3) + '...';\n      }\n      out += line + \"\\n\";\n    });\n\n    var level = options.level || this.LEVEL_INFO;\n    out += \"\\n\";\n    this._print(level, out);\n\n    return out;\n  }\n\n  // Format logs according to the spec in utils.\n  _format(logArguments) {\n    return util.format.apply(util, logArguments);\n  }\n\n  // Wraps long strings to the length of user's terminal. Inserts linebreaks\n  // between words when nearing the end of the line. Returns the wrapped string\n  // and takes the following arguments:\n  //\n  // text: the text to wrap\n  // options:\n  //   - bulletPoint: (see: Console.options)\n  //   - indent: (see: Console.options)\n  //\n  _wrapText(text, options) {\n    options = options || {};\n\n    // Compute the maximum offset on the bulk of the message.\n    var maxIndent = 0;\n    if (options.indent && options.indent > 0) {\n      maxIndent = maxIndent + options.indent;\n    }\n    if (options.bulletPoint) {\n      maxIndent = maxIndent + options.bulletPoint.length;\n    }\n\n    // Get the maximum width, or if we are not running in a terminal (self-test,\n    // for example), default to 80 columns.\n    var max = this.width();\n\n    var wrappedText;\n    if (process.env.METEOR_NO_WORDWRAP) {\n      var indent =\n        options.indent ? Array(options.indent + 1).join(' ') : \"\";\n      if (options.bulletPoint) {\n        wrappedText = options.bulletPoint + text;\n      } else {\n        wrappedText = text;\n      }\n      wrappedText = _.map(wrappedText.split('\\n'), s => {\n        if (s === \"\") {\n          return \"\";\n        }\n        return indent + s;\n      }).join('\\n');\n\n    } else {\n      // Wrap the text using the npm wordwrap library.\n      wrappedText = wordwrap(maxIndent, max)(text);\n\n      // Insert the start string, if applicable.\n      if (options.bulletPoint) {\n        // Save the initial indent level.\n        var initIndent = options.indent ?\n              wrappedText.substring(0, options.indent) : \"\";\n        // Add together the initial indent (if any), the bullet point and the\n        // remainder of the message.\n        wrappedText = initIndent + options.bulletPoint +\n          wrappedText.substring(maxIndent);\n      }\n    }\n\n    // If we have previously replaces any spaces, now is the time to bring them\n    // back.\n    wrappedText = replaceAll(wrappedText, SPACE_REPLACEMENT, ' ');\n    return wrappedText;\n  }\n\n\n  // Enables the progress bar, or disables it when called with (false)\n  enableProgressDisplay(enabled) {\n    // No arg => enable\n    if (enabled === undefined) {\n      enabled = true;\n    }\n\n    if (this._progressDisplayEnabled === enabled) {\n      return;\n    }\n\n    this._progressDisplayEnabled = enabled;\n    this._updateProgressDisplay();\n  }\n\n  // In response to a change in setPretty or enableProgressDisplay,\n  // configure the appropriate progressDisplay\n  _updateProgressDisplay() {\n    var newProgressDisplay;\n\n    if (! this._progressDisplayEnabled) {\n      newProgressDisplay = new ProgressDisplayNone();\n    } else if ((! this._stream.isTTY) || (! this._pretty)) {\n      // No progress bar if not in pretty / on TTY.\n      newProgressDisplay = new ProgressDisplayNone(this);\n    } else if (this._stream.isTTY && ! this._stream.columns) {\n      // We might be in a pseudo-TTY that doesn't support\n      // clearLine() and cursorTo(...).\n      // It's important that we only enter status message mode\n      // if this._pretty, so that we don't start displaying\n      // status messages too soon.\n      // XXX See note where ProgressDisplayStatus is defined.\n      newProgressDisplay = new ProgressDisplayStatus(this);\n    } else {\n      // Otherwise we can do the full progress bar\n      newProgressDisplay = new ProgressDisplayFull(this);\n    }\n\n    // Start/stop the status poller, so we never block exit\n    if (this._progressDisplayEnabled) {\n      if (! this._statusPoller) {\n        this._statusPoller = new StatusPoller(this);\n      }\n    } else {\n      if (this._statusPoller) {\n        this._statusPoller.stop();\n        this._statusPoller = null;\n      }\n    }\n\n    this._setProgressDisplay(newProgressDisplay);\n  }\n\n  isHeadless() {\n    return this._headless;\n  }\n\n  setHeadless(headless = true) {\n    this._headless = !! headless;\n\n    if (this._progressDisplay &&\n        this._progressDisplay.setHeadless) {\n      this._progressDisplay.setHeadless(this._headless);\n    }\n  }\n\n  _setProgressDisplay(newProgressDisplay) {\n    // XXX: Optimize case of no-op transitions? (same mode -> same mode)\n\n    var oldProgressDisplay = this._progressDisplay;\n    oldProgressDisplay.depaint();\n\n    this._progressDisplay = newProgressDisplay;\n  }\n\n  // options:\n  //   - echo (boolean): defaults to true\n  //   - prompt (string)\n  //   - stream: defaults to process.stdout (you might want process.stderr)\n  readLine(options) {\n    options = _.extend({\n      echo: true,\n      stream: this._stream\n    }, options);\n\n    var silentStream = {\n      write: function () {\n      },\n      on: function () {\n      },\n      end: function () {\n      },\n      isTTY: options.stream.isTTY,\n      removeListener: function () {\n      }\n    };\n\n    var previousProgressDisplay = this._progressDisplay;\n    this._setProgressDisplay(new ProgressDisplayNone());\n\n    // Read a line, throwing away the echoed characters into our dummy stream.\n    var rl = readline.createInterface({\n      input: process.stdin,\n      output: options.echo ? options.stream : silentStream,\n      // `terminal: options.stream.isTTY` is the default, but emacs shell users\n      // don't want fancy ANSI.\n      terminal: options.stream.isTTY && process.env.EMACS !== 't'\n    });\n\n    if (! options.echo) {\n      options.stream.write(options.prompt);\n    } else {\n      rl.setPrompt(options.prompt);\n      rl.prompt();\n    }\n\n    return new Promise((resolve) => {\n      rl.on('line', line => {\n        rl.close();\n        if (! options.echo) {\n          options.stream.write(\"\\n\");\n        }\n        this._setProgressDisplay(previousProgressDisplay);\n        resolve(line);\n      });\n    }).await();\n  }\n}\n\nexports.Console = new Console;\n"]}