{"version":3,"sources":["/tools/cordova/index.js"],"names":["module","export","CORDOVA_ARCH","CORDOVA_PLATFORMS","CORDOVA_DEV_BUNDLE_VERSIONS","CORDOVA_PLATFORM_VERSIONS","ensureDevBundleDependencies","displayNameForPlatform","displayNamesForPlatforms","filterPlatforms","splitPluginsAndPackages","pluginVersionsFromStarManifest","newPluginId","convertPluginVersions","convertToGitUrl","_","watch","require","default","v","assert","utils","buildmessage","PLATFORM_TO_DISPLAY_NAME_MAP","enterJob","title","ensureDependencies","platform","platforms","map","join","intersection","packages","result","plugins","pkg","namespace","rest","split","name","push","star","cordovaProgram","findWhere","programs","arch","cordovaDependencies","id","oldToNewPluginIds","oldToNew","pluginVersions","assertInJob","newPluginVersions","each","version","isUrlWithSha","newId","has","url","match","organization","repository","sha","test","error","displayNameForHostPlatform","process"],"mappings":"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","file":"tools/cordova/index.js.map","sourcesContent":["import _ from 'underscore';\nimport assert from 'assert';\nimport utils from '../utils/utils.js';\nimport buildmessage from '../utils/buildmessage.js';\n\nexport const CORDOVA_ARCH = \"web.cordova\";\n\nexport const CORDOVA_PLATFORMS = ['ios', 'android'];\n\nexport const CORDOVA_DEV_BUNDLE_VERSIONS = {\n  'cordova-lib': '7.0.1',\n  'cordova-common': '1.5.1',\n  'cordova-registry-mapper': '1.1.15',\n};\n\nexport const CORDOVA_PLATFORM_VERSIONS = {\n  'android': '6.2.3',\n  'ios': '4.5.1'\n};\n\nconst PLATFORM_TO_DISPLAY_NAME_MAP = {\n  'ios': 'iOS',\n  'android': 'Android'\n};\n\nexport function ensureDevBundleDependencies() {\n  buildmessage.enterJob(\n    {\n      title: 'Installing Cordova in Meteor tool',\n    },\n    () => {\n      require(\"../cli/dev-bundle-helpers.js\")\n        .ensureDependencies(CORDOVA_DEV_BUNDLE_VERSIONS);\n    }\n  );\n}\n\nexport function displayNameForPlatform(platform) {\n  return PLATFORM_TO_DISPLAY_NAME_MAP[platform] || platform;\n};\n\nexport function displayNamesForPlatforms(platforms) {\n  return platforms.map((platform) =>\n    displayNameForPlatform(platform)).join(', ');\n}\n\n// This filters the Cordova platforms from a list of app-level platforms.\n// Right now, the only other platforms are the default browser and server\n// platforms.\nexport function filterPlatforms(platforms) {\n  return _.intersection(platforms, CORDOVA_PLATFORMS);\n}\n\nexport function splitPluginsAndPackages(packages) {\n  let result = {\n    plugins: [],\n    packages: []\n  };\n\n  for (let pkg of packages) {\n    const [namespace, ...rest] = pkg.split(':');\n    if (namespace === 'cordova') {\n      const name = rest.join(':');\n      result.plugins.push(name);\n    } else {\n      result.packages.push(pkg);\n    }\n  }\n\n  return result;\n}\n\n// Returns the cordovaDependencies of the Cordova arch from a star manifest.\nexport function pluginVersionsFromStarManifest(star) {\n  var cordovaProgram = _.findWhere(star.programs, { arch: CORDOVA_ARCH });\n  return cordovaProgram ? cordovaProgram.cordovaDependencies : {};\n}\n\nexport function newPluginId(id) {\n  import { oldToNew as oldToNewPluginIds } from 'cordova-registry-mapper';\n  return oldToNewPluginIds[id];\n}\n\nexport function convertPluginVersions(pluginVersions) {\n  assert(pluginVersions);\n  buildmessage.assertInJob();\n\n  let newPluginVersions = {};\n\n  _.each(pluginVersions, (version, id) => {\n    if (utils.isUrlWithSha(version)) {\n      version = convertToGitUrl(version);\n      if (!version) {\n        // convertToGitUrl will add an error to buildmessage messages\n        return;\n      }\n    }\n\n    const newId = newPluginId(id);\n\n    if (newId) {\n      // If the plugin has already been added using the new ID, we do not\n      // overwrite the version.\n      if (!_.has(pluginVersions, newId)) {\n        newPluginVersions[newId] = version;\n      }\n    } else {\n      newPluginVersions[id] = version;\n    }\n  });\n\n  return newPluginVersions;\n}\n\n// Convert old-style GitHub tarball URLs to new Git URLs, and check if other\n// Git URLs contain a SHA reference.\nexport function convertToGitUrl(url) {\n  buildmessage.assertInJob();\n\n  // Matches GitHub tarball URLs, like:\n  // https://github.com/meteor/com.meteor.cordova-update/tarball/92fe99b7248075318f6446b288995d4381d24cd2\n  const match =\n    url.match(/^https?:\\/\\/github.com\\/(.+?)\\/(.+?)\\/tarball\\/([0-9a-f]{40})/);\n  if (match) {\n      const [, organization, repository, sha] = match;\n    // Convert them to a Git URL\n    return `https://github.com/${organization}/${repository}.git#${sha}`;\n  // We only support Git URLs with a SHA reference to guarantee repeatability\n  // of builds\n  } else if (/\\.git#[0-9a-f]{40}/.test(url)) {\n    return url;\n  } else {\n    buildmessage.error(`Meteor no longer supports installing Cordova plugins \\\nfrom arbitrary tarball URLs. You can either add a plugin from a Git URL with \\\na SHA reference, or from a local path. (Attempting to install from ${url}.)`);\n    return null;\n  }\n}\n\nfunction displayNameForHostPlatform(platform = process.platform) {\n  switch (platform) {\n    case 'darwin':\n      return \"Mac\";\n    case 'linux':\n      return \"Linux\";\n    case 'win32':\n      return \"Windows\";\n  }\n}\n"]}