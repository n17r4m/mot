{"version":3,"sources":["/tools/cordova/project.js"],"names":["module","export","CordovaProject","_","watch","require","default","v","util","assert","chalk","semver","files","utils","Console","buildmessage","main","httpHelpers","execFileSync","execFileAsync","cordova_lib","cordova_events","CordovaError","cordova","events","cordova_util","superspawn","PluginInfoProvider","CORDOVA_PLATFORMS","CORDOVA_PLATFORM_VERSIONS","displayNameForPlatform","displayNamesForPlatforms","newPluginId","convertPluginVersions","convertToGitUrl","CordovaBuilder","on","logIfVerbose","log","args","verbose","rawInfo","format","apply","pinnedPlatformVersions","pinnedPluginVersions","constructor","projectContext","options","projectRoot","getProjectLocalDirectory","pluginsDir","pathJoin","createIfNeeded","assertInJob","exists","installedPlatforms","listInstalledPlatforms","outdated","some","pinnedVersion","platform","contains","installedVersion","installedVersionForPlatform","lt","debug","rm_recursive","templatePath","mkdtemp","mkdir_p","builder","mobileServerUrl","settingsFile","processControlFile","jobHasMessages","writeConfigXmlAndCopyResources","pathDirname","config","lib","www","url","convertToOSPath","template","runCommands","raw","create","undefined","prepareFromAppBundle","bundlePath","pluginVersions","copyWWW","ensurePlatformsAreSynchronized","ensurePluginsAreSynchronized","pluginsConfiguration","iosBuildExtrasPath","writeFile","copyBuildOverride","prepareForPlatform","cache","commandOptions","extend","defaultOptions","platforms","prepare","buildForPlatform","extraPaths","build","run","isDevice","push","env","defaultEnvWithPathsAdded","command","cwd","stdio","waitForClose","checkPlatformRequirements","process","warn","inProject","info","allRequirements","requirements","error","message","reject","requirement","id","satisfied","every","installed","name","success","reason","metadata","failInfo","listPlatforms","updatePlatforms","addPlatform","version","platformSpec","removePlatform","cordovaPlatformsInApp","platformList","getCordovaPlatforms","assertInCapture","listInstalledPluginVersions","pluginInfoProvider","installedPluginVersions","getAllWithinSearchPath","fetchedPluginVersions","listFetchedPluginVersions","object","map","pluginInfo","fetchJsonPath","fetchedPluginsMetadata","JSON","parse","readFile","source","type","split","ref","path","targetForPlugin","isUrlWithSha","isUrlWithFileScheme","pluginPath","resolveLocalPluginPath","stat","statOrNull","isDirectory","substr","length","isPathRelative","pathResolve","projectDir","addPlugin","target","cli_variables","link","plugin","removePlugins","plugins","isEmpty","enterJob","title","ensurePinnedPluginVersions","newId","labelWarn","shouldReinstallAllPlugins","pluginsFromLocalPath","each","isPluginFromLocalPath","has","pluginsToRemove","Object","keys","intersection","pluginVersionsToInstall","pluginsToInstallCount","size","installedPluginsCount","reportProgress","current","end","silent","paths","defaultPaths","unshift","currentEnvWithPathsAdded","nodeBinDir","getCurrentNodeBinDir","iosSimBinPath","getDevBundle","promiseOrAsyncFunction","toUpperCase","slice","oldCwd","chdir","oldEnv","forEach","key","promise","Promise","await","arrowError","consoleOptions","indent","errorMessage","stack","green","ExitWithCode"],"mappings":"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","file":"tools/cordova/project.js.map","sourcesContent":["import _ from 'underscore';\nimport util from 'util';\nimport assert from 'assert';\nimport chalk from 'chalk';\nimport semver from 'semver';\n\nimport files from '../fs/files.js';\nimport utils from '../utils/utils.js';\nimport { Console } from '../console/console.js';\nimport buildmessage from '../utils/buildmessage.js';\nimport main from '../cli/main.js';\nimport httpHelpers from '../utils/http-helpers.js';\nimport { execFileSync, execFileAsync } from '../utils/processes.js';\n\nimport './protect-string-proto.js'; // must always come before 'cordova-lib'\nimport { cordova as cordova_lib, events as cordova_events, CordovaError }\n  from 'cordova-lib';\nimport cordova_util from 'cordova-lib/src/cordova/util.js';\nimport superspawn from 'cordova-common/src/superspawn.js';\nimport PluginInfoProvider from 'cordova-common/src/PluginInfo/PluginInfoProvider.js';\n\nimport { CORDOVA_PLATFORMS, CORDOVA_PLATFORM_VERSIONS, displayNameForPlatform, displayNamesForPlatforms,\n  newPluginId, convertPluginVersions, convertToGitUrl } from './index.js';\nimport { CordovaBuilder } from './builder.js';\n\ncordova_events.on('verbose', logIfVerbose);\ncordova_events.on('log', logIfVerbose);\ncordova_events.on('info', logIfVerbose);\ncordova_events.on('warn', log);\ncordova_events.on('error', log);\n\ncordova_events.on('results', logIfVerbose);\n\nfunction logIfVerbose(...args) {\n  if (Console.verbose) {\n    log(...args);\n  }\n};\n\nfunction log(...args) {\n  Console.rawInfo(`%% ${util.format.apply(null, args)}\\n`);\n}\n\n// We pin platform versions ourselves instead of relying on cordova-lib\n// so we we can update them independently (e.g. use Cordova iOS 4.0.1\n// with Cordova 5.4.1)\nconst pinnedPlatformVersions = CORDOVA_PLATFORM_VERSIONS;\n\n// We pin plugin versions to make sure we do not install versions that are\n// incompatible with the current platform versions.\n// Versions are taken from cordova-lib's package.json and should be updated\n// when we update to a newer version of cordova-lib.\nconst pinnedPluginVersions = {\n  \"cordova-plugin-battery-status\": \"1.2.4\",\n  \"cordova-plugin-camera\": \"2.4.1\",\n  \"cordova-plugin-console\": \"1.0.7\",\n  \"cordova-plugin-contacts\": \"2.3.1\",\n  \"cordova-plugin-device\": \"1.1.6\",\n  \"cordova-plugin-device-motion\": \"1.2.5\",\n  \"cordova-plugin-device-orientation\": \"1.0.7\",\n  \"cordova-plugin-dialogs\": \"1.3.3\",\n  \"cordova-plugin-file\": \"4.3.3\",\n  \"cordova-plugin-file-transfer\": \"1.6.3\",\n  \"cordova-plugin-geolocation\": \"2.4.3\",\n  \"cordova-plugin-globalization\": \"1.0.7\",\n  \"cordova-plugin-inappbrowser\": \"1.7.1\",\n  \"cordova-plugin-legacy-whitelist\": \"1.1.2\",\n  \"cordova-plugin-media\": \"3.0.1\",\n  \"cordova-plugin-media-capture\": \"1.4.3\",\n  \"cordova-plugin-network-information\": \"1.3.3\",\n  \"cordova-plugin-splashscreen\": \"4.0.3\",\n  \"cordova-plugin-statusbar\": \"2.2.3\",\n  \"cordova-plugin-test-framework\": \"1.1.5\",\n  \"cordova-plugin-vibration\": \"2.1.5\",\n  \"cordova-plugin-whitelist\": \"1.3.2\",\n  \"cordova-plugin-wkwebview-engine\": \"1.1.3\"\n}\n\nexport class CordovaProject {\n  constructor(projectContext, options = {}) {\n\n    this.projectContext = projectContext;\n\n    this.projectRoot = projectContext.getProjectLocalDirectory('cordova-build');\n    this.options = options;\n\n    this.pluginsDir = files.pathJoin(this.projectRoot, 'plugins');\n\n    this.createIfNeeded();\n  }\n\n  createIfNeeded() {\n    buildmessage.assertInJob();\n\n    // Check if we have an existing Cordova project directory with outdated\n    // platforms. In that case, we remove the whole directory to avoid issues.\n    if (files.exists(this.projectRoot)) {\n      const installedPlatforms = this.listInstalledPlatforms();\n\n      const outdated = _.some(pinnedPlatformVersions, (pinnedVersion, platform) => {\n        // If the platform is not installed, it cannot be outdated\n        if (!_.contains(installedPlatforms, platform)) {\n          return false;\n        }\n\n        const installedVersion = this.installedVersionForPlatform(platform);\n        // If we cannot establish the installed version, we consider it outdated\n        if (!installedVersion) {\n          return true;\n        }\n\n        return semver.lt(installedVersion, pinnedVersion);\n      });\n\n      if (outdated) {\n        Console.debug(`Removing Cordova project directory to avoid issues with\noutdated platforms`);\n        // Remove Cordova project directory to start afresh\n        // and avoid a broken project\n        files.rm_recursive(this.projectRoot);\n      }\n    }\n\n    if (!files.exists(this.projectRoot)) {\n      // We create a temporary directory with a generated config.xml\n      // to use as a template for creating the Cordova project\n      // This way, we are not dependent on the contents of\n      // cordova-app-hello-world but we base our initial project state on\n      // our own defaults and optionally a mobile-config.js\n\n      const templatePath = files.mkdtemp('cordova-template-');\n\n      // If we don't create an empty hooks directory, cordova-lib will attempt\n      // to install one from a hardcoded path to cordova-app-hello-world\n      files.mkdir_p(files.pathJoin(templatePath, 'hooks'));\n\n      // If we don't create an empty www directory, cordova-lib will get\n      // confused\n      files.mkdir_p(files.pathJoin(templatePath, 'www'));\n\n      const builder = new CordovaBuilder(\n        this.projectContext,\n        templatePath,\n        { mobileServerUrl: this.options.mobileServerUrl,\n          settingsFile: this.options.settingsFile }\n      );\n\n      builder.processControlFile();\n\n      if (buildmessage.jobHasMessages()) {\n        return;\n      }\n\n      // Don't copy resources (they will be copied as part of the prepare)\n      builder.writeConfigXmlAndCopyResources(false);\n\n      // Create the Cordova project root directory\n      files.mkdir_p(files.pathDirname(this.projectRoot));\n\n      const config = {\n        lib: {\n          www: {\n            url: files.convertToOSPath(templatePath),\n            template: true\n          }\n        }\n      };\n\n      // Don't set cwd to project root in runCommands because it doesn't\n      // exist yet\n      this.runCommands('creating Cordova project', async () => {\n        // No need to pass in appName and appId because these are set from\n        // the generated config.xml\n        await cordova_lib.raw.create(files.convertToOSPath(this.projectRoot),\n          undefined, undefined, config);\n      }, undefined, null);\n    }\n  }\n\n  // Preparing\n\n  prepareFromAppBundle(bundlePath, pluginVersions) {\n    assert(bundlePath);\n    assert(pluginVersions);\n\n    buildmessage.assertInJob();\n\n    Console.debug('Preparing Cordova project from app bundle');\n\n    const builder = new CordovaBuilder(\n      this.projectContext,\n      this.projectRoot,\n      { mobileServerUrl: this.options.mobileServerUrl,\n        settingsFile: this.options.settingsFile }\n    );\n\n    builder.processControlFile();\n\n    if (buildmessage.jobHasMessages()) {\n      return;\n    }\n\n    builder.writeConfigXmlAndCopyResources();\n    builder.copyWWW(bundlePath);\n\n    this.ensurePlatformsAreSynchronized();\n    this.ensurePluginsAreSynchronized(pluginVersions,\n      builder.pluginsConfiguration);\n\n    // Temporary workaround for Cordova iOS bug until\n    // https://issues.apache.org/jira/browse/CB-10885 is fixed\n    const iosBuildExtrasPath =\n      files.pathJoin(\n        this.projectRoot,\n        'platforms/ios/cordova/build-extras.xcconfig');\n\n    if (files.exists(iosBuildExtrasPath)) {\n      files.writeFile(\n        iosBuildExtrasPath,\n        'LD_RUNPATH_SEARCH_PATHS = @executable_path/Frameworks;');\n    }\n\n    builder.copyBuildOverride();\n  }\n\n  prepareForPlatform(platform) {\n    assert(platform);\n\n    // Temporary workaround for Cordova iOS bug until\n    // https://issues.apache.org/jira/browse/CB-11731 has been released\n    delete require.cache[files.pathJoin(this.projectRoot,\n      'platforms/ios/cordova/lib/configMunger.js')];\n    delete require.cache[files.pathJoin(this.projectRoot,\n      'platforms/ios/cordova/lib/prepare.js')];\n\n    const commandOptions = _.extend(this.defaultOptions,\n      { platforms: [platform] });\n\n    this.runCommands(`preparing Cordova project for platform \\\n${displayNameForPlatform(platform)}`, async () => {\n      await cordova_lib.raw.prepare(commandOptions);\n    });\n  }\n\n  // Building (includes prepare)\n\n  buildForPlatform(platform, options = {}, extraPaths) {\n    assert(platform);\n\n    const commandOptions = _.extend(this.defaultOptions,\n      { platforms: [platform], options: options });\n\n    this.runCommands(`building Cordova app for platform \\\n${displayNameForPlatform(platform)}`, async () => {\n      await cordova_lib.raw.build(commandOptions);\n    });\n  }\n\n  // Running\n\n  async run(platform, isDevice, options = [], extraPaths = []) {\n    options.push(isDevice ? '--device' : '--emulator');\n\n    let env = this.defaultEnvWithPathsAdded(...extraPaths);\n\n    let command = files.convertToOSPath(files.pathJoin(\n      this.projectRoot, 'platforms', platform, 'cordova', 'run'));\n\n    this.runCommands(`running Cordova app for platform \\\n${displayNameForPlatform(platform)} with options ${options}`,\n    execFileAsync(command, options, {\n      env: env,\n      cwd: this.projectRoot,\n      stdio: Console.verbose ? 'inherit' : 'pipe',\n      waitForClose: false\n    }), null, null);\n  }\n\n  // Platforms\n\n  // Checks to see if the requirements for building and running on the\n  // specified Cordova platform are satisfied, printing\n  // installation instructions when needed.\n  checkPlatformRequirements(platform) {\n    if (platform === 'ios' && process.platform !== 'darwin') {\n      Console.warn(\"Currently, it is only possible to build iOS apps \\\non an OS X system.\");\n      return false;\n    }\n\n    const installedPlatforms = this.listInstalledPlatforms();\n\n    const inProject = _.contains(installedPlatforms, platform);\n    if (!inProject) {\n      Console.warn(`Please add the ${displayNameForPlatform(platform)} \\\nplatform to your project first.`);\n      Console.info(`Run: ${Console.command(`meteor add-platform ${platform}`)}`);\n      return false;\n    }\n\n    const allRequirements = this.runCommands(`checking Cordova \\\nrequirements for platform ${displayNameForPlatform(platform)}`,\n      async () => {\n        return await cordova_lib.raw.requirements([platform],\n          this.defaultOptions);\n      });\n    let requirements = allRequirements && allRequirements[platform];\n    if (!requirements) {\n      Console.error(`Failed to check requirements for platform \\\n${displayNameForPlatform(platform)}`);\n      return false;\n    } else if (requirements instanceof CordovaError) {\n      Console.error(`Cordova error: ${requirements.message}`);\n      return false;\n    }\n\n    // We don't use ios-deploy, but open Xcode to run on a device instead\n    requirements = _.reject(requirements,\n      requirement => requirement.id === 'ios-deploy');\n\n    const satisfied = _.every(requirements,\n      requirement => requirement.installed);\n\n    if (!satisfied) {\n      Console.info();\n      Console.info(`Your system does not yet seem to fulfill all requirements \\\nto build apps for ${displayNameForPlatform(platform)}.`);\n\n      Console.info();\n      Console.info(\"Please follow the installation instructions in the mobile guide:\");\n      Console.info(Console.url(\"http://guide.meteor.com/mobile.html#installing-prerequisites\"));\n\n      Console.info();\n\n      Console.info(\"Status of the individual requirements:\");\n      for (const requirement of requirements) {\n        const name = requirement.name;\n        if (requirement.installed) {\n          Console.success(name, \"installed\");\n        } else {\n          const reason = requirement.metadata && requirement.metadata.reason;\n          if (reason) {\n            Console.failInfo(`${name}: ${reason}`);\n          } else {\n            Console.failInfo(name);\n          }\n        }\n      }\n    }\n    return satisfied;\n  }\n\n  listInstalledPlatforms() {\n    return cordova_util.listPlatforms(files.convertToOSPath(this.projectRoot));\n  }\n\n  installedVersionForPlatform(platform) {\n    const command = files.convertToOSPath(files.pathJoin(\n      this.projectRoot, 'platforms', platform, 'cordova', 'version'));\n    // Make sure the command exists before trying to execute it\n    if (files.exists(command)) {\n      return this.runCommands(\n        `getting installed version for platform ${platform} in Cordova project`,\n        execFileSync(command, {\n          env: this.defaultEnvWithPathsAdded(),\n          cwd: this.projectRoot}), null, null);\n    } else {\n      return null;\n    }\n  }\n\n  updatePlatforms(platforms = this.listInstalledPlatforms()) {\n    this.runCommands(`updating Cordova project for platforms \\\n${displayNamesForPlatforms(platforms)}`, async () => {\n      await cordova_lib.raw.platform('update', platforms, this.defaultOptions);\n    });\n  }\n\n  addPlatform(platform) {\n    this.runCommands(`adding platform ${displayNameForPlatform(platform)} \\\nto Cordova project`, async () => {\n      let version = pinnedPlatformVersions[platform];\n      let platformSpec = version ? `${platform}@${version}` : platform;\n      await cordova_lib.raw.platform('add', platformSpec, this.defaultOptions);\n    });\n  }\n\n  removePlatform(platform) {\n    this.runCommands(`removing platform ${displayNameForPlatform(platform)} \\\nfrom Cordova project`, async () => {\n      await cordova_lib.raw.platform('rm', platform, this.defaultOptions);\n    });\n  }\n\n  get cordovaPlatformsInApp() {\n    return this.projectContext.platformList.getCordovaPlatforms();\n  }\n\n  // Ensures that the Cordova platforms are synchronized with the app-level\n  // platforms.\n  ensurePlatformsAreSynchronized(platforms = this.cordovaPlatformsInApp) {\n    buildmessage.assertInCapture();\n\n    const installedPlatforms = this.listInstalledPlatforms();\n\n    for (let platform of platforms) {\n      if (_.contains(installedPlatforms, platform)) {\n        continue;\n      }\n\n      this.addPlatform(platform);\n    }\n\n    for (let platform of installedPlatforms) {\n      if (!_.contains(platforms, platform) &&\n        _.contains(CORDOVA_PLATFORMS, platform)) {\n        this.removePlatform(platform);\n      }\n    }\n  }\n\n  // Plugins\n\n  // Because PluginInfoProvider reads in the plugin versions from\n  // their plugin.xml, that only gives us the declared version and doesn't\n  // tell us if plugins have been fetched from a Git SHA URL or a local path.\n  // So we overwrite the declared versions with versions from\n  // listFetchedPluginVersions that do contain this information.\n  listInstalledPluginVersions() {\n    const pluginInfoProvider = new PluginInfoProvider();\n    const installedPluginVersions = pluginInfoProvider.getAllWithinSearchPath(\n      files.convertToOSPath(this.pluginsDir));\n    const fetchedPluginVersions = this.listFetchedPluginVersions();\n    return _.object(installedPluginVersions.map(pluginInfo => {\n      const id = pluginInfo.id;\n      const version = fetchedPluginVersions[id] || pluginInfo.version;\n      return [id, version];\n    }));\n  }\n\n  // There is no Cordova function to get the fetched plugin versions, so we\n  // have to read in fetch.json (a file managed by plugman, a semi-independent\n  // part of cordova-lib) and parse the format ourselves into a version\n  // string suitable to be passed to targetForPlugin.\n  // Note that a plugin can be fetched but not installed, so that's why we\n  // still need a separate listInstalledPluginVersions.\n  listFetchedPluginVersions() {\n    const fetchJsonPath = files.pathJoin(this.pluginsDir, 'fetch.json');\n\n    if (!files.exists(fetchJsonPath)) {\n      return {};\n    }\n\n    const fetchedPluginsMetadata = JSON.parse(files.readFile(\n      fetchJsonPath, 'utf8'));\n    return _.object(_.map(fetchedPluginsMetadata, (metadata, id) => {\n      const source = metadata.source;\n      let version;\n      if (source.type === 'registry') {\n        version = source.id.split('@')[1];\n      } else if (source.type === 'git') {\n        version = `${source.url}#${source.ref}`;\n      } else if (source.type === 'local') {\n        version = `file://${source.path}`;\n      }\n      return [id, version];\n    }));\n  }\n\n  // Construct a target suitable for 'cordova plugin add' from an id and\n  // version, converting or resolving a URL or path where needed.\n  targetForPlugin(id, version) {\n    assert(id);\n    assert(version);\n\n    buildmessage.assertInJob();\n\n    if (utils.isUrlWithSha(version)) {\n      return convertToGitUrl(version);\n    } else if (utils.isUrlWithFileScheme(version)) {\n      // Strip file:// and resolve the path relative to the cordova-build\n      // directory\n      const pluginPath = this.resolveLocalPluginPath(version);\n      // We need to check if the directory exists ourselves because Cordova\n      // will try to install from npm (and fail with an unhelpful error message)\n      // if the directory is not found\n      const stat = files.statOrNull(pluginPath);\n      if (!(stat && stat.isDirectory())) {\n        buildmessage.error(`Couldn't find local directory \\\n'${files.convertToOSPath(pluginPath)}' \\\n(while attempting to install plugin ${id}).`);\n        return null;\n      }\n      return files.convertToOSPath(pluginPath);\n    } else {\n      return `${id}@${version}`;\n    }\n  }\n\n  // Strips file:// and resolves the path relative to the cordova-build\n  // directory\n  resolveLocalPluginPath(pluginPath) {\n    pluginPath = pluginPath.substr(\"file://\".length);\n    if (utils.isPathRelative(pluginPath)) {\n      return files.pathResolve(this.projectContext.projectDir, pluginPath);\n    } else {\n      return pluginPath;\n    }\n  }\n\n  addPlugin(id, version, config = {}) {\n    const target = this.targetForPlugin(id, version);\n    if (target) {\n      const commandOptions = _.extend(this.defaultOptions,\n        { cli_variables: config, link: utils.isUrlWithFileScheme(version) });\n\n      this.runCommands(`adding plugin ${target} \\\nto Cordova project`, async () => {\n        await cordova_lib.raw.plugin('add', [target], commandOptions);\n      });\n    }\n  }\n\n  // plugins is an array of plugin IDs.\n  removePlugins(plugins) {\n    if (_.isEmpty(plugins)) {\n      return;\n    }\n\n    this.runCommands(`removing plugins ${plugins} \\\nfrom Cordova project`, async () => {\n      await cordova_lib.raw.plugin('rm', plugins, this.defaultOptions);\n    });\n  }\n\n  // Ensures that the Cordova plugins are synchronized with the app-level\n  // plugins.\n  ensurePluginsAreSynchronized(pluginVersions, pluginsConfiguration = {}) {\n    assert(pluginVersions);\n\n    buildmessage.assertInCapture();\n\n    buildmessage.enterJob({ title: \"installing Cordova plugins\"}, () => {\n      // Cordova plugin IDs have changed as part of moving to npm.\n      // We convert old plugin IDs to new IDs in the 1.2.0-cordova-changes\n      // upgrader and when adding plugins, but packages may still depend on\n      // the old IDs.\n      // To avoid attempts at duplicate installation, we check for old IDs here\n      // and convert them to new IDs when needed. We also convert old-style GitHub\n      // tarball URLs to new Git URLs, and check if other Git URLs contain a\n      // SHA reference.\n      pluginVersions = convertPluginVersions(pluginVersions);\n\n      // To ensure we do not attempt to install plugin versions incompatible\n      // with the current platform versions, we compare them against a list of\n      // pinned versions and adjust them if necessary.\n      this.ensurePinnedPluginVersions(pluginVersions);\n\n      if (buildmessage.jobHasMessages()) {\n        return;\n      }\n\n      // Also, we warn if any App.configurePlugin calls in mobile-config.js\n      // need to be updated (and in the meantime we take care of the\n      // conversion of the plugin configuration to the new ID).\n      pluginsConfiguration = _.object(_.map(pluginsConfiguration, (config, id) => {\n        const newId = newPluginId(id);\n        if (newId) {\n          Console.warn();\n          Console.labelWarn(`Cordova plugin ${id} has been renamed to ${newId} \\\nas part of moving to npm. Please change the App.configurePlugin call in \\\nmobile-config.js accordingly.`);\n          return [newId, config];\n        } else {\n          return [id, config];\n        }\n      }));\n\n      const installedPluginVersions =\n        convertPluginVersions(this.listInstalledPluginVersions());\n\n      // Due to the dependency structure of Cordova plugins, it is impossible to\n      // upgrade the version on an individual Cordova plugin. Instead, whenever\n      // a new Cordova plugin is added or removed, or its version is changed,\n      // we just reinstall all of the plugins.\n      let shouldReinstallAllPlugins = false;\n\n      // Iterate through all of the plugins and find if any of them have a new\n      // version. Additionally, check if we have plugins installed from a local\n      // path.\n      const pluginsFromLocalPath = {};\n      _.each(pluginVersions, (version, id) => {\n        // Check if plugin is installed from a local path.\n        const isPluginFromLocalPath = utils.isUrlWithFileScheme(version);\n\n        if (isPluginFromLocalPath) {\n          pluginsFromLocalPath[id] = version;\n        } else {\n          if (!_.has(installedPluginVersions, id) ||\n            installedPluginVersions[id] !== version) {\n            // We do not have the plugin installed or the version has changed.\n            shouldReinstallAllPlugins = true;\n          }\n        }\n      });\n\n      if (!_.isEmpty(pluginsFromLocalPath)) {\n        Console.debug('Reinstalling Cordova plugins added from the local path');\n      }\n\n      // Check to see if we have any installed plugins that are not in the\n      // current set of plugins.\n      _.each(installedPluginVersions, (version, id) => {\n        if (!_.has(pluginVersions, id)) {\n          shouldReinstallAllPlugins = true;\n        }\n      });\n\n      // We either reinstall all plugins or only those fetched from a local\n      // path.\n      if (shouldReinstallAllPlugins || !_.isEmpty(pluginsFromLocalPath)) {\n        let pluginsToRemove;\n        if (shouldReinstallAllPlugins) {\n          pluginsToRemove = Object.keys(installedPluginVersions);\n        } else {\n          // Only try to remove plugins that are currently installed.\n          pluginsToRemove = _.intersection(\n            Object.keys(pluginsFromLocalPath),\n            Object.keys(installedPluginVersions));\n        }\n\n        this.removePlugins(pluginsToRemove);\n\n        let pluginVersionsToInstall;\n\n        // Now install the necessary plugins.\n        if (shouldReinstallAllPlugins) {\n          pluginVersionsToInstall = pluginVersions;\n        } else {\n          pluginVersionsToInstall = pluginsFromLocalPath;\n        }\n\n        const pluginsToInstallCount = _.size(pluginVersionsToInstall);\n        let installedPluginsCount = 0;\n\n        buildmessage.reportProgress({ current: 0, end: pluginsToInstallCount });\n        _.each(pluginVersionsToInstall, (version, id) => {\n          this.addPlugin(id, version, pluginsConfiguration[id]);\n\n          buildmessage.reportProgress({\n            current: ++installedPluginsCount,\n            end: pluginsToInstallCount\n          });\n        });\n      }\n    });\n  }\n\n  ensurePinnedPluginVersions(pluginVersions) {\n    assert(pluginVersions);\n\n    _.each(pluginVersions, (version, id) => {\n      // Skip plugin specs that are not actual versions\n      if (utils.isUrlWithSha(version) || utils.isUrlWithFileScheme(version)) {\n        return;\n      }\n\n      const pinnedVersion = pinnedPluginVersions[id];\n\n      if (pinnedVersion && semver.lt(version, pinnedVersion)) {\n        Console.labelWarn(`Attempting to install plugin ${id}@${version}, but \\\nit should have a minimum version of ${pinnedVersion} to ensure compatibility \\\nwith the current platform versions. Installing the minimum version for \\\nconvenience, but you should adjust your dependencies.`);\n        pluginVersions[id] = pinnedVersion;\n      }\n    });\n  }\n\n  // Cordova commands support\n\n  get defaultOptions() {\n    return { silent: !Console.verbose, verbose: Console.verbose };\n  }\n\n  defaultEnvWithPathsAdded(...extraPaths) {\n    let paths = (this.defaultPaths || []);\n    paths.unshift(...extraPaths);\n    const env = files.currentEnvWithPathsAdded(...paths);\n    return env;\n  }\n\n  get defaultPaths() {\n    const nodeBinDir = files.getCurrentNodeBinDir();\n\n    // Add the ios-sim bin path so Cordova can find it\n    const iosSimBinPath =\n      files.pathJoin(files.getDevBundle(),\n      'lib/node_modules/ios-sim/bin');\n\n    return [nodeBinDir, iosSimBinPath];\n  }\n\n  runCommands(title, promiseOrAsyncFunction, env = this.defaultEnvWithPathsAdded(),\n    cwd = this.projectRoot) {\n    // Capitalize title for debug output\n    Console.debug(title[0].toUpperCase() + title.slice(1));\n\n    const oldCwd = process.cwd();\n    if (cwd) {\n      process.chdir(files.convertToOSPath(cwd));\n    }\n\n    const oldEnv = process.env;\n    if (env) {\n      // this preserves case insensitivity for PATH on windows\n      Object.keys(env).forEach(key => {\n        process.env[key] = env[key];\n      });\n    }\n\n    try {\n      const promise = (typeof promiseOrAsyncFunction === 'function') ?\n        promiseOrAsyncFunction() : promiseOrAsyncFunction;\n      return Promise.await(promise);\n    } catch (error) {\n      Console.arrowError('Errors executing Cordova commands:');\n      Console.error();\n      const consoleOptions = Console.options({ indent: 3 });\n      Console.error(`While ${title}:`, consoleOptions);\n\n      if (error instanceof CordovaError) {\n        // Only print the message for errors thrown by cordova-lib, because\n        // these are meant for end-user consumption.\n        // But warn that they may not completely apply to our situation.\n        // (We do print the stack trace if we are in verbose mode.)\n        const errorMessage = Console.verbose ? (error.stack || error.message) :\n          error.message;\n        Console.error(`Cordova error: ${errorMessage}`, consoleOptions);\n        Console.error(chalk.green(`(If the error message contains suggestions \\\nfor a fix, note that this may not apply to the Meteor integration. You can try \\\nrunning again with the --verbose option to help diagnose the issue.)`),\n          consoleOptions);\n      } else {\n        // Print stack trace for other errors by default, because the message\n        // usually does not give us enough information to know what is going on\n        const errorMessage = error && error.stack || error;\n        Console.error(errorMessage, consoleOptions);\n      };\n      throw new main.ExitWithCode(1);\n    } finally {\n      if (cwd && oldCwd) {\n        process.chdir(oldCwd);\n      }\n      if (env && oldEnv) {\n        process.env = oldEnv;\n      }\n    }\n  }\n}\n"]}