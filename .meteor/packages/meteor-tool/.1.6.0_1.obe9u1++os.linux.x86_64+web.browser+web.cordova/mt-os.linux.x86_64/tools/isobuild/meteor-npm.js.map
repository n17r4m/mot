{"version":3,"sources":["/tools/isobuild/meteor-npm.js"],"names":["module1","module","export","getProdPackageNames","npmVersion","watch","require","version","v","execFileAsync","getRebuildArgs","get","convertColonsInPath","convert","wrapOptimistic","wrap","dirtyNodeModulesDirectory","optimisticLStat","optimisticStatOrNull","optimisticReadJsonOrNull","optimisticReaddir","assert","cleanup","fs","files","os","_","httpHelpers","buildmessage","utils","runLog","Profile","meteorNpm","exports","tmpDirs","onExit","each","dir","exists","rm_recursive","NpmFailure","updateDependencies","packageName","packageNpmDir","npmDependencies","quiet","newPackageNpmDir","randomToken","isEmpty","rename","e","code","pathJoin","updateExistingNpmDirectory","createFreshNpmDirectory","without","nodeModulesDir","names","Object","create","dirs","nodeModulesDirStack","walk","packageJsonPath","packageJsonStat","isFile","pkg","push","scanDeps","dependencies","peerDependencies","optionalDependencies","bundledDependencies","bundleDependencies","strictEqual","pop","deps","keys","forEach","name","resDir","resolve","has","i","length","candidate","stat","isDirectory","pathDirname","lastRebuildJSONFilename","currentVersions","platform","process","arch","versions","currentVersionsJSON","JSON","stringify","recordLastRebuildVersions","pkgDir","writeFile","versionsAreCompatible","parse","isSubtreeOf","a","b","aType","bType","aVer","bVer","major","minor","rebuildVersionsAreCompatible","pkgPath","versionFile","rebuildIfNonPortable","dirsToRebuild","readdir","isPortable","tempDir","tempNodeModules","mkdir_p","tempPkgDirs","tempPkgDir","pathBasename","copyNpmPackageWithSymlinkedNodeModules","rebuildResult","runNpmCommand","success","error","actualNodeModulesDir","actualNodeModulesStat","statOrNull","symlinkNodeModulesDir","renameDirAlmostAtomically","fromPkgDir","toPkgDir","needToHandleNodeModules","item","cp_r","nodeModulesFromPath","nodeModulesToPath","mkdir","depPath","absDepFromPath","absDepToPath","symlink","portableCache","portableVersion","lstat","endsWith","pkgJsonPath","pkgJsonStat","canCache","portableFile","result","allowSyntaxError","unlink","pkgJson","hasBuildScript","scripts","preinstall","install","postinstall","every","itemName","startsWith","dependenciesArePortable","ok","makeNewPackageNpmDir","join","Error","oldNodeVersion","readFile","currentNodeCompatibilityVersion","installedDependenciesTree","getInstalledDependenciesTree","shrinkwrappedDependenciesTree","getShrinkwrappedDependenciesTree","npmTree","minInstalledTree","minimizeDependencyTree","minShrinkwrapTree","logUpdateDependencies","preservedShrinkwrap","installNpmDependencies","newShrinkwrapFile","newPackageJsonFile","installFromShrinkwrap","completeNpmDirectory","subsetTree","supersetTree","predicate","isObject","value","key","isFunction","packageJsonExisted","installNpmModule","shrinkwrap","copyFile","createReadme","createNodeVersion","replace","npmUserConfigFile","__dirname","args","cwd","getEnv","devBundleDir","getDevBundle","isWindows","npmPath","convertToOSPath","commandToRun","env","ComSpec","_printNpmCalls","stdout","write","devBundle","then","opts","maxBuffer","npm_config_userconfig","Promise","execFile","err","stderr","message","await","ls","contents","sort","assign","info","from","_from","isNpmUrl","resolved","_resolved","integrity","_integrity","lockfileVersion","canonicalVersion","depObj","treeToDependencies","tree","object","map","properties","getInstalledDependencies","getShrinkwrappedDependencies","moduleDoesResolve","dep","installArg","pkgNotFound","quotemeta","versionNotFound","match","RegExp","pathsWithColons","findPathsWithRegex","firstTen","slice","packageLockJsonPath","minimizeModule","isUrlFromRegistry","minimized","subModule","newTopLevelDependencies","url","NCR","NPM_CONFIG_REGISTRY","log"],"mappings":"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","file":"tools/isobuild/meteor-npm.js.map","sourcesContent":["/// Implements the process of managing a package's .npm directory,\n/// in which we call `npm install` to install npm dependencies,\n/// and a variety of related commands. Notably, we use `npm shrinkwrap`\n/// to ensure we get consistent versions of npm sub-dependencies.\n\nvar assert = require('assert');\nvar cleanup = require('../tool-env/cleanup.js');\nvar fs = require('fs');\nvar files = require('../fs/files.js');\nvar os = require('os');\nvar _ = require('underscore');\nvar httpHelpers = require('../utils/http-helpers.js');\nvar buildmessage = require('../utils/buildmessage.js');\nvar utils = require('../utils/utils.js');\nvar runLog = require('../runners/run-log.js');\nvar Profile = require('../tool-env/profile.js').Profile;\nimport { version as npmVersion } from 'npm';\nimport { execFileAsync } from \"../utils/processes.js\";\nimport {\n  get as getRebuildArgs\n} from \"../static-assets/server/npm-rebuild-args.js\";\nimport {\n  convert as convertColonsInPath\n} from \"../utils/colon-converter.js\";\n\nimport { wrap as wrapOptimistic } from \"optimism\";\nimport {\n  dirtyNodeModulesDirectory,\n  optimisticLStat,\n  optimisticStatOrNull,\n  optimisticReadJsonOrNull,\n  optimisticReaddir,\n} from \"../fs/optimistic.js\";\n\nvar meteorNpm = exports;\n\n// Expose the version of npm in use from the dev bundle.\nmeteorNpm.npmVersion = npmVersion;\n\n// if a user exits meteor while we're trying to create a .npm\n// directory, we will have temporary directories that we clean up\nvar tmpDirs = [];\ncleanup.onExit(function () {\n  _.each(tmpDirs, function (dir) {\n    if (files.exists(dir)) {\n      files.rm_recursive(dir);\n    }\n  });\n});\n\n// Exception used internally to gracefully bail out of a npm run if\n// something goes wrong\nvar NpmFailure = function () {};\n\n// Creates a temporary directory in which the new contents of the\n// package's .npm directory will be assembled. If all is successful,\n// renames that directory back to .npm. Returns true if there are NPM\n// dependencies and they are installed without error.\n//\n// @param npmDependencies {Object} dependencies that should be\n//     installed, eg {tar: '0.1.6', gcd: '0.0.0'}. If falsey or empty,\n//     will remove the .npm directory instead.\nmeteorNpm.updateDependencies = function (packageName,\n                                         packageNpmDir,\n                                         npmDependencies,\n                                         quiet) {\n  // we make sure to put it beside the original package dir so that\n  // we can then atomically rename it. we also make sure to\n  // randomize the name, in case we're bundling this package\n  // multiple times in parallel.\n  var newPackageNpmDir =\n    convertColonsInPath(packageNpmDir) + '-new-' + utils.randomToken();\n\n  if (! npmDependencies || _.isEmpty(npmDependencies)) {\n    // No NPM dependencies? Delete the .npm directory if it exists (because,\n    // eg, we used to have NPM dependencies but don't any more).  We'd like to\n    // do this in as atomic a way as possible in case multiple meteor\n    // instances are trying to make this update in parallel, so we rename the\n    // directory to something before doing the rm -rf.\n    try {\n      files.rename(packageNpmDir, newPackageNpmDir);\n    } catch (e) {\n      if (e.code !== 'ENOENT') {\n        throw e;\n      }\n      // It didn't exist, which is exactly what we wanted.\n      return false;\n    }\n    files.rm_recursive(newPackageNpmDir);\n    return false;\n  }\n\n  try {\n    // v0.6.0 had a bug that could cause .npm directories to be\n    // created without npm-shrinkwrap.json\n    // (https://github.com/meteor/meteor/pull/927). Running your app\n    // in that state causes consistent \"Corrupted .npm directory\"\n    // errors.\n    //\n    // If you've reached that state, delete the empty directory and\n    // proceed.\n    if (files.exists(packageNpmDir) &&\n        ! files.exists(files.pathJoin(packageNpmDir, 'npm-shrinkwrap.json'))) {\n      files.rm_recursive(packageNpmDir);\n    }\n\n    if (files.exists(packageNpmDir)) {\n      // we already nave a .npm directory. update it appropriately with some\n      // ceremony involving:\n      // `npm install`, `npm install name@version`, `npm shrinkwrap`\n      updateExistingNpmDirectory(\n        packageName, newPackageNpmDir, packageNpmDir, npmDependencies, quiet);\n    } else {\n      // create a fresh .npm directory with `npm install\n      // name@version` and `npm shrinkwrap`\n      createFreshNpmDirectory(\n        packageName, newPackageNpmDir, packageNpmDir, npmDependencies, quiet);\n    }\n  } catch (e) {\n    if (e instanceof NpmFailure) {\n      // Something happened that was out of our control, but wasn't\n      // exactly unexpected (eg, no such npm package, no internet\n      // connection). Handle it gracefully.\n      return false;\n    }\n\n    // Some other exception -- let it propagate.\n    throw e;\n  } finally {\n    if (files.exists(newPackageNpmDir)) {\n      files.rm_recursive(newPackageNpmDir);\n    }\n    tmpDirs = _.without(tmpDirs, newPackageNpmDir);\n  }\n\n  return true;\n};\n\n// Returns a flattened dictionary of npm package names used in production,\n// or false if there is no package.json file in the parent directory.\nexport const getProdPackageNames = wrapOptimistic(nodeModulesDir => {\n  const names = Object.create(null);\n  const dirs = Object.create(null);\n  const nodeModulesDirStack = [];\n\n  // Returns true iff dir is a package directory.\n  function walk(dir) {\n    const packageJsonPath = files.pathJoin(dir, \"package.json\");\n    const packageJsonStat = optimisticStatOrNull(packageJsonPath);\n\n    if (packageJsonStat &&\n        packageJsonStat.isFile()) {\n      const pkg = optimisticReadJsonOrNull(packageJsonPath);\n      const nodeModulesDir = files.pathJoin(dir, \"node_modules\");\n      nodeModulesDirStack.push(nodeModulesDir);\n\n      // Scan all dependencies except pkg.devDependencies.\n      scanDeps(pkg.dependencies);\n      scanDeps(pkg.peerDependencies);\n      scanDeps(pkg.optionalDependencies);\n      scanDeps(pkg.bundledDependencies);\n      // This typo is also honored.\n      scanDeps(pkg.bundleDependencies);\n\n      assert.strictEqual(\n        nodeModulesDirStack.pop(),\n        nodeModulesDir\n      );\n\n      return true;\n    }\n\n    return false;\n  }\n\n  function scanDeps(deps) {\n    if (! deps) {\n      return;\n    }\n\n    Object.keys(deps).forEach(name => {\n      const resDir = resolve(name);\n      if (! resDir || _.has(dirs, resDir)) {\n        return;\n      }\n\n      // Record that we've seen this directory so that we don't try to\n      // walk it again.\n      dirs[resDir] = name;\n\n      if (walk(resDir)) {\n        // If resDir is indeed a package directory, record the package\n        // name in the set of production names.\n        names[name] = true;\n      }\n    });\n  }\n\n  function resolve(name) {\n    for (let i = nodeModulesDirStack.length - 1; i >= 0; --i) {\n      const nodeModulesDir = nodeModulesDirStack[i];\n      const candidate = files.pathJoin(nodeModulesDir, name);\n      const stat = optimisticStatOrNull(candidate);\n      if (stat && stat.isDirectory()) {\n        return candidate;\n      }\n    }\n  }\n\n  // If the top-level nodeModulesDir is not contained by a package\n  // directory with a package.json file, then we return false to indicate\n  // that we don't know or care which packages are production-specific.\n  // Concretely, this means your app needs to have a package.json file if\n  // you want any npm packages to be excluded in production.\n  return walk(files.pathDirname(nodeModulesDir)) && names;\n});\n\nconst lastRebuildJSONFilename = \".meteor-last-rebuild-version.json\";\n\nconst currentVersions = {\n  platform: process.platform,\n  arch: process.arch,\n  versions: {...process.versions},\n};\n\nconst currentVersionsJSON =\n  JSON.stringify(currentVersions, null, 2) + \"\\n\";\n\nfunction recordLastRebuildVersions(pkgDir) {\n  // Record the current process.{platform,arch,versions} so that we can\n  // avoid copying/rebuilding/renaming next time.\n  files.writeFile(\n    files.pathJoin(pkgDir, lastRebuildJSONFilename),\n    currentVersionsJSON,\n    \"utf8\"\n  );\n}\n\n// Returns true iff isSubtreeOf(currentVersions, versions), allowing\n// valid semantic versions to differ in their patch versions.\nfunction versionsAreCompatible(versions) {\n  import { parse } from \"semver\";\n\n  return isSubtreeOf(currentVersions, versions, (a, b) => {\n    // Technically already handled by isSubtreeOf, but doesn't hurt.\n    if (a === b) {\n      return true;\n    }\n\n    if (! a || ! b) {\n      return false;\n    }\n\n    const aType = typeof a;\n    const bType = typeof b;\n\n    if (aType !== bType) {\n      return false;\n    }\n\n    if (aType === \"string\") {\n      const aVer = parse(a);\n      const bVer = parse(b);\n      return aVer && bVer &&\n        aVer.major === bVer.major &&\n        aVer.minor === bVer.minor;\n    }\n  });\n}\n\nfunction rebuildVersionsAreCompatible(pkgPath) {\n  const versionFile =\n    files.pathJoin(pkgPath, lastRebuildJSONFilename);\n\n  return versionsAreCompatible(\n    optimisticReadJsonOrNull(versionFile));\n}\n\n// Rebuilds any binary dependencies in the given node_modules directory,\n// and returns true iff anything was rebuilt.\nmeteorNpm.rebuildIfNonPortable =\nProfile(\"meteorNpm.rebuildIfNonPortable\", function (nodeModulesDir) {\n  const dirsToRebuild = [];\n\n  files.readdir(nodeModulesDir).forEach(function (pkg) {\n    const pkgPath = files.pathJoin(nodeModulesDir, pkg);\n\n    if (isPortable(pkgPath)) {\n      return;\n    }\n\n    if (rebuildVersionsAreCompatible(pkgPath)) {\n      return;\n    }\n\n    dirsToRebuild.push(pkgPath);\n  });\n\n  if (dirsToRebuild.length === 0) {\n    return false;\n  }\n\n  const tempDir = files.pathJoin(\n    nodeModulesDir,\n    \".temp-\" + utils.randomToken()\n  );\n\n  // There's a chance the basename of the original nodeModulesDir isn't\n  // actually \"node_modules\", which will confuse the `npm rebuild`\n  // command, but fortunately we can ensure this temporary directory has\n  // exactly that basename.\n  const tempNodeModules = files.pathJoin(tempDir, \"node_modules\");\n  files.mkdir_p(tempNodeModules);\n\n  // Map from original package directory paths to temporary package\n  // directory paths.\n  const tempPkgDirs = {};\n\n  dirsToRebuild.forEach(function (pkgPath) {\n    const tempPkgDir = tempPkgDirs[pkgPath] = files.pathJoin(\n      tempNodeModules,\n      files.pathBasename(pkgPath)\n    );\n\n    // Copy the package directory instead of renaming it, so that the\n    // original package will be left untouched if the rebuild fails. We\n    // could just run files.cp_r(pkgPath, tempPkgDir) here, except that we\n    // want to handle nested node_modules directories specially.\n    copyNpmPackageWithSymlinkedNodeModules(pkgPath, tempPkgDir);\n\n    // Record the current process.versions so that we can avoid\n    // copying/rebuilding/renaming next time.\n    recordLastRebuildVersions(tempPkgDir);\n  });\n\n  // The `npm rebuild` command must be run in the parent directory of the\n  // relevant node_modules directory, which in this case is tempDir.\n  const rebuildResult = runNpmCommand(getRebuildArgs(), tempDir);\n  if (! rebuildResult.success) {\n    buildmessage.error(rebuildResult.error);\n    files.rm_recursive(tempDir);\n    return false;\n  }\n\n  dirtyNodeModulesDirectory(nodeModulesDir);\n\n  // If the `npm rebuild` command succeeded, overwrite the original\n  // package directories with the rebuilt package directories.\n  dirsToRebuild.forEach(function (pkgPath) {\n    const actualNodeModulesDir =\n      files.pathJoin(pkgPath, \"node_modules\");\n\n    const actualNodeModulesStat =\n      files.statOrNull(actualNodeModulesDir);\n\n    if (actualNodeModulesStat &&\n        actualNodeModulesStat.isDirectory()) {\n      // If the original package had a node_modules directory, move it\n      // into the temporary package directory, overwriting the one created\n      // by copyNpmPackageWithSymlinkedNodeModules (which contains only\n      // symlinks), so that when we rename the temporary directory back to\n      // the original directory below, we'll end up with a node_modules\n      // directory that contains real packages rather than symlinks.\n\n      const symlinkNodeModulesDir =\n        files.pathJoin(tempPkgDirs[pkgPath], \"node_modules\");\n\n      files.renameDirAlmostAtomically(\n        actualNodeModulesDir,\n        symlinkNodeModulesDir\n      );\n    }\n\n    files.renameDirAlmostAtomically(tempPkgDirs[pkgPath], pkgPath);\n  });\n\n  files.rm_recursive(tempDir);\n\n  return true;\n});\n\n// Copy an npm package directory to another location, but attempt to\n// symlink all of its node_modules rather than recursively copying them,\n// which potentially saves a lot of time.\nfunction copyNpmPackageWithSymlinkedNodeModules(fromPkgDir, toPkgDir) {\n  files.mkdir_p(toPkgDir);\n\n  let needToHandleNodeModules = false;\n\n  files.readdir(fromPkgDir).forEach(item => {\n    if (item === \"node_modules\") {\n      // We'll link or copy node_modules in a follow-up step.\n      needToHandleNodeModules = true;\n      return;\n    }\n\n    files.cp_r(\n      files.pathJoin(fromPkgDir, item),\n      files.pathJoin(toPkgDir, item)\n    );\n  });\n\n  if (! needToHandleNodeModules) {\n    return;\n  }\n\n  const nodeModulesFromPath = files.pathJoin(fromPkgDir, \"node_modules\");\n  const nodeModulesToPath = files.pathJoin(toPkgDir, \"node_modules\");\n\n  files.mkdir(nodeModulesToPath);\n\n  files.readdir(nodeModulesFromPath).forEach(depPath => {\n    if (depPath === \".bin\") {\n      // Avoid copying node_modules/.bin because commands like\n      // .bin/node-gyp and .bin/node-pre-gyp tend to cause problems.\n      return;\n    }\n\n    const absDepFromPath = files.pathJoin(nodeModulesFromPath, depPath);\n\n    if (! files.stat(absDepFromPath).isDirectory()) {\n      // Only copy package directories, even though there might be other\n      // kinds of files in node_modules.\n      return;\n    }\n\n    const absDepToPath = files.pathJoin(nodeModulesToPath, depPath);\n\n    // Try to symlink node_modules dependencies if possible (faster),\n    // and fall back to a recursive copy otherwise.\n    try {\n      files.symlink(absDepFromPath, absDepToPath, \"junction\");\n    } catch (e) {\n      files.cp_r(absDepFromPath, absDepToPath);\n    }\n  });\n}\n\nconst portableCache = Object.create(null);\n\n// Increment this version to trigger the full portability check again.\nconst portableVersion = 2;\n\nconst isPortable = Profile(\"meteorNpm.isPortable\", dir => {\n  const lstat = optimisticLStat(dir);\n  if (! lstat.isDirectory()) {\n    // Non-directory files are portable unless they end with .node.\n    return ! dir.endsWith(\".node\");\n  }\n\n  const pkgJsonPath = files.pathJoin(dir, \"package.json\");\n  const pkgJsonStat = optimisticStatOrNull(pkgJsonPath);\n  const canCache = pkgJsonStat && pkgJsonStat.isFile();\n  const portableFile = files.pathJoin(\n    dir, \".meteor-portable-\" + portableVersion + \".json\");\n\n  if (canCache) {\n    // Cache previous results by writing a boolean value to a hidden file\n    // called .meteor-portable. Although it's tempting to write this file\n    // once for the whole node_modules directory, it's important that we\n    // put .meteor-portable files only in the individual top-level package\n    // directories, so that they will get cleared away the next time those\n    // packages are (re)installed.\n    const result = _.has(portableCache, portableFile)\n      ? portableCache[portableFile]\n      : optimisticReadJsonOrNull(portableFile, {\n          // Make optimisticReadJsonOrNull return null if there's a\n          // SyntaxError when parsing the .meteor-portable file.\n          allowSyntaxError: true\n        });\n\n    if (result) {\n      return result;\n    }\n\n  } else {\n    // Clean up any .meteor-portable files we mistakenly wrote in\n    // directories that do not contain package.json files. #7296\n    fs.unlink(portableFile, error => {});\n  }\n\n  const pkgJson = canCache && optimisticReadJsonOrNull(pkgJsonPath, {\n    // A syntactically incorrect `package.json` isn't likely to have other\n    // effects since the npm itself likely won't install but the developer has\n    // no control over that happening so we should allow this.\n    allowSyntaxError: true\n  });\n\n  const hasBuildScript =\n    pkgJson &&\n    pkgJson.scripts &&\n    (pkgJson.scripts.preinstall ||\n     pkgJson.scripts.install ||\n     pkgJson.scripts.postinstall);\n\n  const result = hasBuildScript\n    ? false // Build scripts may not be portable.\n    : optimisticReaddir(dir).every(\n      // Ignore files that start with a \".\", such as .bin directories.\n      itemName => itemName.startsWith(\".\") ||\n        isPortable(files.pathJoin(dir, itemName)));\n\n  if (canCache) {\n    // Write the .meteor-portable file asynchronously, and don't worry\n    // if it fails, e.g. because the file system is read-only (#6591).\n    // Failing to write the file only means more work next time.\n    fs.writeFile(\n      portableFile,\n      JSON.stringify(result) + \"\\n\",\n      error => {\n        // Once the asynchronous write finishes (successful or not), we no\n        // longer need to cache the written value in memory.\n        delete portableCache[portableFile];\n      },\n    );\n\n    // Cache the result immediately in memory so that the asynchronous\n    // write won't confuse synchronous optimisticReadJsonOrNull calls.\n    portableCache[portableFile] = result;\n  }\n\n  return result;\n});\n\n// Return true if all of a package's npm dependencies are portable\n// (that is, if the node_modules can be copied anywhere and we'd\n// expect it to work, rather than containing native extensions that\n// were built just for our architecture), else\n// false. updateDependencies should first be used to bring\n// nodeModulesDir up to date.\nmeteorNpm.dependenciesArePortable = function (nodeModulesDir) {\n  // We use a simple heuristic: we check to see if a package (or any\n  // of its transitive dependencies) contains any *.node files. .node\n  // is the extension that signals to Node that it should load a file\n  // as a shared object rather than as JavaScript, so this should work\n  // in the vast majority of cases.\n\n  assert.ok(\n    files.pathBasename(nodeModulesDir).startsWith(\"node_modules\"),\n    \"Bad node_modules directory: \" + nodeModulesDir,\n  );\n\n  // Only check/write .meteor-portable files in each of the top-level\n  // package directories.\n  return isPortable(nodeModulesDir);\n};\n\nvar makeNewPackageNpmDir = function (newPackageNpmDir) {\n  // keep track so that we can remove them on process exit\n  tmpDirs.push(newPackageNpmDir);\n  files.mkdir_p(newPackageNpmDir);\n\n  // create node_modules -- prevent npm install from installing\n  // to an existing node_modules dir higher up in the filesystem\n  files.mkdir(files.pathJoin(newPackageNpmDir, 'node_modules'));\n\n  // create .gitignore -- node_modules shouldn't be in git since we\n  // recreate it as needed by using `npm install`. since we use `npm\n  // shrinkwrap` we're guaranteed to have the same version installed\n  // each time.\n  files.writeFile(\n    files.pathJoin(newPackageNpmDir, '.gitignore'),\n    ['node_modules',\n     ''/*git diff complains without trailing newline*/].join('\\n'));\n};\n\nvar updateExistingNpmDirectory = function (packageName, newPackageNpmDir,\n                                           packageNpmDir, npmDependencies,\n                                           quiet) {\n  // sanity check on contents of .npm directory\n  if (!files.stat(packageNpmDir).isDirectory()) {\n    throw new Error(\"Corrupted .npm directory -- should be a directory: \" +\n                    packageNpmDir);\n  }\n  if (!files.exists(files.pathJoin(packageNpmDir, 'npm-shrinkwrap.json'))) {\n    throw new Error(\n      \"Corrupted .npm directory -- can't find npm-shrinkwrap.json in \" +\n        packageNpmDir);\n  }\n\n  // We need to rebuild all node modules when the Node version\n  // changes, in case there are some binary ones. Technically this is\n  // racey, but it shouldn't fail very often.\n  var nodeModulesDir = files.pathJoin(packageNpmDir, 'node_modules');\n  if (files.exists(nodeModulesDir)) {\n    var oldNodeVersion;\n    try {\n      oldNodeVersion = files.readFile(\n        files.pathJoin(packageNpmDir, 'node_modules', '.node_version'), 'utf8');\n    } catch (e) {\n      if (e.code !== 'ENOENT') {\n        throw e;\n      }\n      // Use the Node version from the last release where we didn't\n      // drop this file.\n      oldNodeVersion = 'v0.8.24';\n    }\n\n    if (oldNodeVersion !== currentNodeCompatibilityVersion()) {\n      files.rm_recursive(nodeModulesDir);\n    }\n  }\n\n  // Make sure node_modules is present (fix for #1761). Prevents npm install\n  // from installing to an existing node_modules dir higher up in the\n  // filesystem.  node_modules may be absent due to a change in Node version or\n  // when `meteor add`ing a cloned package for the first time (node_modules is\n  // excluded by .gitignore)\n  if (! files.exists(nodeModulesDir)) {\n    files.mkdir(nodeModulesDir);\n  }\n\n  var installedDependenciesTree = getInstalledDependenciesTree(packageNpmDir);\n  var shrinkwrappedDependenciesTree =\n    getShrinkwrappedDependenciesTree(packageNpmDir);\n\n  const npmTree = { dependencies: {} };\n  _.each(npmDependencies, (version, name) => {\n    npmTree.dependencies[name] = { version };\n  });\n\n  const minInstalledTree =\n    minimizeDependencyTree(installedDependenciesTree);\n  const minShrinkwrapTree =\n    minimizeDependencyTree(shrinkwrappedDependenciesTree);\n\n  if (isSubtreeOf(npmTree, minInstalledTree) &&\n      isSubtreeOf(minShrinkwrapTree, minInstalledTree)) {\n    return;\n  }\n\n  if (! quiet) {\n    logUpdateDependencies(packageName, npmDependencies);\n  }\n\n  makeNewPackageNpmDir(newPackageNpmDir);\n\n  let preservedShrinkwrap;\n\n  if (_.isEmpty(npmDependencies)) {\n    // If there are no npmDependencies, make sure nothing is installed.\n    preservedShrinkwrap = { dependencies: {} };\n\n  } else if (isSubtreeOf(npmTree, minShrinkwrapTree)) {\n    // If the top-level npm dependencies are already encompassed by the\n    // npm-shrinkwrap.json file, then reuse that file.\n    preservedShrinkwrap = shrinkwrappedDependenciesTree;\n\n  } else {\n    // Otherwise install npmTree.dependencies as if we were creating a new\n    // .npm/package directory, and leave preservedShrinkwrap empty.\n    installNpmDependencies(npmDependencies, newPackageNpmDir);\n\n    // Note: as of npm@4.0.0, npm-shrinkwrap.json files are regarded as\n    // \"canonical,\" meaning `npm install` (without a package argument)\n    // will only install dependencies mentioned in npm-shrinkwrap.json.\n    // That's why we can't just update installedDependenciesTree to\n    // include npmTree.dependencies and hope for the best, because if the\n    // new versions of the required top-level packages have any additional\n    // transitive dependencies, those dependencies will not be installed\n    // unless previously mentioned in npm-shrinkwrap.json. Reference:\n    // https://github.com/npm/npm/blob/latest/CHANGELOG.md#no-more-partial-shrinkwraps-breaking\n  }\n\n  if (! _.isEmpty(preservedShrinkwrap &&\n                  preservedShrinkwrap.dependencies)) {\n    const newShrinkwrapFile = files.pathJoin(\n      newPackageNpmDir,\n      'npm-shrinkwrap.json'\n    );\n\n    // There are some unchanged packages here. Install from shrinkwrap.\n    files.writeFile(\n      newShrinkwrapFile,\n      JSON.stringify(preservedShrinkwrap, null, 2)\n    );\n\n    const newPackageJsonFile = files.pathJoin(\n      newPackageNpmDir,\n      \"package.json\"\n    );\n\n    // We have to write out a minimal package.json file, else the results\n    // of installFromShrinkwrap may be incomplete in npm@5.\n    files.writeFile(\n      newPackageJsonFile,\n      JSON.stringify({\n        dependencies: npmDependencies\n      }, null, 2)\n    );\n\n    // `npm install`\n    installFromShrinkwrap(newPackageNpmDir);\n\n    files.unlink(newShrinkwrapFile);\n    files.unlink(newPackageJsonFile);\n  }\n\n  completeNpmDirectory(packageName, newPackageNpmDir, packageNpmDir,\n                       npmDependencies);\n};\n\nfunction isSubtreeOf(subsetTree, supersetTree, predicate) {\n  if (subsetTree === supersetTree) {\n    return true;\n  }\n\n  if (_.isObject(subsetTree)) {\n    return _.isObject(supersetTree) &&\n      _.every(subsetTree, (value, key) => {\n        return isSubtreeOf(value, supersetTree[key], predicate);\n      });\n  }\n\n  if (_.isFunction(predicate)) {\n    const result = predicate(subsetTree, supersetTree);\n    if (typeof result === \"boolean\") {\n      return result;\n    }\n  }\n\n  return false;\n}\n\nvar createFreshNpmDirectory = function (packageName, newPackageNpmDir,\n                                        packageNpmDir, npmDependencies, quiet) {\n  if (! quiet) {\n    logUpdateDependencies(packageName, npmDependencies);\n  }\n\n  makeNewPackageNpmDir(newPackageNpmDir);\n\n  installNpmDependencies(npmDependencies, newPackageNpmDir);\n\n  completeNpmDirectory(packageName, newPackageNpmDir, packageNpmDir,\n                       npmDependencies);\n};\n\nfunction installNpmDependencies(dependencies, dir) {\n  const packageJsonPath = files.pathJoin(dir, \"package.json\");\n  const packageJsonExisted = files.exists(packageJsonPath);\n\n  files.writeFile(\n    packageJsonPath,\n    JSON.stringify({ dependencies }, null, 2)\n  );\n\n  try {\n    Object.keys(dependencies).forEach(name => {\n      const version = dependencies[name];\n      installNpmModule(name, version, dir);\n    });\n  } finally {\n    if (! packageJsonExisted) {\n      files.unlink(packageJsonPath);\n    }\n  }\n}\n\n// Shared code for updateExistingNpmDirectory and createFreshNpmDirectory.\nfunction completeNpmDirectory(\n  packageName,\n  newPackageNpmDir,\n  packageNpmDir,\n  npmDependencies,\n) {\n  // Create a shrinkwrap file.\n  shrinkwrap(newPackageNpmDir);\n\n  // And stow a copy of npm-shrinkwrap too.\n  files.copyFile(\n    files.pathJoin(newPackageNpmDir, 'npm-shrinkwrap.json'),\n    files.pathJoin(newPackageNpmDir, 'node_modules', '.npm-shrinkwrap.json')\n  );\n\n  createReadme(newPackageNpmDir);\n  createNodeVersion(newPackageNpmDir);\n  files.renameDirAlmostAtomically(newPackageNpmDir, packageNpmDir);\n\n  dirtyNodeModulesDirectory(files.pathJoin(packageNpmDir, \"node_modules\"));\n}\n\nvar createReadme = function (newPackageNpmDir) {\n  // This file gets checked in to version control by users, so resist the\n  // temptation to make unnecessary tweaks to it.\n  files.writeFile(\n    files.pathJoin(newPackageNpmDir, 'README'),\n\"This directory and the files immediately inside it are automatically generated\\n\" +\n\"when you change this package's NPM dependencies. Commit the files in this\\n\" +\n\"directory (npm-shrinkwrap.json, .gitignore, and this README) to source control\\n\" +\n\"so that others run the same versions of sub-dependencies.\\n\" +\n\"\\n\" +\n\"You should NOT check in the node_modules directory that Meteor automatically\\n\" +\n\"creates; if you are using git, the .gitignore file tells git to ignore it.\\n\"\n  );\n};\n\nvar createNodeVersion = function (newPackageNpmDir) {\n  files.writeFile(\n    files.pathJoin(newPackageNpmDir, 'node_modules', '.node_version'),\n    currentNodeCompatibilityVersion());\n};\n\n// This value should change whenever we think that the Node C ABI has changed\n// (ie, when we need to be sure to reinstall npm packages because they might\n// have native components that need to be rebuilt). It does not need to change\n// for every patch release of Node! Notably, it needed to change between 0.8.*\n// and 0.10.*.  If Node does make a patch release of 0.10 that breaks\n// compatibility, you can just change this from \"0.10.*\" to \"0.10.35\" or\n// whatever.\nvar currentNodeCompatibilityVersion = function () {\n  var version = process.version;\n  version = version.replace(/\\.(\\d+)$/, '.*');\n  return version + '\\n';\n};\n\nconst npmUserConfigFile = files.pathJoin(\n  __dirname,\n  \"meteor-npm-userconfig\"\n);\n\nvar runNpmCommand = meteorNpm.runNpmCommand =\nProfile(\"meteorNpm.runNpmCommand\", function (args, cwd) {\n  import { getEnv } from \"../cli/dev-bundle-bin-helpers.js\";\n\n  const devBundleDir = files.getDevBundle();\n  const isWindows = process.platform === \"win32\";\n  const npmPath = files.convertToOSPath(files.pathJoin(\n    devBundleDir, \"bin\",\n    isWindows ? \"npm.cmd\" : \"npm\"\n  ));\n\n  // On Windows, `.cmd` and `.bat` files must be launched in a shell per:\n  // http://nodejs.org/api/child_process.html#child_process_spawning_bat_and_cmd_files_on_windows\n  //\n  // Additionally, the COMSPEC environment variable is meant to have the path to\n  // cmd.exe, but we'll use 'cmd.exe' if it's not set, in the same spirit as\n  // http://nodejs.org/api/child_process.html#child_process_shell_requirements.\n\n  let commandToRun = npmPath;\n  if (isWindows) {\n    args = ['/c', npmPath, ...args];\n    commandToRun = process.env.ComSpec || \"cmd.exe\";\n  }\n\n  if (meteorNpm._printNpmCalls) {\n    // only used by test-bundler.js\n    process.stdout.write('cd ' + cwd + ' && ' + commandToRun + ' ' +\n                         args.join(' ') + ' ...\\n');\n  }\n\n  return getEnv({\n    devBundle: devBundleDir\n  }).then(env => {\n    const opts = {\n      env: env,\n      maxBuffer: 10 * 1024 * 1024\n    };\n\n    if (cwd) {\n      opts.cwd = files.convertToOSPath(cwd);\n    }\n\n    // Make sure we don't honor any user-provided configuration files.\n    env.npm_config_userconfig = npmUserConfigFile;\n\n    return new Promise(function (resolve) {\n      require('child_process').execFile(\n        commandToRun, args, opts, function (err, stdout, stderr) {\n          if (meteorNpm._printNpmCalls) {\n            process.stdout.write(err ? 'failed\\n' : 'done\\n');\n          }\n\n          resolve({\n            success: ! err,\n            error: (err ? `${err.message}${stderr}` : stderr),\n            stdout: stdout,\n            stderr: stderr\n          });\n        }\n      );\n    }).await();\n\n  }).await();\n});\n\n// Gets a JSON object from `npm ls --json` (getInstalledDependenciesTree) or\n// `npm-shrinkwrap.json` (getShrinkwrappedDependenciesTree).\n//\n// @returns {Object} eg {\n//   \"name\": \"packages\",\n//   \"version\": \"0.0.0\",\n//   \"dependencies\": {\n//     \"sockjs\": {\n//       \"version\": \"0.3.4\",\n//       \"dependencies\": {\n//         \"node-uuid\": {\n//           \"version\": \"1.3.3\"\n//         }\n//       }\n//     }\n//   }\n// }\nfunction getInstalledDependenciesTree(dir) {\n  function ls(nodeModulesDir) {\n    let contents;\n    try {\n      contents = files.readdir(nodeModulesDir).sort();\n    } finally {\n      if (! contents) return;\n    }\n\n    const result = {};\n\n    contents.forEach(item => {\n      if (item.startsWith(\".\")) {\n        return;\n      }\n\n      const pkgDir = files.pathJoin(nodeModulesDir, item);\n      const pkgJsonPath = files.pathJoin(pkgDir, \"package.json\");\n\n      if (item.startsWith(\"@\")) {\n        Object.assign(result, ls(pkgDir));\n        return;\n      }\n\n      let pkg;\n      try {\n        pkg = JSON.parse(files.readFile(pkgJsonPath));\n      } finally {\n        if (! pkg) return;\n      }\n\n      const name = pkg.name || item;\n\n      const info = result[name] = {\n        version: pkg.version\n      };\n\n      const from = pkg._from || pkg.from;\n      if (from &&\n          utils.isNpmUrl(from) &&\n          ! utils.isNpmUrl(info.version)) {\n        info.version = from;\n      }\n\n      const resolved = pkg._resolved || pkg.resolved;\n      if (resolved && resolved !== info.version) {\n        info.resolved = resolved;\n      }\n\n      const integrity = pkg._integrity || pkg.integrity;\n      if (integrity) {\n        info.integrity = integrity;\n      }\n\n      const deps = ls(files.pathJoin(pkgDir, \"node_modules\"));\n      if (deps && ! _.isEmpty(deps)) {\n        info.dependencies = deps;\n      }\n    });\n\n    return result;\n  }\n\n  return {\n    lockfileVersion: 1,\n    dependencies: ls(files.pathJoin(dir, \"node_modules\"))\n  };\n}\n\nfunction getShrinkwrappedDependenciesTree(dir) {\n  const shrinkwrap = JSON.parse(files.readFile(\n    files.pathJoin(dir, 'npm-shrinkwrap.json')\n  ));\n  shrinkwrap.lockfileVersion = 1;\n  return shrinkwrap;\n};\n\n// Maps a \"dependency object\" (a thing you find in `npm ls --json` or\n// npm-shrinkwrap.json with keys like \"version\" and \"from\") to the\n// canonical version that matches what users put in the `Npm.depends`\n// clause.  ie, either the version or the tarball URL.\n//\n// If more logic is added here, it should probably go in minimizeModule too.\nvar canonicalVersion = function (depObj) {\n  if (utils.isNpmUrl(depObj.from)) {\n    return depObj.from;\n  } else {\n    return depObj.version;\n  }\n};\n\n// map the structure returned from `npm ls` or shrinkwrap.json into\n// the structure of npmDependencies (e.g. {gcd: '0.0.0'}), so that\n// they can be diffed. This only returns top-level dependencies.\nvar treeToDependencies = function (tree) {\n  return _.object(\n    _.map(\n      tree.dependencies, function (properties, name) {\n        return [name, canonicalVersion(properties)];\n      }));\n};\n\nvar getInstalledDependencies = function (dir) {\n  return treeToDependencies(getInstalledDependenciesTree(dir));\n};\n\n// (appears to not be called)\nvar getShrinkwrappedDependencies = function (dir) {\n  return treeToDependencies(getShrinkwrappedDependenciesTree(dir));\n};\n\nconst moduleDoesResolve = meteorNpm.moduleDoesResolve = (dep) => {\n  try {\n    require.resolve(dep);\n  } catch (e) {\n    if (e.code !== 'MODULE_NOT_FOUND') {\n      throw e;\n    }\n\n    return false;\n  }\n\n  return true;\n};\n\nconst installNpmModule = meteorNpm.installNpmModule = (name, version, dir) => {\n  const installArg = utils.isNpmUrl(version)\n    ? version\n    : `${name}@${version}`;\n\n  // We don't use npm.commands.install since we couldn't figure out\n  // how to silence all output (specifically the installed tree which\n  // is printed out with `console.log`)\n  const result = runNpmCommand([\"install\", installArg], dir);\n\n  if (! result.success) {\n    const pkgNotFound =\n      `404 Not Found: ${utils.quotemeta(name)}@${utils.quotemeta(version)}`;\n\n    const versionNotFound =\n      \"No matching version found for \" +\n      `${utils.quotemeta(name)}@${utils.quotemeta(version)}`;\n\n    if (result.stderr.match(new RegExp(pkgNotFound))) {\n      buildmessage.error(\n        `there is no npm package named '${name}' in the npm registry`);\n    } else if (result.stderr.match(new RegExp(versionNotFound))) {\n      buildmessage.error(\n        `${name} version ${version} is not available in the npm registry`);\n    } else {\n      buildmessage.error(\n        `couldn\\'t install npm package ${name}@${version}: ${result.error}`);\n    }\n\n    // Recover by returning false from updateDependencies\n    throw new NpmFailure;\n  }\n\n  const pkgDir = files.pathJoin(dir, \"node_modules\", name);\n  if (! isPortable(pkgDir)) {\n    recordLastRebuildVersions(pkgDir);\n  }\n\n  if (process.platform !== \"win32\") {\n    // If we are on a unixy file system, we should not build a package that\n    // can't be used on Windows.\n\n    var pathsWithColons = files.findPathsWithRegex(\".\", new RegExp(\":\"),\n      { cwd: files.pathJoin(dir, \"node_modules\") });\n\n    if (pathsWithColons.length) {\n      var firstTen = pathsWithColons.slice(0, 10);\n      if (pathsWithColons.length > 10) {\n        firstTen.push(\"... \" + (pathsWithColons.length - 10) +\n          \" paths omitted.\");\n      }\n\n      buildmessage.error(\n\"Some filenames in your package have invalid characters.\\n\" +\n\"The following file paths in the NPM module '\" + name + \"' have colons, ':', which won't work on Windows:\\n\" +\nfirstTen.join(\"\\n\"));\n\n      throw new NpmFailure;\n    }\n  }\n};\n\nvar installFromShrinkwrap = function (dir) {\n  if (! files.exists(files.pathJoin(dir, \"npm-shrinkwrap.json\"))) {\n    throw new Error(\n      \"Can't call `npm install` without a npm-shrinkwrap.json file present\");\n  }\n\n  // `npm install`, which reads npm-shrinkwrap.json.\n  var result = runNpmCommand([\"install\"], dir);\n\n  if (! result.success) {\n    buildmessage.error(\n      \"couldn't install npm packages from npm-shrinkwrap: \" +\n        result.error\n    );\n\n    // Recover by returning false from updateDependencies\n    throw new NpmFailure;\n  }\n\n  const nodeModulesDir = files.pathJoin(dir, \"node_modules\");\n  files.readdir(nodeModulesDir).forEach(function (name) {\n    const pkgDir = files.pathJoin(nodeModulesDir, name);\n    if (! isPortable(pkgDir, true)) {\n      recordLastRebuildVersions(pkgDir);\n    }\n  });\n};\n\n// `npm shrinkwrap`\nfunction shrinkwrap(dir) {\n  const tree = getInstalledDependenciesTree(dir);\n\n  files.writeFile(\n    files.pathJoin(dir, \"npm-shrinkwrap.json\"),\n    JSON.stringify(tree, null, 2) + \"\\n\"\n  );\n\n  const packageLockJsonPath =\n    files.pathJoin(dir, \"package-lock.json\");\n\n  // The normal `npm shrinkwrap` commands renames any package-lock.json\n  // file to npm-shrinkwrap.json, so this function should have the same\n  // side effect (i.e., removing package-lock.json if it exists).\n  if (files.exists(packageLockJsonPath)) {\n    files.unlink(packageLockJsonPath);\n  }\n}\n\n// Reduces a dependency tree (as read from a just-made npm-shrinkwrap.json or\n// from npm ls --json) to just the versions we want. Returns an object that does\n// not share state with its input\nfunction minimizeDependencyTree(tree) {\n  function minimizeModule(module) {\n    var version;\n    if (module.resolved && ! isUrlFromRegistry(module.resolved)) {\n      version = module.resolved;\n    } else if (utils.isNpmUrl(module.from)) {\n      version = module.from;\n    } else {\n      version = module.version;\n    }\n    var minimized = {version: version};\n\n    if (module.dependencies) {\n      minimized.dependencies = {};\n      _.each(module.dependencies, function (subModule, name) {\n        minimized.dependencies[name] = minimizeModule(subModule);\n      });\n    }\n    return minimized;\n  }\n\n  var newTopLevelDependencies = {};\n  _.each(tree.dependencies, function (module, name) {\n    newTopLevelDependencies[name] = minimizeModule(module);\n  });\n  return {dependencies: newTopLevelDependencies};\n}\n\nfunction isUrlFromRegistry(url) {\n  if (url.match(/^https?:\\/\\/registry.npmjs.org\\//)) {\n    return true;\n  }\n  const NCR = process.env.NPM_CONFIG_REGISTRY;\n  return NCR && url.startsWith(NCR);\n}\n\nvar logUpdateDependencies = function (packageName, npmDependencies) {\n  runLog.log(packageName + ': updating npm dependencies -- ' +\n             _.keys(npmDependencies).join(', ') + '...');\n};\n"]}