{"version":3,"sources":["/tools/tool-env/install-git-hooks.js"],"names":["module","export","default","installGitHooks","files","watch","require","v","hookDestination","pathJoin","getCurrentToolsDir","hookSource","allPossibleHooks","METEOR_HOOK_SUFFIX","METEOR_HOOK_LINE_REGEX","exists","map","hookName","hookFile","sourceFile","meteorHookFile","removeMeteorInjectedHook","METEOR_HOOK_INJECTED_LINE","writeFile","encoding","mode","readFile","appendFile","unlink","err","code","replace"],"mappings":"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","file":"tools/tool-env/install-git-hooks.js.map","sourcesContent":["import files from '../fs/files.js';\n\nconst hookDestination =\n  files.pathJoin(files.getCurrentToolsDir(), '.git', 'hooks');\n\nconst hookSource =\n  files.pathJoin(files.getCurrentToolsDir(),\n    'scripts', 'admin', 'git-hooks');\n\nconst allPossibleHooks = [\n  'applypatch-msg',\n  'pre-applypatch',\n  'post-applypatch',\n  'pre-commit',\n  'prepare-commit-msg',\n  'commit-msg',\n  'post-commit',\n  'pre-rebase',\n  'post-checkout',\n  'post-merge',\n  'pre-receive',\n  'update',\n  'post-update',\n  'pre-auto-gc',\n  'post-rewrite',\n];\n\n// A suffix that we append to our hook scripts\nconst METEOR_HOOK_SUFFIX = '.meteor-hook';\n\n// Matches the whole line we inject into the user's hook\nconst METEOR_HOOK_LINE_REGEX = /.*meteor-hook.*/;\n\nexport default function installGitHooks() {\n\n  if (!files.exists(hookDestination)) {\n    // Don't do anything if the hook destination does not exist, eg.,\n    // we are not running from a git clone.\n    return;\n  }\n\n  allPossibleHooks.map((hookName) => {\n    const hookFile = files.pathJoin(hookDestination, hookName);\n    const sourceFile = files.pathJoin(hookSource, hookName);\n    const meteorHookFile = hookFile + METEOR_HOOK_SUFFIX;\n\n    if (!files.exists(sourceFile) && !files.exists(hookFile)) {\n      // Don't do anything if this hook isn't in either list\n      return;\n    }\n\n    if (!files.exists(sourceFile)) {\n      // If the user has this hook, but Meteor doesn't, make sure that we remove\n      // any hooks that we added previously\n      removeMeteorInjectedHook(hookFile);\n      return;\n    }\n\n    /* eslint-disable max-len */\n    const METEOR_HOOK_INJECTED_LINE = `exec \"$(dirname $0)/${hookName}${METEOR_HOOK_SUFFIX}\" # Inserted by Meteor tool\\n`;\n    /* eslint-enable */\n\n    if (!files.exists(hookFile)) {\n      // If the user doesn't have this hook, but we want to add it, just insert\n      // a new file and a line that calls it\n      files.writeFile(hookFile,\n        `#!/bin/sh\n${METEOR_HOOK_INJECTED_LINE}`,\n        { encoding: 'utf8', mode: 0o755 });\n\n      // Copy the hook from the scripts dir\n      files.writeFile(meteorHookFile, files.readFile(sourceFile),\n        { mode: 0o755 });\n      return;\n    }\n\n    // Now we have arrived at the case where the user already has a hook\n\n    // Has Meteor already installed a hook here? If not, add a line to the hook\n    if (!files.exists(meteorHookFile)) {\n      files.appendFile(hookFile, METEOR_HOOK_INJECTED_LINE);\n    }\n\n    // Copy the hook from the scripts dir again in case it updated\n    files.writeFile(meteorHookFile, files.readFile(sourceFile),\n      { mode: 0o755 });\n    return;\n  });\n}\n\nfunction removeMeteorInjectedHook(hookFile) {\n  // Remove the script added by Meteor\n  try {\n    files.unlink(hookFile + METEOR_HOOK_SUFFIX);\n  } catch (err) {\n    // Ignore errors about file not found\n    if (err.code !== 'ENOENT') {\n      throw err;\n    }\n  }\n\n  // Remove the line added to the file\n  files.writeFile(hookFile,\n    files.readFile(hookFile, 'utf8').replace(METEOR_HOOK_LINE_REGEX, ''),\n    'utf8');\n}\n"]}