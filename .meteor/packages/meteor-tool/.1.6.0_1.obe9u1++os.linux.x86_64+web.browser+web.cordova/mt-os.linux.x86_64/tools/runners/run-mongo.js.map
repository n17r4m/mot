{"version":3,"sources":["/tools/runners/run-mongo.js"],"names":["loadIsopackage","module","watch","require","v","files","utils","mongoExitCodes","fiberHelpers","runLog","child_process","_","Console","runMongoShell","url","mongoPath","pathJoin","getDevBundle","mongoUrl","parse","auth","split","ssl","query","args","push","hostname","port","pathname","spawn","convertToOSPath","stdio","spawnMongod","mongodPath","dbPath","replSetName","process","arch","env","extend","LANG","LC_ALL","findMongoPids","platform","dbDir_unused","promise","makeFulfillablePromise","exec","error","stdout","stderr","additionalInfo","JSON","stringify","code","reject","Error","mongo_pids","each","line","m","match","maxBuffer","pids","found_pid","parseInt","found_port","pid","app_dir","resolve","await","dbDir","psScript","message","ret","length","foundPid","foundPort","foundPath","findMongoPort","kill","e","mongoPort","portFile","exists","readFile","replace","net","Promise","client","connect","end","on","catch","findMongoAndKillItDead","processInfo","attempts","signal","sleepMs","mongodLockFile","unlink","StoppedDuringLaunch","launchMongo","options","onExit","noOplog","mongod_path","METEOR_TEST_FAKE_MONGOD_CONTROL_PORT","multiple","fakeMongodCommand","getCurrentToolsDir","subHandles","stopped","handle","stopPromise","stop","onStopped","yieldingMethod","object","methodName","race","err","res","launchOneMongoAndWaitForReadyForInitiate","mkdir_p","proc","allowKilling","rm_recursive","portFileExists","matchingPortFileExists","dbFiles","readdir","dbFile","test","removeListener","procExitHandler","bindEnvironment","stderrOutput","detectedErrors","listening","replSetReadyToBeInitiated","replSetReady","maybeReadyToTalk","readyToTalkPromise","stdoutOnData","stopOrReadyPromise","data","freeSpace","warn","command","badLocale","setEncoding","initiateReplSetAndWaitForReady","Db","Server","NpmModuleMongodb","db","poolSize","socketOptions","connectTimeoutMS","safe","configuration","_id","version","members","host","priority","config","admin","replSetGetConfig","has","replSetInitiate","replSetReconfig","force","wasJustSecondary","status","replSetGetStatus","any","member","stateStr","firstMemberState","heartbeatIntervalMillis","i","close","dbBasePath","projectLocalDir","range","writeFile","MongoRunner","self","onFailure","shuttingDown","resolveStartupPromise","errorCount","errorTimer","restartTimer","firstStart","suppressExitMessage","MRp","prototype","start","_startOrRestart","bind","_exited","_allowStartupToReturn","log","slice","join","_fail","clearTimeout","setTimeout","explanation","Codes","symbol","longText","EXIT_NET_ERROR","_mongoHosts","ports","map","oplogUrl","exports"],"mappings":"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","file":"tools/runners/run-mongo.js.map","sourcesContent":["var files = require('../fs/files.js');\nvar utils = require('../utils/utils.js');\nvar mongoExitCodes = require('../utils/mongo-exit-codes.js');\nvar fiberHelpers = require('../utils/fiber-helpers.js');\nvar runLog = require('./run-log.js');\nvar child_process = require('child_process');\n\nvar _ = require('underscore');\nimport { loadIsopackage } from '../tool-env/isopackets.js';\nvar Console = require('../console/console.js').Console;\n\n// Given a Mongo URL, open an interative Mongo shell on this terminal\n// on that database.\nvar runMongoShell = function (url) {\n  var mongoPath = files.pathJoin(\n    files.getDevBundle(), 'mongodb', 'bin', 'mongo'\n  );\n  // XXX mongo URLs are not real URLs (notably, the comma-separation for\n  // multiple hosts). We've had a little better luck using the mongodb-uri npm\n  // package.\n  var mongoUrl = require('url').parse(url);\n  var auth = mongoUrl.auth && mongoUrl.auth.split(':');\n  var ssl = require('querystring').parse(mongoUrl.query).ssl === \"true\";\n\n  var args = [];\n  if (ssl) {\n    args.push('--ssl');\n  }\n  if (auth) {\n    args.push('-u', auth[0]);\n  }\n  if (auth) {\n    args.push('-p', auth[1]);\n  }\n  args.push(mongoUrl.hostname + ':' + mongoUrl.port + mongoUrl.pathname);\n\n  child_process.spawn(files.convertToOSPath(mongoPath),\n    args, { stdio: 'inherit' });\n};\n\n// Start mongod with a dummy replSet and wait for it to listen.\nfunction spawnMongod(mongodPath, port, dbPath, replSetName) {\n  const child_process = require('child_process');\n\n  mongodPath = files.convertToOSPath(mongodPath);\n  dbPath = files.convertToOSPath(dbPath);\n\n  const args = [\n    // nb: cli-test.sh and findMongoPids make strong assumptions about the\n    // order of the arguments! Check them before changing any arguments.\n    '--bind_ip', '127.0.0.1',\n    '--port', port,\n    '--dbpath', dbPath,\n    // Use an 8MB oplog rather than 256MB. Uses less space on disk and\n    // initializes faster. (Not recommended for production!)\n    '--oplogSize', '8',\n    '--replSet', replSetName,\n    '--noauth'\n  ];\n\n  // Use mmapv1 on 32bit platforms, as our binary doesn't support WT\n  if (process.arch === 'ia32') {\n    args.push('--storageEngine', 'mmapv1', '--smallfiles');\n  } else {\n    // The WT journal seems to be at least 300MB, which is just too much\n    args.push('--nojournal');\n  }\n\n  return child_process.spawn(mongodPath, args, {\n    // Apparently in some contexts, Mongo crashes if your locale isn't set up\n    // right. I wasn't able to reproduce it, but many people on #4019\n    // were. Let's default a couple environment variables to English UTF-8 if\n    // they aren't set already. If these few aren't good enough, we'll at least\n    // detect the locale error and print a link to #4019 (look for\n    // `detectedErrors.badLocale` below).\n    env: _.extend({\n      LANG: 'en_US.UTF-8',\n      LC_ALL: 'en_US.UTF-8'\n    }, process.env)\n  });\n}\n\n// Find all running Mongo processes that were started by this program\n// (even by other simultaneous runs of this program). If passed,\n// dbDir and port act as filters on the list of running mongos.\n//\n// Yields. Returns an array of objects with keys pid, port, dbDir.\nvar findMongoPids;\nif (process.platform === 'win32') {\n  // Windows doesn't have a ps equivalent that (reliably) includes the command\n  // line, so approximate using the combined output of tasklist and netstat.\n  findMongoPids = function (dbDir_unused, port) {\n    var promise = fiberHelpers.makeFulfillablePromise();\n\n    child_process.exec('tasklist /fi \"IMAGENAME eq mongod.exe\"',\n      function (error, stdout, stderr) {\n        if (error) {\n          var additionalInfo = JSON.stringify(error);\n          if (error.code === 'ENOENT') {\n            additionalInfo = \"tasklist wasn't found on your system, it usually can be found at C:\\\\Windows\\\\System32\\\\.\";\n          }\n          promise.reject(\n            new Error(\"Couldn't run tasklist.exe: \" + additionalInfo)\n          );\n          return;\n        } else {\n          // Find the pids of all mongod processes\n          var mongo_pids = [];\n          _.each(stdout.split('\\n'), function (line) {\n            var m = line.match(/^mongod.exe\\s+(\\d+) /);\n            if (m) {\n              mongo_pids[m[1]] = true;\n            }\n          });\n\n          // Now get the corresponding port numbers\n          child_process.exec(\n            'netstat -ano',\n            {maxBuffer: 1024 * 1024 * 10},\n            function (error, stdout, stderr) {\n            if (error) {\n              promise.reject(\n                new Error(\"Couldn't run netstat -ano: \" +\n                          JSON.stringify(error))\n              );\n              return;\n            } else {\n              var pids = [];\n              _.each(stdout.split('\\n'), function (line) {\n                var m = line.match(/^\\s*TCP\\s+\\S+:(\\d+)\\s+\\S+\\s+LISTENING\\s+(\\d+)/);\n                if (m) {\n                  var found_pid =  parseInt(m[2], 10);\n                  var found_port = parseInt(m[1], 10);\n\n                  // We can't check the path app_dir so assume it always matches\n                  if (mongo_pids[found_pid] && (!port || port === found_port)) {\n                    // Note that if the mongo rest interface is enabled the\n                    // initial port + 1000 is also likely to be open.\n                    // So remove the pid so we only match it once.\n                    delete mongo_pids[found_pid];\n                    pids.push({\n                      pid: found_pid,\n                      port: found_port,\n                      app_dir: null});\n                  }\n                }\n              });\n\n              promise.resolve(pids);\n            }\n          });\n        }\n      });\n\n    return promise.await();\n  };\n} else {\n  findMongoPids = function (dbDir, port) {\n    var promise = fiberHelpers.makeFulfillablePromise();\n\n    // 'ps ax' should be standard across all MacOS and Linux.\n    // However, ps on OS X corrupts some non-ASCII characters in arguments,\n    // such as т (CYRILLIC SMALL LETTER TE), leading to this function\n    // failing to properly match pathnames with those characters.  #3999\n    //\n    // pgrep appears to do a better job (and has output that is roughly\n    // similar; it lacks a few fields that we don't care about).  Plus,\n    // it can do some of the grepping for us.\n    //\n    // However, 'pgrep' only started shipping with OS X 10.8 (and may be less\n    // common on Linux too), so we check to see if it exists and fall back to\n    // 'ps' if we can't find it.\n    //\n    // We avoid using pgrep on Linux, because some versions of Linux pgrep\n    // require you to pass -a/--list-full to include the arguments in the\n    // output, and other versions fail if you pass that option. We have not\n    // observed the Unicode corruption on Linux, so using ps ax there is fine.\n    var psScript = 'ps ax';\n    if (process.platform === 'darwin') {\n      psScript =\n        'if type pgrep >/dev/null 2>&1; then ' +\n        // -lf means to display and match against full argument lists.\n        // pgrep exits 1 if no processes match the argument; we're OK\n        // considering this as a success, but we don't want other errors\n        // to be ignored.  Note that this is sh not bash, so we can't use\n        // [[.\n        'pgrep -lf mongod; test \"$?\" -eq 0 -o \"$?\" -eq 1;' +\n        'else ps ax; fi';\n    }\n\n    child_process.exec(\n      psScript,\n      // we don't want this to randomly fail just because you're running lots of\n      // processes. 10MB should be more than ps ax will ever spit out; the default\n      // is 200K, which at least one person hit (#2158).\n      {maxBuffer: 1024 * 1024 * 10},\n      function (error, stdout, stderr) {\n        if (error) {\n          promise.reject(\n            new Error(\"Couldn't run ps ax: \" +\n                      JSON.stringify(error) + \"; \" +\n                      error.message)\n          );\n          return;\n        }\n\n        var ret = [];\n        _.each(stdout.split('\\n'), function (line) {\n          // Matches mongos we start. Note that this matches\n          // 'fake-mongod' (our mongod stub for automated tests) as well\n          // as 'mongod'.\n          var m = line.match(/^\\s*(\\d+).+mongod .+--port (\\d+) --dbpath (.+(?:\\/|\\\\)db)/);\n          if (m && m.length === 4) {\n            var foundPid =  parseInt(m[1], 10);\n            var foundPort = parseInt(m[2], 10);\n            var foundPath = m[3];\n\n            if ( (! port || port === foundPort) &&\n                 (! dbDir || dbDir === foundPath)) {\n              ret.push({\n                pid: foundPid,\n                port: foundPort,\n                dbDir: foundPath\n              });\n            }\n          }\n        });\n\n        promise.resolve(ret);\n      });\n\n    return promise.await();\n  };\n}\n\n// See if mongo is running already. Yields. Returns the port that\n// mongo is running on or null if mongo is not running.\nvar findMongoPort = function (dbDir) {\n  var pids = findMongoPids(dbDir);\n\n  if (pids.length !== 1) {\n    return null;\n  }\n\n  var pid = pids[0].pid;\n  try {\n    process.kill(pid, 0); // make sure it is still alive\n  } catch (e) {\n    return null;\n  }\n\n  return pids[0].port;\n};\n\n// XXX actually -- the code below is probably more correct than the code we\n// have above for non-Windows platforms (since that code relies on\n// `findMongoPids`). But changing this a few days before the 1.1 release\n// seemed too bold. But if you're changing code around here, consider using\n// the implementation below on non-Windows platforms as well.\nif (process.platform === 'win32') {\n  // On Windows, finding the Mongo pid, checking it and extracting the port\n  // is often unreliable (XXX reliable in what specific way?). There is an\n  // easier way to find the port of running Mongo: look it up in a METEOR-\n  // PORT file that we generate when running. This may result into problems\n  // where we try to connect to a mongod that is not running, or a wrong\n  // mongod if our current app is not running but there is a left-over file\n  // lying around. This still can be better than always failing to connect.\n  findMongoPort = function (dbPath) {\n    var mongoPort = null;\n\n    var portFile = files.pathJoin(dbPath, 'METEOR-PORT');\n    if (files.exists(portFile)) {\n      mongoPort = files.readFile(portFile, 'utf8').replace(/\\s/g, '');\n    }\n\n    // Now, check if there really is a Mongo server running on this port.\n    // (The METEOR-PORT file may point to an old Mongo server that's now\n    // stopped)\n    var net = require('net');\n\n    return new Promise(resolve => {\n      var client = net.connect({\n        port: mongoPort\n      }, () => {\n        // The server is running.\n        client.end();\n        resolve(mongoPort);\n      });\n      client.on('error', () => resolve(null));\n    }).catch(() => null).await();\n  }\n}\n\n\n// Kill any mongos running on 'port'. Yields, and returns once they\n// are all dead. Throws an exception on failure.\n//\n// This is a big hammer for dealing with still running mongos, but\n// smaller hammers have failed before and it is getting tiresome.\nvar findMongoAndKillItDead = function (port, dbPath) {\n  var pids = findMongoPids(null, port);\n\n  // Go through the list serially. There really should only ever be\n  // at most one but we're not taking any chances.\n  _.each(pids, function (processInfo) {\n    var pid = processInfo.pid;\n\n    // Send kill attempts and wait. First a SIGINT, then if it isn't\n    // dead within 2 sec, SIGKILL. Check every 100ms to see if it's\n    // dead.\n    for (var attempts = 1; attempts <= 40; attempts ++) {\n      var signal = 0;\n      if (attempts === 1) {\n        signal = 'SIGINT';\n      } else if (attempts === 20 || attempts === 30) {\n        signal = 'SIGKILL';\n      }\n\n      try {\n        process.kill(pid, signal);\n      } catch (e) {\n        // it's dead. on to the next one\n        return;\n      }\n\n      utils.sleepMs(100);\n    }\n\n    // give up after 4 seconds.\n    // XXX should actually catch this higher up and print a nice\n    // error. foreseeable conditions should never result in exceptions\n    // for the user.\n    throw new Error(\"Can't kill running mongo (pid \" + pid + \").\");\n  });\n\n  // If we had to kill mongod with SIGKILL, or on Windows where all calls to\n  // `process.kill` work like SIGKILL, mongod will not have the opportunity to\n  // close gracefully. Delete a lock file that may have been left over.\n  var mongodLockFile = files.pathJoin(dbPath, \"mongod.lock\");\n  if (files.exists(mongodLockFile)) {\n    files.unlink(mongodLockFile)\n  }\n};\n\nvar StoppedDuringLaunch = function () {};\n\n// Starts a single instance of mongod, and configures it properly as a singleton\n// replica set. Yields.  Returns once the mongod is successfully listening (or\n// the process exited).\n//\n// Takes an onExit handler, which will be invoked when the process exits (which\n// may be before or after this function returns depending on whether or not it\n// ever successfully started).\n//\n// If the 'multiple' option is set, it actually sets up three mongod instances\n// (launching the second and third on the next two ports after the specified\n// port). In this case, if any of the three instances exit for any reason, all\n// are killed (and onExit is then invoked). Also, the entirety of all three\n// databases is deleted before starting up.  This is mode intended for testing\n// mongo failover, not for normal development or production use.\nvar launchMongo = function (options) {\n  var onExit = options.onExit || function () {};\n\n  var noOplog = false;\n  var mongod_path = files.pathJoin(\n    files.getDevBundle(), 'mongodb', 'bin', 'mongod'\n  );\n  var replSetName = 'meteor';\n\n  // Automated testing: If this is set, instead of starting mongod, we\n  // start our stub (fake-mongod) which can then be remote-controlled\n  // by the test.\n  if (process.env.METEOR_TEST_FAKE_MONGOD_CONTROL_PORT) {\n    if (options.multiple) {\n      throw Error(\"Can't specify multiple with fake mongod\");\n    }\n\n    var fakeMongodCommand =\n      process.platform === \"win32\" ? \"fake-mongod.bat\" : \"fake-mongod\";\n    mongod_path = files.pathJoin(\n      files.getCurrentToolsDir(), 'tools',\n      'tests', 'fake-mongod', fakeMongodCommand);\n\n    // oplog support requires sending admin commands to mongod, so\n    // it'd be hard to make fake-mongod support it.\n    noOplog = true;\n  }\n\n  var subHandles = [];\n  var stopped = false;\n  var handle = {};\n  var stopPromise = new Promise((resolve, reject) => {\n    handle.stop = function () {\n      if (stopped) {\n        return;\n      }\n      stopped = true;\n      _.each(subHandles, function (handle) {\n        handle.stop();\n      });\n\n      if (options.onStopped) {\n        options.onStopped();\n      }\n\n      reject(new StoppedDuringLaunch);\n    };\n  });\n\n  var yieldingMethod = function (object, methodName, ...args) {\n    return Promise.race([\n      stopPromise,\n      new Promise((resolve, reject) => {\n        object[methodName](...args, (err, res) => {\n          err ? reject(err) : resolve(res);\n        });\n      })\n    ]).await();\n  };\n\n  var launchOneMongoAndWaitForReadyForInitiate = function (dbPath, port,\n                                                           portFile) {\n    files.mkdir_p(dbPath, 0o755);\n\n    var proc = null;\n\n    if (options.allowKilling) {\n      findMongoAndKillItDead(port, dbPath);\n    }\n\n    if (options.multiple) {\n      // This is only for testing, so we're OK with incurring the replset\n      // setup on each startup.\n      files.rm_recursive(dbPath);\n      files.mkdir_p(dbPath, 0o755);\n    } else if (portFile) {\n      var portFileExists = false;\n      var matchingPortFileExists = false;\n      try {\n        matchingPortFileExists = +(files.readFile(portFile)) === port;\n        portFileExists = true;\n      } catch (e) {\n        if (!e || e.code !== 'ENOENT') {\n          throw e;\n        }\n      }\n\n      // If this is the first time we're using this DB, or we changed port since\n      // the last time, then we want to destroy any existing replSet\n      // configuration and create a new one. First we delete the \"local\"\n      // database if it exists. (It's a pain and slow to change the port in an\n      // existing replSet configuration. It's also a little slow to initiate a\n      // new replSet, thus the attempt to not do it unless the port changes.)\n      //\n      // In the \"multiple\" case, we just wipe out the entire database and incur\n      // the cost, because this won't affect normal users running meteor.\n      if (!matchingPortFileExists) {\n        // Delete the port file if it exists, so we don't mistakenly believe\n        // that the DB is still configured.\n        if (portFileExists) {\n          files.unlink(portFile);\n        }\n\n        try {\n          var dbFiles = files.readdir(dbPath);\n        } catch (e) {\n          if (!e || e.code !== 'ENOENT') {\n            throw e;\n          }\n        }\n        _.each(dbFiles, function (dbFile) {\n          if (/^local\\./.test(dbFile)) {\n            files.unlink(files.pathJoin(dbPath, dbFile));\n          }\n        });\n      }\n    }\n\n    // Let's not actually start a process if we yielded (eg during\n    // findMongoAndKillItDead) and we decided to stop in the middle (eg, because\n    // we're in multiple mode and another process exited).\n    if (stopped) {\n      return;\n    }\n\n    proc = spawnMongod(mongod_path, port, dbPath, replSetName);\n\n    function stop() {\n      if (proc) {\n        proc.removeListener('exit', procExitHandler);\n        proc.kill('SIGINT');\n        proc = null;\n      }\n    }\n    require(\"../tool-env/cleanup.js\").onExit(stop);\n    subHandles.push({ stop });\n\n    var procExitHandler = fiberHelpers.bindEnvironment(function (code, signal) {\n      // Defang subHandle.stop().\n      proc = null;\n\n      // Kill any other processes too. This will also remove\n      // procExitHandler from the other processes, so onExit will only be called\n      // once.\n      handle.stop();\n\n      // Invoke the outer onExit callback.\n      onExit(code, signal, stderrOutput, detectedErrors);\n    });\n    proc.on('exit', procExitHandler);\n\n    var listening = false;\n    var replSetReadyToBeInitiated = false;\n    var replSetReady = false;\n\n    var maybeReadyToTalk;\n    var readyToTalkPromise = new Promise(function (resolve) {\n      maybeReadyToTalk = function () {\n        if (resolve &&\n            listening &&\n            (noOplog || replSetReadyToBeInitiated || replSetReady)) {\n          proc.stdout.removeListener('data', stdoutOnData);\n          resolve();\n          resolve = null;\n        }\n      };\n    });\n\n    var stopOrReadyPromise = Promise.race([\n      stopPromise,\n      readyToTalkPromise,\n    ]);\n\n    var detectedErrors = {};\n    var stdoutOnData = fiberHelpers.bindEnvironment(function (data) {\n      // note: don't use \"else ifs\" in this, because 'data' can have multiple\n      // lines\n      if (/\\[initandlisten\\] Did not find local replica set configuration document at startup/.test(data) ||\n          /\\[.*\\] Locally stored replica set configuration does not have a valid entry for the current node/.test(data)) {\n        replSetReadyToBeInitiated = true;\n        maybeReadyToTalk();\n      }\n\n      if (/ \\[.*\\] waiting for connections on port/.test(data)) {\n        listening = true;\n        maybeReadyToTalk();\n      }\n\n      if (/ \\[rsSync\\] transition to primary complete/.test(data)) {\n        replSetReady = true;\n        maybeReadyToTalk();\n      }\n\n      if (/Insufficient free space/.test(data)) {\n        detectedErrors.freeSpace = true;\n      }\n\n      // Running against a old mmapv1 engine, probably from pre-mongo-3.2 Meteor\n      if (/created by the 'mmapv1' storage engine, so setting the active storage engine to 'mmapv1'/.test(data)) {\n        Console.warn();\n        Console.warn('Your development database is using mmapv1, '\n          + 'the old, pre-MongoDB 3.0 database engine. '\n          + 'You should consider upgrading to Wired Tiger, the new engine. '\n          + 'The easiest way to do so in development is to run '\n          + Console.command('meteor reset') + '. '\n          + \"If you'd like to migrate your database, please consult \"\n          + Console.url('https://docs.mongodb.org/v3.0/release-notes/3.0-upgrade/'))\n        Console.warn();\n      }\n\n      if (/Invalid or no user locale set/.test(data)) {\n        detectedErrors.badLocale = true;\n      }\n    });\n    proc.stdout.setEncoding('utf8');\n    proc.stdout.on('data', stdoutOnData);\n\n    var stderrOutput = '';\n    proc.stderr.setEncoding('utf8');\n    proc.stderr.on('data', function (data) {\n      stderrOutput += data;\n    });\n\n    stopOrReadyPromise.await();\n  };\n\n\n  var initiateReplSetAndWaitForReady = function () {\n    try {\n      // Load mongo so we'll be able to talk to it.\n      const { Db, Server } = loadIsopackage('npm-mongo').NpmModuleMongodb;\n\n      // Connect to the intended primary and start a replset.\n      var db = new Db(\n        'meteor',\n        new Server('127.0.0.1', options.port, {\n          poolSize: 1,\n          socketOptions: {\n            connectTimeoutMS: 60000\n          }\n        }),\n        { safe: true }\n      );\n\n      yieldingMethod(db, 'open');\n      if (stopped) {\n        return;\n      }\n\n      var configuration = {\n        _id: replSetName,\n        version: 1,\n        members: [{_id: 0, host: '127.0.0.1:' + options.port, priority: 100}]\n      };\n\n      try {\n        const config = yieldingMethod(db.admin(), \"command\", {\n          replSetGetConfig: 1,\n        }).config;\n\n        // If a replication set configuration already exists, it's\n        // important that the new version number is greater than the old.\n        if (config && _.has(config, \"version\")) {\n          configuration.version = config.version + 1;\n        }\n      } catch (e) {}\n\n      if (options.multiple) {\n        // Add two more members: one of which should start as secondary but\n        // could in theory become primary, and one of which can never be\n        // primary.\n        configuration.members.push({\n          _id: 1, host: '127.0.0.1:' + (options.port + 1), priority: 5\n        });\n        configuration.members.push({\n          _id: 2, host: '127.0.0.1:' + (options.port + 2), priority: 0\n        });\n      }\n\n      try {\n        yieldingMethod(db.admin(), 'command', {\n          replSetInitiate: configuration,\n        });\n      } catch (e) {\n        if (e.message === 'already initialized') {\n          yieldingMethod(db.admin(), 'command', {\n            replSetReconfig: configuration,\n            force: true,\n          });\n        } else {\n          throw Error(\"rs.initiate error: \" + e.message);\n        }\n      }\n\n      if (stopped) {\n        return;\n      }\n\n      let wasJustSecondary = false;\n\n      // XXX timeout eventually?\n      while (!stopped) {\n        var status = yieldingMethod(\n          db.admin(), 'command', {replSetGetStatus: 1});\n\n        // See https://docs.mongodb.com/manual/reference/replica-states/\n        // for information on various states\n\n        // Are any of the members starting up or recovering?\n        if (_.any(status.members, function (member) {\n          return member.stateStr === 'STARTUP' ||\n            member.stateStr === 'STARTUP2' ||\n            member.stateStr === 'RECOVERING';\n        })) {\n          utils.sleepMs(20);\n          continue;\n        }\n\n        const firstMemberState = status.members[0].stateStr;\n\n        // Is the intended primary currently a secondary? (It passes through\n        // that phase briefly.)\n        if (firstMemberState === 'SECONDARY') {\n          utils.sleepMs(20);\n          wasJustSecondary = true;\n          continue;\n        }\n\n        // Mongo 3.2 introduced a new heartbeatIntervalMillis property\n        // on replica sets, used during \"primary\" negotiation.\n        //\n        // If the first member was _just_ promoted, we'll wait until\n        // the heartbeat interval has elapsed before proceeding since\n        // the decision is not official until the heartbeat has elapsed.\n        if (firstMemberState === 'PRIMARY' && wasJustSecondary) {\n          wasJustSecondary = false;\n          utils.sleepMs(status.heartbeatIntervalMillis);\n          continue;\n        }\n\n        // Anything else for the intended primary is probably an error.\n        if (firstMemberState !== 'PRIMARY') {\n          throw Error(\"Unexpected Mongo status: \" + JSON.stringify(status));\n        }\n\n        // Anything but secondary for the other members is probably an error.\n        for (var i = 1; i < status.members.length; ++i) {\n          if (status.members[i].stateStr !== 'SECONDARY') {\n            throw Error(\"Unexpected Mongo secondary status: \" +\n                        JSON.stringify(status));\n          }\n        }\n\n        break;\n      }\n\n      db.close(true /* means \"the app is closing the connection\" */);\n    } catch (e) {\n      // If the process has exited, we're doing another form of error\n      // handling. No need to throw random low-level errors farther.\n      if (!stopped || (e instanceof StoppedDuringLaunch)) {\n        throw e;\n      }\n    }\n  };\n\n  try {\n    if (options.multiple) {\n      var dbBasePath = files.pathJoin(options.projectLocalDir, 'dbs');\n      _.each(_.range(3), function (i) {\n        // Did we get stopped (eg, by one of the processes exiting) by now? Then\n        // don't start anything new.\n        if (stopped) {\n          return;\n        }\n        var dbPath = files.pathJoin(options.projectLocalDir, 'dbs', ''+i);\n        launchOneMongoAndWaitForReadyForInitiate(dbPath, options.port + i);\n      });\n      if (!stopped) {\n        initiateReplSetAndWaitForReady();\n      }\n    } else {\n      var dbPath = files.pathJoin(options.projectLocalDir, 'db');\n      var portFile = !noOplog && files.pathJoin(dbPath, 'METEOR-PORT');\n      launchOneMongoAndWaitForReadyForInitiate(dbPath, options.port, portFile);\n      if (!stopped && !noOplog) {\n        initiateReplSetAndWaitForReady();\n        if (!stopped) {\n          // Write down that we configured the database properly.\n          files.writeFile(portFile, options.port);\n        }\n      }\n    }\n  } catch (e) {\n    if (!(e instanceof StoppedDuringLaunch)) {\n      throw e;\n    }\n  }\n\n  if (stopped) {\n    return null;\n  }\n\n  return handle;\n};\n\n// This runs a Mongo process and restarts it whenever it fails. If it\n// restarts too often, we give up on restarting it, diagnostics are\n// logged, and onFailure is called.\n//\n// options: projectLocalDir, port, onFailure, multiple\nvar MongoRunner = function (options) {\n  var self = this;\n  self.projectLocalDir = options.projectLocalDir;\n  self.port = options.port;\n  self.onFailure = options.onFailure;\n  self.multiple = options.multiple;\n\n  self.handle = null;\n  self.shuttingDown = false;\n  self.resolveStartupPromise = null;\n\n  self.errorCount = 0;\n  self.errorTimer = null;\n  self.restartTimer = null;\n  self.firstStart = true;\n  self.suppressExitMessage = false;\n};\n\nvar MRp = MongoRunner.prototype;\n\n_.extend(MRp, {\n  // Blocks (yields) until the server has started for the first time and\n  // is accepting connections. (It might subsequently die and be\n  // restarted; we won't tell you about that.)\n  //\n  // If the server fails to start for the first time (after a few\n  // restarts), we'll print a message and give up.\n  start: function () {\n    var self = this;\n\n    if (self.handle) {\n      throw new Error(\"already running?\");\n    }\n\n    self._startOrRestart();\n\n    // Did we properly start up? Great!\n    if (self.handle) {\n      return;\n    }\n\n    // Are we shutting down? OK.\n    if (self.shuttingDown) {\n      return;\n    }\n\n    // Otherwise, wait for a successful _startOrRestart, or a failure.\n    if (! self.resolveStartupPromise) {\n      new Promise(function (resolve) {\n        self.resolveStartupPromise = resolve;\n      }).await();\n    }\n  },\n\n  // Tries to launch Mongo once.  It returns when either (a) Mongo is listening\n  // or (b) mongod exited before it got to the point of listening.\n  //\n  // (To be specific: in non-multiple mode, this means that the single mongod is\n  // listening and the primary, or that the single mongod died. In multiple\n  // mode, it means that the first mongod is listening and is primary and the\n  // other mongods are listening and are secondary, or that any mongod died (and\n  // it tried to kill the others).)\n  //\n  // In case (a), self.handle will be the handle returned from launchMongo; in\n  // case (b) self.handle will be null.\n  _startOrRestart: function () {\n    var self = this;\n\n    if (self.handle) {\n      throw new Error(\"already running?\");\n    }\n\n    var allowKilling = self.multiple || self.firstStart;\n    self.firstStart = false;\n    if (! allowKilling) {\n      // If we're not going to try to kill an existing mongod first, then we\n      // shouldn't annoy the user by telling it that we couldn't start up.\n      self.suppressExitMessage = true;\n    }\n\n    self.handle = launchMongo({\n      projectLocalDir: self.projectLocalDir,\n      port: self.port,\n      multiple: self.multiple,\n      allowKilling: allowKilling,\n      onExit: _.bind(self._exited, self),\n      onStopped() {\n        self.suppressExitMessage = false;\n      },\n    });\n    // It has successfully started up, so if it exits after this point, that\n    // actually is an interesting fact and we shouldn't suppress it.\n    self.suppressExitMessage = false;\n\n    if (self.handle) {\n      self._allowStartupToReturn();\n    }\n  },\n\n  _exited: function (code, signal, stderr, detectedErrors) {\n    var self = this;\n\n    self.handle = null;\n\n    // If Mongo exited because (or rather, anytime after) we told it\n    // to exit, great, nothing to do. Otherwise, we'll print an error\n    // and try to restart.\n    if (self.shuttingDown) {\n      return;\n    }\n\n    // Only print an error if we tried to kill Mongo and something went\n    // wrong. If we didn't try to kill Mongo, we'll do that on the next\n    // restart. Not killing it on the first try is important for speed,\n    // since findMongoAndKillItDead is a very slow operation.\n    if (! self.suppressExitMessage) {\n      // Print the last 20 lines of stderr.\n      runLog.log(\n        stderr.split('\\n').slice(-20).join('\\n') +\n          \"Unexpected mongo exit code \" + code +\n          (self.multiple ? \".\" : \". Restarting.\"));\n    }\n\n    // If we're in multiple mode, we never try to restart. That's to keep the\n    // test-only multiple code simple.\n    if (self.multiple) {\n      self._fail();\n      return;\n    }\n\n    // We'll restart it up to 3 times in a row. The counter is reset\n    // when 5 seconds goes without a restart. (Note that by using a\n    // timer instead of looking at the current date, we avoid getting\n    // confused by time changes.)\n    self.errorCount ++;\n    if (self.errorTimer) {\n      clearTimeout(self.errorTimer);\n    }\n    self.errorTimer = setTimeout(function () {\n      self.errorTimer = null;\n      self.errorCount = 0;\n    }, 5000);\n\n    if (self.errorCount < 3) {\n      // Wait a second, then restart.\n      self.restartTimer = setTimeout(fiberHelpers.bindEnvironment(function () {\n        self.restartTimer = null;\n        self._startOrRestart();\n      }), 1000);\n      return;\n    }\n\n    // Too many restarts, too quicky. It's dead. Print friendly\n    // diagnostics and give up.\n    var explanation = mongoExitCodes.Codes[code];\n    var message = \"Can't start Mongo server.\";\n\n    if (explanation && explanation.symbol === 'EXIT_UNCAUGHT' &&\n        detectedErrors.freeSpace) {\n      message += \"\\n\\n\" +\n        \"Looks like you are out of free disk space under .meteor/local.\";\n    } else if (explanation) {\n      message += \"\\n\" + explanation.longText;\n    }\n\n    if (explanation === mongoExitCodes.EXIT_NET_ERROR) {\n      message += \"\\n\\n\" +\n\"Check for other processes listening on port \" + self.port + \"\\n\" +\n\"or other Meteor instances running in the same project.\";\n    }\n\n    if (! explanation && /GLIBC/i.test(stderr)) {\n      message += \"\\n\\n\" +\n\"Looks like you are trying to run Meteor on an old Linux distribution.\\n\" +\n\"Meteor on Linux requires glibc version 2.9 or above. Try upgrading your\\n\" +\n\"distribution to the latest version.\";\n    }\n\n    if (detectedErrors.badLocale) {\n      message += \"\\n\\n\" +\n\"Looks like MongoDB doesn't understand your locale settings. See\\n\" +\n\"https://github.com/meteor/meteor/issues/4019 for more details.\";\n    }\n\n    runLog.log(message);\n    self._fail();\n  },\n\n  // Idempotent\n  stop: function () {\n    var self = this;\n\n    if (self.shuttingDown) {\n      return;\n    }\n\n    self.shuttingDown = true;\n\n    self.errorTimer && clearTimeout(self.errorTimer);\n    self.restartTimer && clearTimeout(self.restartTimer);\n\n    if (self.handle) {\n      self.handle.stop();\n      self.handle = null;\n    }\n  },\n\n  _allowStartupToReturn: function () {\n    var self = this;\n    if (self.resolveStartupPromise) {\n      var resolve = self.resolveStartupPromise;\n      self.resolveStartupPromise = null;\n      resolve();\n    }\n  },\n\n  _fail: function () {\n    var self = this;\n    self.stop();\n    self.onFailure && self.onFailure();\n    self._allowStartupToReturn();\n  },\n\n  _mongoHosts: function () {\n    var self = this;\n    var ports = [self.port];\n    if (self.multiple) {\n      ports.push(self.port + 1, self.port + 2);\n    }\n    return _.map(ports, function (port) {\n      return \"127.0.0.1:\" + port;\n    }).join(\",\");\n  },\n\n  mongoUrl: function () {\n    var self = this;\n    return \"mongodb://\" + self._mongoHosts() + \"/meteor\";\n  },\n\n  oplogUrl: function () {\n    var self = this;\n    return \"mongodb://\" + self._mongoHosts() + \"/local\";\n  }\n});\n\n\nexports.runMongoShell = runMongoShell;\nexports.findMongoPort = findMongoPort;\nexports.MongoRunner = MongoRunner;\nexports.findMongoAndKillItDead = findMongoAndKillItDead;\n"]}