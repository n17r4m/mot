{"version":3,"sources":["/tools/utils/eachline.js"],"names":["module","export","eachline","transform","split","watch","require","default","v","pipe","Transform","stream","callback","splitStream","trailing","_transform","chunk","encoding","done","line","toString","error"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,YAAS,MAAIA,QAAd;AAAuBC,aAAU,MAAIA;AAArC,CAAd;AAA+D,IAAIC,KAAJ;AAAUJ,OAAOK,KAAP,CAAaC,QAAQ,QAAR,CAAb,EAA+B;AAACC,UAAQC,CAAR,EAAU;AAACJ,YAAMI,CAAN;AAAQ;;AAApB,CAA/B,EAAqD,CAArD;AAAwD,IAAIC,IAAJ;AAAST,OAAOK,KAAP,CAAaC,QAAQ,WAAR,CAAb,EAAkC;AAACC,UAAQC,CAAR,EAAU;AAACC,WAAKD,CAAL;AAAO;;AAAnB,CAAlC,EAAuD,CAAvD;AAA0D,IAAIE,SAAJ;AAAcV,OAAOK,KAAP,CAAaC,QAAQ,QAAR,CAAb,EAA+B;AAACI,YAAUF,CAAV,EAAY;AAACE,gBAAUF,CAAV;AAAY;;AAA1B,CAA/B,EAA2D,CAA3D;;AAI3M,SAASN,QAAT,CAAkBS,MAAlB,EAA0BC,QAA1B,EAAoC;AACzCD,SAAOF,IAAP,CAAYN,UAAUS,QAAV,CAAZ;AACD;;AAEM,SAAST,SAAT,CAAmBS,QAAnB,EAA6B;AAClC,QAAMC,cAAcT,MAAM,OAAN,EAAe,IAAf,EAAqB;AACvCU,cAAU;AAD6B,GAArB,CAApB;AAIA,QAAMX,YAAY,IAAIO,SAAJ,EAAlB;;AAEAP,YAAUY,UAAV,GAAuB,UAAgBC,KAAhB,EAAuBC,QAAvB,EAAiCC,IAAjC;AAAA,oCAAuC;AAC5D,UAAIC,OAAOH,MAAMI,QAAN,CAAe,MAAf,CAAX;;AACA,UAAI;AACFD,6BAAaP,SAASO,IAAT,CAAb;AACD,OAFD,CAEE,OAAOE,KAAP,EAAc;AACdH,aAAKG,KAAL;AACA;AACD;;AACDH,WAAK,IAAL,EAAWC,IAAX;AACD,KATsB;AAAA,GAAvB;;AAWA,SAAOV,KACLI,WADK,EAELV,SAFK,CAAP;AAID","file":"tools/utils/eachline.js.map","sourcesContent":["import split from \"split2\";\nimport pipe from \"multipipe\";\nimport { Transform } from \"stream\";\n\nexport function eachline(stream, callback) {\n  stream.pipe(transform(callback));\n}\n\nexport function transform(callback) {\n  const splitStream = split(/\\r?\\n/, null, {\n    trailing: false\n  });\n\n  const transform = new Transform();\n\n  transform._transform = async function (chunk, encoding, done) {\n    let line = chunk.toString(\"utf8\");\n    try {\n      line = await callback(line);\n    } catch (error) {\n      done(error);\n      return;\n    }\n    done(null, line);\n  };\n\n  return pipe(\n    splitStream,\n    transform,\n  );\n}\n"]}