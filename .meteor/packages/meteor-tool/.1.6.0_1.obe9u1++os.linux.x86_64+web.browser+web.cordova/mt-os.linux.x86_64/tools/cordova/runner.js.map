{"version":3,"sources":["/tools/cordova/runner.js"],"names":["module","export","CordovaRunner","_","watch","require","default","v","buildmessage","runLog","Console","main","displayNameForPlatform","prepareProjectForBuild","constructor","cordovaProject","runTargets","started","projectContext","platformsForRunTargets","uniq","map","runTarget","platform","checkPlatformsForRunTargets","ensurePlatformsAreSynchronized","satisfied","messages","capture","title","checkPlatformRequirements","hasMessages","printMessages","ExitWithCode","printWarningsIfNeeded","packageMap","getInfo","warn","labelWarn","url","findWhere","isDevice","prepareProject","bundlePath","pluginVersions","options","assertInCapture","enterJob","prepareFromAppBundle","jobHasMessages","prepareForPlatform","startRunTargets","Promise","await","start","log","arrow","havePlatformsChangedSinceLastRun","cordovaPlatformsInApp","isEqual","intersection","havePluginsChangedSinceLastRun"],"mappings":"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","file":"tools/cordova/runner.js.map","sourcesContent":["import _ from 'underscore';\nimport buildmessage from '../utils/buildmessage.js';\nimport runLog from '../runners/run-log.js';\nimport { Console } from '../console/console.js';\nimport main from '../cli/main.js';\n\nimport { displayNameForPlatform, prepareProjectForBuild } from './index.js';\n\nexport class CordovaRunner {\n  constructor(cordovaProject, runTargets) {\n    this.cordovaProject = cordovaProject;\n    this.runTargets = runTargets;\n\n    this.started = false;\n  }\n\n  get projectContext() {\n    return this.cordovaProject.projectContext;\n  }\n\n  get platformsForRunTargets() {\n    return _.uniq(this.runTargets.map((runTarget) => runTarget.platform));\n  }\n\n  checkPlatformsForRunTargets() {\n    this.cordovaProject.ensurePlatformsAreSynchronized();\n\n    let satisfied = true;\n    const messages = buildmessage.capture(\n      { title: `checking platform requirements` }, () => {\n      for (const platform of this.platformsForRunTargets) {\n        satisfied =\n          this.cordovaProject.checkPlatformRequirements(platform) &&\n          satisfied;\n      }\n    });\n\n    if (messages.hasMessages()) {\n      Console.printMessages(messages);\n      throw new main.ExitWithCode(1);\n    } else if (!satisfied) {\n      throw new main.ExitWithCode(1);\n    };\n  }\n\n  printWarningsIfNeeded() {\n    // OAuth2 packages don't work so well with any mobile platform except the\n    // iOS Simulator. Print a warning and direct users to the wiki page for help.\n    if (this.projectContext.packageMap.getInfo('oauth2')) {\n      Console.warn();\n      Console.labelWarn(\n        \"It looks like you are using OAuth2 login in your app. \" +\n        \"Meteor's OAuth2 implementation does not currently work with \" +\n        \"mobile apps in local development mode, except in the iOS \" +\n        \"simulator. You can run the iOS simulator with 'meteor run ios'. \" +\n        \"For additional workarounds, see \" +\n        Console.url(\n          \"https://github.com/meteor/meteor/wiki/\" +\n          \"OAuth-for-mobile-Meteor-clients.\"));\n    }\n\n    // If we are targeting remote devices, warn about ports and same network.\n    if (_.findWhere(this.runTargets, { isDevice: true })) {\n      Console.warn();\n      Console.labelWarn(\n        \"You are testing your app on a remote device. \" +\n        \"For the mobile app to be able to connect to the local server, make \" +\n        \"sure your device is on the same network, and that the network \" +\n        \"configuration allows clients to talk to each other \" +\n        \"(no client isolation).\");\n    }\n  }\n\n  prepareProject(bundlePath, pluginVersions, options) {\n    buildmessage.assertInCapture();\n\n    buildmessage.enterJob({ title: \"preparing Cordova project\" }, () => {\n      this.cordovaProject.prepareFromAppBundle(bundlePath,\n        pluginVersions, options);\n\n      if (buildmessage.jobHasMessages()) {\n        return;\n      }\n\n      for (let platform of this.platformsForRunTargets) {\n        this.cordovaProject.prepareForPlatform(platform);\n      }\n    });\n\n    this.pluginVersions = pluginVersions;\n  }\n\n  startRunTargets() {\n    this.started = false;\n\n    for (let runTarget of this.runTargets) {\n      const messages = buildmessage.capture({ title: `starting ${runTarget.title}` }, () => {\n        Promise.await(runTarget.start(this.cordovaProject));\n      });\n      if (messages.hasMessages()) {\n        Console.printMessages(messages);\n      } else {\n        runLog.log(`Started ${runTarget.title}.`, { arrow: true });\n      }\n    }\n\n    this.started = true;\n  }\n\n  havePlatformsChangedSinceLastRun() {\n    const platformsForRunTargets = this.platformsForRunTargets;\n    if (!platformsForRunTargets) {\n      return false;\n    }\n\n    const cordovaPlatformsInApp = this.cordovaProject.cordovaPlatformsInApp;\n\n    return !_.isEqual(platformsForRunTargets,\n      _.intersection(platformsForRunTargets, cordovaPlatformsInApp));\n  }\n\n  havePluginsChangedSinceLastRun(pluginVersions) {\n    return this.pluginVersions &&\n      !_.isEqual(this.pluginVersions, pluginVersions);\n  }\n}\n"]}