{"version":3,"sources":["meteor://ðŸ’»app/packages/minifier-postcss/plugin/minify-css.js"],"names":["appModulePath","Npm","require","addPath","process","cwd","Future","fs","Plugin","path","postCSS","sourcemap","registerMinifier","extensions","minifier","CssToolsMinifier","PACKAGES_FILE","packageFile","resolve","loadJSONFile","filePath","content","readFileSync","JSON","parse","e","console","log","postcssConfigPlugins","postcssConfigParser","postcssConfigExcludedPackages","jsonContent","postcss","plugins","parser","excludedPackages","getPostCSSPlugins","Object","keys","forEach","pluginName","postCSSPlugin","name","postcssPlugin","push","getPostCSSParser","getExcludedPackages","excluded","Array","isNotInExcludedPackages","pathInBundle","processedPackageName","exclArr","map","packageName","replace","indexOf","isNotImport","inputFileUrl","test","prototype","processFilesForBundle","files","options","mode","minifyMode","length","filesToMerge","file","_source","url","merged","mergeCss","addStylesheet","data","code","sourceMap","minifiedFiles","CssTools","minifyCss","minified","css","originals","excludedPackagesArr","cssAsts","filename","getPathInBundle","f","postres","isFileForPostCSS","getContentsAsString","from","then","result","warnings","warn","stderr","write","toString","error","errMsg","message","showSourceCode","parseOptions","source","position","wait","ast","parseCss","line","column","reason","type","stylesheet","rules","warnCb","msg","mergedCssAst","mergeCssAsts","stringifiedCss","stringifyCss","inputSourcemaps","sourcesContent","sources","newMap","SourceMapGenerator","fromSourceMap","SourceMapConsumer","getSourceMap","applySourceMap","err"],"mappings":"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","file":"/packages/minifier-postcss_plugin.js","sourcesContent":["var appModulePath = Npm.require('app-module-path');\nappModulePath.addPath(process.cwd() + '/node_modules/');\n\nvar Future = Npm.require('fibers/future');\nvar fs = Plugin.fs;\nvar path = Plugin.path;\nvar postCSS = Npm.require('postcss');\nvar sourcemap = Npm.require('source-map');\n\nPlugin.registerMinifier({\n    extensions: ['css']\n}, function () {\n    const minifier = new CssToolsMinifier();\n    return minifier;\n});\n\nvar PACKAGES_FILE = 'package.json';\n\nvar packageFile = path.resolve(process.cwd(), PACKAGES_FILE);\n\nvar loadJSONFile = function (filePath) {\n    let content;\n    try {\n        content = fs.readFileSync(filePath);\n        try {\n            return JSON.parse(content);\n        } catch (e) {\n            console.log('Error: failed to parse ', filePath, ' as JSON');\n            return {};\n        }\n    } catch (e) {\n        return false;\n    }\n};\n\nvar postcssConfigPlugins;\nvar postcssConfigParser;\nvar postcssConfigExcludedPackages;\n\nvar jsonContent = loadJSONFile(packageFile);\n\nif (typeof jsonContent === 'object') {\n    postcssConfigPlugins = jsonContent.postcss && jsonContent.postcss.plugins;\n    postcssConfigParser = jsonContent.postcss && jsonContent.postcss.parser;\n    postcssConfigExcludedPackages = jsonContent.postcss && jsonContent.postcss.excludedPackages;\n}\n\nvar getPostCSSPlugins = function () {\n    let plugins = [];\n    if (postcssConfigPlugins) {\n        Object.keys(postcssConfigPlugins).forEach(function (pluginName) {\n            let postCSSPlugin = Npm.require(pluginName);\n            if (postCSSPlugin && postCSSPlugin.name === 'creator' && postCSSPlugin().postcssPlugin) {\n                plugins.push(postCSSPlugin(postcssConfigPlugins ? postcssConfigPlugins[pluginName] : {}));\n            }\n        });\n    }\n    return plugins;\n};\n\nvar getPostCSSParser = function () {\n    let parser = null;\n    if (postcssConfigParser) {\n        parser = Npm.require(postcssConfigParser);\n    }\n    return parser;\n};\n\nvar getExcludedPackages = function () {\n    let excluded = null;\n    if (postcssConfigExcludedPackages && postcssConfigExcludedPackages instanceof Array) {\n        excluded = postcssConfigExcludedPackages;\n    }\n    return excluded;\n};\n\nvar isNotInExcludedPackages = function (excludedPackages, pathInBundle) {\n    let processedPackageName;\n    let exclArr = [];\n    if (excludedPackages && excludedPackages instanceof Array) {\n        exclArr = excludedPackages.map(packageName => {\n            processedPackageName = packageName && packageName.replace(':', '_');\n            return pathInBundle && pathInBundle.indexOf('packages/' + processedPackageName) > -1;\n        });\n    }\n    return exclArr.indexOf(true) === -1;\n};\n\nvar isNotImport = function (inputFileUrl) {\n    return !(/\\.import\\.css$/.test(inputFileUrl) ||\n             /(?:^|\\/)imports\\//.test(inputFileUrl));\n};\n\nfunction CssToolsMinifier() {};\n\nCssToolsMinifier.prototype.processFilesForBundle = function (files, options) {\n    var mode = options.minifyMode;\n\n    if (!files.length) return;\n\n    var filesToMerge = [];\n\n    files.forEach(function (file) {\n        if (isNotImport(file._source.url)) {\n            filesToMerge.push(file);\n        }\n    });\n\n    var merged = mergeCss(filesToMerge);\n\n    if (mode === 'development') {\n        files[0].addStylesheet({\n            data: merged.code,\n            sourceMap: merged.sourceMap,\n            path: 'merged-stylesheets.css'\n        });\n        return;\n    }\n\n    var minifiedFiles = CssTools.minifyCss(merged.code);\n\n    if (files.length) {\n        minifiedFiles.forEach(function (minified) {\n            files[0].addStylesheet({\n                data: minified\n            });\n        });\n    }\n};\n\n// Lints CSS files and merges them into one file, fixing up source maps and\n// pulling any @import directives up to the top since the CSS spec does not\n// allow them to appear in the middle of a file.\nvar mergeCss = function (css) {\n    // Filenames passed to AST manipulator mapped to their original files\n    var originals = {};\n    var excludedPackagesArr = getExcludedPackages();\n\n    var cssAsts = css.map(function (file) {\n        var filename = file.getPathInBundle();\n        originals[filename] = file;\n\n        var f = new Future;\n\n        var css;\n        var postres;\n        var isFileForPostCSS;\n\n        if (isNotInExcludedPackages(excludedPackagesArr, file.getPathInBundle())) {\n            isFileForPostCSS = true;\n        } else {\n            isFileForPostCSS = false;\n        }\n\n        postCSS(isFileForPostCSS ? getPostCSSPlugins() : [])\n            .process(file.getContentsAsString(), {\n                from: process.cwd() + file._source.url,\n                parser: getPostCSSParser()\n            })\n            .then(function (result) {\n                result.warnings().forEach(function (warn) {\n                    process.stderr.write(warn.toString());\n                });\n                f.return(result);\n            })\n            .catch(function (error) {\n                var errMsg = error.message;\n                if (error.name === 'CssSyntaxError') {\n                    errMsg = error.message + '\\n\\n' + 'Css Syntax Error.' + '\\n\\n' + error.message + error.showSourceCode()\n                }\n                error.message = errMsg;\n                f.return(error);\n            });\n\n        try {\n            var parseOptions = {\n                source: filename,\n                position: true\n            };\n\n            postres = f.wait();\n\n            if (postres.name === 'CssSyntaxError') {\n                throw postres;\n            }\n\n            css = postres.css;\n\n            var ast = CssTools.parseCss(css, parseOptions);\n            ast.filename = filename;\n        } catch (e) {\n\n            if (e.name === 'CssSyntaxError') {\n                file.error({\n                    message: e.message,\n                    line: e.line,\n                    column: e.column\n                });\n            } else if (e.reason) {\n                file.error({\n                    message: e.reason,\n                    line: e.line,\n                    column: e.column\n                });\n            } else {\n                // Just in case it's not the normal error the library makes.\n                file.error({\n                    message: e.message\n                });\n            }\n\n            return {\n                type: \"stylesheet\",\n                stylesheet: {\n                    rules: []\n                },\n                filename: filename\n            };\n        }\n\n        return ast;\n    });\n\n    var warnCb = function (filename, msg) {\n        // XXX make this a buildmessage.warning call rather than a random log.\n        //     this API would be like buildmessage.error, but wouldn't cause\n        //     the build to fail.\n        console.log(filename + ': warn: ' + msg);\n    };\n\n    var mergedCssAst = CssTools.mergeCssAsts(cssAsts, warnCb);\n\n    // Overwrite the CSS files list with the new concatenated file\n    var stringifiedCss = CssTools.stringifyCss(mergedCssAst, {\n        sourcemap: true,\n        // don't try to read the referenced sourcemaps from the input\n        inputSourcemaps: false\n    });\n\n    if (!stringifiedCss.code) {\n        return {\n            code: ''\n        };\n    }\n\n    // Add the contents of the input files to the source map of the new file\n    stringifiedCss.map.sourcesContent =\n        stringifiedCss.map.sources.map(function (filename) {\n            return originals[filename].getContentsAsString();\n        });\n\n    // If any input files had source maps, apply them.\n    // Ex.: less -> css source map should be composed with css -> css source map\n    var newMap = sourcemap.SourceMapGenerator.fromSourceMap(\n        new sourcemap.SourceMapConsumer(stringifiedCss.map));\n\n    Object.keys(originals).forEach(function (name) {\n        var file = originals[name];\n        if (!file.getSourceMap())\n            return;\n        try {\n            newMap.applySourceMap(\n                new sourcemap.SourceMapConsumer(file.getSourceMap()), name);\n        } catch (err) {\n            // If we can't apply the source map, silently drop it.\n            //\n            // XXX This is here because there are some less files that\n            // produce source maps that throw when consumed. We should\n            // figure out exactly why and fix it, but this will do for now.\n        }\n    });\n\n    return {\n        code: stringifiedCss.code,\n        sourceMap: newMap.toString()\n    };\n};\n"]}