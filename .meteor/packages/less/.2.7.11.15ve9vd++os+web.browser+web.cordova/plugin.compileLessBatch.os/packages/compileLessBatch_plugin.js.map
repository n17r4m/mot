{"version":3,"sources":["meteor://ðŸ’»app/packages/compileLessBatch/plugin/compile-less.js"],"names":["path","Plugin","less","Npm","require","Future","registerCompiler","extensions","archMatching","LessCompiler","MultiFileCachingCompiler","constructor","compilerName","defaultCacheSize","getCacheKey","inputFile","getSourceHash","compileResultSize","compileResult","css","length","sourceMapSize","sourceMap","isRoot","fileOptions","getFileOptions","hasOwnProperty","isImport","pathInPackage","getPathInPackage","test","compileOneFile","allFiles","importPlugin","MeteorImportLessPlugin","f","output","render","getContentsAsBuffer","toString","filename","getAbsoluteImportPath","plugins","outputSourceFiles","resolver","wait","e","error","message","sourcePath","decodeFilePath","line","column","map","JSON","parse","sources","referencedImportPaths","imports","forEach","has","push","addCompileResult","addStylesheet","data","minVersion","install","pluginManager","addFileManager","MeteorImportLessFileManager","AbstractFileManager","supports","match","loadFile","currentDirectory","options","environment","cb","packageMatch","Error","currentPackagePrefix","resolvedFilename","join","type","contents","get","filePath"],"mappings":"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","file":"/packages/compileLessBatch_plugin.js","sourcesContent":["const path = Plugin.path;\nconst less = Npm.require('less');\nconst Future = Npm.require('fibers/future');\n\nPlugin.registerCompiler({\n  // *.lessimport has been deprecated since 0.7.1, but it still works. We\n  // *recommend *.import.less or the imports subdirectory instead.\n  extensions: ['less', 'lessimport'],\n  archMatching: 'web'\n}, () => new LessCompiler());\n\n// CompileResult is {css, sourceMap}.\nclass LessCompiler extends MultiFileCachingCompiler {\n  constructor() {\n    super({\n      compilerName: 'less',\n      defaultCacheSize: 1024*1024*10,\n    });\n  }\n\n  getCacheKey(inputFile) {\n    return inputFile.getSourceHash();\n  }\n\n  compileResultSize(compileResult) {\n    return compileResult.css.length +\n      this.sourceMapSize(compileResult.sourceMap);\n  }\n\n  // The heuristic is that a file is an import (ie, is not itself\n  // processed as a root) if it matches *.import.less or *.lessimport.\n  // This can be overridden in either direction via an explicit `isImport`\n  // file option in api.addFiles.\n  isRoot(inputFile) {\n    const fileOptions = inputFile.getFileOptions();\n    if (fileOptions.hasOwnProperty('isImport')) {\n      return !fileOptions.isImport;\n    }\n\n    const pathInPackage = inputFile.getPathInPackage();\n    return !(/\\.import\\.less$/.test(pathInPackage) ||\n             /\\.lessimport$/.test(pathInPackage));\n  }\n\n  compileOneFile(inputFile, allFiles) {\n    const importPlugin = new MeteorImportLessPlugin(allFiles);\n\n    const f = new Future;\n    let output;\n    try {\n      less.render(inputFile.getContentsAsBuffer().toString('utf8'), {\n        filename: this.getAbsoluteImportPath(inputFile),\n        plugins: [importPlugin],\n        // Generate a source map, and include the source files in the\n        // sourcesContent field.  (Note that source files which don't themselves\n        // produce text (eg, are entirely variable definitions) won't end up in\n        // the source map!)\n        sourceMap: { outputSourceFiles: true }\n      }, f.resolver());\n      output = f.wait();\n    } catch (e) {\n      inputFile.error({\n        message: e.message,\n        sourcePath: decodeFilePath(e.filename),\n        line: e.line,\n        column: e.column\n      });\n      return null;\n    }\n\n    if (output.map) {\n      const map = JSON.parse(output.map);\n      map.sources = map.sources.map(decodeFilePath);\n      output.map = map;\n    }\n\n    const compileResult = {css: output.css, sourceMap: output.map};\n    const referencedImportPaths = [];\n    output.imports.forEach((path) => {\n      // Some files that show up in output.imports are not actually files; for\n      // example @import url(\"...\");\n      if (allFiles.has(path)) {\n        referencedImportPaths.push(path);\n      }\n    });\n\n    return {compileResult, referencedImportPaths};\n  }\n\n  addCompileResult(inputFile, compileResult) {\n    inputFile.addStylesheet({\n      data: compileResult.css,\n      path: inputFile.getPathInPackage() + '.css',\n      sourceMap: compileResult.sourceMap\n    });\n  }\n}\n\nclass MeteorImportLessPlugin {\n  constructor(allFiles) {\n    this.allFiles = allFiles;\n    this.minVersion = [2, 5, 0];\n  }\n\n  install(less, pluginManager) {\n    pluginManager.addFileManager(\n      new MeteorImportLessFileManager(this.allFiles));\n  }\n}\n\nclass MeteorImportLessFileManager extends less.AbstractFileManager {\n  constructor(allFiles) {\n    super();\n    this.allFiles = allFiles;\n  }\n\n  // We want to be the only active FileManager, so claim to support everything.\n  supports(filename) {\n    // We shouldn't process files that start with `//` or a protocol because\n    // those are not relative to the app at all; they are probably native\n    // CSS imports\n    if (! filename.match(/^(https?:)?\\/\\//)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  loadFile(filename, currentDirectory, options, environment, cb) {\n    const packageMatch = currentDirectory.match(/^(\\{[^}]*\\})/);\n    if (! packageMatch) {\n      // shouldn't happen.  all filenames less ever sees should involve this {}\n      // thing!\n      cb(new Error('file without Meteor context? ' + currentDirectory));\n      return;\n    }\n    const currentPackagePrefix = packageMatch[1];\n\n    let resolvedFilename;\n    if (filename[0] === '/') {\n      // Map `/foo/bar.less` onto `{thispackage}/foo/bar.less`\n      resolvedFilename = currentPackagePrefix + filename;\n    } else if (filename[0] === '{') {\n      resolvedFilename = filename;\n    } else {\n      resolvedFilename = path.join(currentDirectory, filename);\n    }\n\n    if (!this.allFiles.has(resolvedFilename)) {\n      cb({type: 'File', message: 'Unknown import: ' + filename});\n      return;\n    }\n    cb(null, {\n      contents: this.allFiles.get(resolvedFilename)\n        .getContentsAsBuffer().toString('utf8'),\n      filename: resolvedFilename\n    });\n  }\n}\n\nfunction decodeFilePath (filePath) {\n  const match = filePath.match(/^{(.*)}\\/(.*)$/);\n  if (! match)\n    throw new Error('Failed to decode Less path: ' + filePath);\n\n  if (match[1] === '') {\n    // app\n    return match[2];\n  }\n\n  return 'packages/' + match[1] + '/' + match[2];\n}\n"]}